
@{
    ViewData["Title"] = "客户接口授权";
}


<style>
    .v-modal { display: none; }
    #app { margin-top: 15px; padding: 15px; background-color: #fff; overflow: hidden; zoom: 1; }
    .span-tag { margin-right: 20px; margin-top: 9px; margin-bottom: 9px; padding: 0px 10px; cursor: pointer; color: #606266; border: 1px solid rgba(64,158,255,.2); height: 32px; line-height: 30px; border-radius: 4px; display: inline-block; }
    .el-tag { margin-right: 20px; margin-top: 9px; margin-bottom: 9px; }
    .el-dialog__body { padding: 15px; }
</style>
<div id="app">


    <el-collapse accordion v-for="item in data" >
        <el-row style="height: 48px; line-height: 48px;border-bottom: 1px solid #EBEEF5;">
            <el-col :span="16">
                <p>{{item.customerName}}</p>
            </el-col>
            <el-col :span="8" style="text-align: right;">
                @*<span type="danger" style="color:#F56C6C;cursor:pointer;padding-right:15px;">取消此次接口操作</span>*@
                <span style="color:#409EFF;cursor:pointer;padding-right:15px;" @@click="showDialog(item)">添加其它接口</span>
                <span style="color:#67C23A;cursor:pointer;" @@click="updateServiceAuthorize(item)">保存本次修改</span>
            </el-col>
        </el-row>

        <el-collapse-item title="已授权接口" class="author_checkboxs">
            <div v-for="service in item.serviceinfos">
                <el-row style="padding:15px;background-color:#ECF5FF;">
                    <el-col :span="12">
                        <span>{{service.serviceName}}</span>(<small>{{service.serviceCode}}</small> )
                    </el-col>
                    <el-col :span="12" style="text-align: right;">
                        <span type="danger" style="color:#F56C6C;cursor:pointer;" @@click="removeServiceAuthorize(item.customerId,service.serviceId)">移除此接口授权</span>
                    </el-col>
                </el-row>
                <div style="padding-left:15px;padding-right:15px;">
                    <div style="padding-top:10px;"><span>已授权字段</span></div>
                    <el-tag v-for="(field,index) in service.alreadyFields"  :disable-transitions="false" @@close="fieldDel(field,service,index)" closable>
                        {{ field.fieldName }}
                    </el-tag>
                    <div style="border-top: 1px solid #EBEEF5;padding-top:10px;margin-top:10px;" ><span>未授权字段</span></div>

                    <span v-for="(field,index) in service.noryetfields" class="span-tag" href="#" @@click="fieldAdd(field,service,index)">{{ field.fieldName}}</span>
                </div>
            </div>

        </el-collapse-item>
    </el-collapse>
    <div style="width:1690px;">
        <el-dialog title="给用户授权新接口" :visible.sync="centerDialogVisible" width="68%" style="font-size:15px" modal-append-to-body="false" close-on-click-modal="false">
            <div style="margin-bottom:10px;margin-top:10px;" v-for="item in notbindData">
                <el-row style="padding:15px;background-color:#ECF5FF;">
                    <el-col :span="18">
                        <el-checkbox :indeterminate="item.isIndeterminate" v-model="item.checkAll" @@change="handleCheckAllChange(item)"> <span>{{item.serviceName}}</span>(<small>{{item.serviceCode}}</small> ) </el-checkbox>
                    </el-col>
                </el-row>
                <div style="padding:15px 15px 0px 15px;">
                    <el-checkbox-group v-model="item.checkedFields" @@change="handleCheckedCitiesChange(item)">
                        <el-checkbox v-for="field in item.fields" :label="field" style="margin:9px 15px 9px 0px;">
                            <span>{{field.fieldName}}</span>(<small>{{field.fieldCode}}</small> )
                        </el-checkbox>
                    </el-checkbox-group>
                </div>
            </div>

            <div slot="footer" class="dialog-footer">
                <el-button @@click="centerDialogVisible= false">取 消</el-button>
                <el-button type="primary" @@click="dialogSave">保 存</el-button>
            </div>
        </el-dialog>
    </div>

</div>

<script>
    layui.use(['element', 'layer'], function () {
        var layer = layui.layer
        var form = layui.form;
        var $ = layui.$
    })
</script>
<script>

    new Vue({
        el: "#app",
        data: function () {
            return {
                data: [],
                activeNames: ['1'],
                checkAll: false,
                checkedCities: [],
                cities: ['字段1', '字段2', '字段3', '字段4', '字段5', '字段6', '字段7', '字段8', '字段9', '字段10', '字段11', '字段12'],
                cities1: ['字段1', '字段2', '字段3', '字段4', '字段5', '字段6', '字段7', '字段8', '字段9', '字段10', '字段11', '字段12'],
                isIndeterminate: false,
                centerDialogVisible: false,
                pageSize: 10,
                currentPage: 1,
                notbindData: [],
                thisCustomer: {}
            }
        },
        methods: {
            fetchList: function () {
                let vm = this
                axios.get(`/api/DcsCustomerServiceData/${vm.pageSize}/${vm.currentPage}`)
                    .then(function (response) {
                        console.log(response.data);
                        vm.data = response.data.content
                    })
                    .catch(function (error) {
                        console.log(error)
                    });
            },
            fetchNotBindService: function () {
                let vm = this
                axios.get(`/api/DcsCustomerServiceData/notbind/${vm.thisCustomer.customerid}`)
                    .then(function (response) {
                        console.log(response.data);
                        vm.notbindData = response.data.content
                    })
                    .catch(function (error) {
                        console.log(error)
                    });
            },
            showDialog: function (customer) {
                this.centerDialogVisible = true
                console.log(customer)

                this.thisCustomer = { customerid: customer.customerId, customerName: customer.customerName }
                this.fetchNotBindService()
            },
            dialogSave: function () {
                let vm = this
                console.log(this.thisCustomer)
                console.log(vm.notbindData)

                ///取出选中的所有接口以及字段
                let data = vm.notbindData
                let parms = []
                for (let i = 0; i < data.length; i++) {
                    let checkeds = data[i].checkedFields

                    if (checkeds.length <= 0) {
                        continue;
                    }
                    let servicep = {}
                    servicep.serviceId = data[i].serviceId
                    fields = []
                    for (let j = 0; j < checkeds.length; j++) {
                        fields.push(checkeds[j].fieldId)
                    }
                    servicep.fieldIds = fields
                    parms.push(servicep)
                }
                if (parms.length <= 0) {
                    vm.$message({ title: '异常', message: '未选择任何接口', type: 'error' })
                    return
                }
                axios.post('/api/DcsCustomerServiceData', { CustomerId: vm.thisCustomer.customerid, ServiceInfos: parms })
                    .then(function (response) {
                        if (!response.data.isSuccess) {
                            vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                            return;
                        }
                        vm.$message({ title: '成功', message: response.data.message, type: 'success' })
                        vm.fetchList();
                        vm.centerDialogVisible = false
                    })
                    .catch(function (error) {
                        vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                        console.log(error);
                    });
                console.log(parms)

            },
            handleCheckAllChange(data) {
                //console.log(data)
                data.checkedFields = data.checkAll ? data.fields : [];
                data.isIndeterminate = false;
            },
            removeServiceAuthorize: function (customerId, serviceId) {
                console.log(customerId)
                console.log(serviceId)
                let vm = this
                axios.delete(`/api/DcsCustomerServiceData/${customerId}/${serviceId}`)
                    .then(function (response) {
                        console.log(response.data);

                        if (response.data.isSuccess) {
                            vm.$message({ title: '成功', message: '已除成功删除!', type: 'success' })
                            vm.fetchList()
                            return
                        }
                        vm.$message({ title: '异常', message: response.data.message, type: 'error' })

                    })
                    .catch(function (error) {
                        vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                        console.log(error)
                    });
            },
            updateServiceAuthorize: function (data) {
                console.log(data)
                let vm=this
                var parms = {}
                parms.customerId = data.customerId
                let services=[]
                for (let i = 0; i < data.serviceinfos.length; i++) { 
                    let fields = data.serviceinfos[i]
                    let service = {}
                    service.serviceId = fields.serviceId
                    let fs=[]
                    for (let j = 0; j < fields.alreadyFields.length; j++) {
                        fs.push(fields.alreadyFields[j].fieldId)
                    }
                    service.FieldIds = fs
                    services.push(service)
                }
                parms.serviceInfos = services
                axios.post('/api/DcsCustomerServiceData/updatefield', parms)
                    .then(function (response) {
                        if (!response.data.isSuccess) {
                            vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                            return;
                        }
                        vm.$message({ title: '成功', message: response.data.message, type: 'success' })
                        vm.fetchList();                  
                    })
                    .catch(function (error) {
                        vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                        console.log(error);
                    });
            },
            cancelServiceAuthorize: function (data) {
            },
            fieldAdd: function (field,service,index) {
                console.log(field)
                console.log(service)
                service.alreadyFields.push(field)
                service.noryetfields.splice(index, 1)
            },
            fieldDel: function (field, service, index) {
                if (service.alreadyFields.length <= 1) { 
                    this.$message({ title: '异常', message: '最少要有一个授权字段!', type: 'error' })
                    return
                }
                service.noryetfields.push(field)        
                service.alreadyFields.splice(index, 1)
            },
            handleCheckedCitiesChange(data) {
                //console.log(data)
                let checkedCount = data.checkedFields.length;
                data.checkAll = checkedCount === data.fields.length;
                data.isIndeterminate = checkedCount > 0 && checkedCount < data.fields.length;
            }

        },
        mounted: function () {
            let vm = this
            vm.fetchList();
        }

    });
</script>