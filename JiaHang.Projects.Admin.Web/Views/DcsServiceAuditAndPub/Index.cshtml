
@{
    ViewData["Title"] = "Index";
}


<style>
    .v-modal {
        display: none;
    }

    #app {
        margin-top: 15px;
        padding: 15px;
        background-color: #fff;
    }
</style>
<div id="app">

    <el-form :inline="true" class="demo-form-inline">
        <el-form-item label="接口编号">
            <el-input placeholder="接口编号" v-model="searchNo"></el-input>
        </el-form-item>
        <el-form-item label="接口代码">
            <el-input placeholder="接口代码" v-model="searchCode"></el-input>
        </el-form-item>
        <el-form-item label="接口名称">
            <el-input placeholder="接口名称" v-model="searchName"></el-input>
        </el-form-item>
    </el-form>
    <el-form :inline="true" class="demo-form-inline">
        <el-form-item>
            <el-button type="primary" @@click="fetchList">查询</el-button>
        </el-form-item>
        <el-form-item>
            <el-button type="danger" @@click="batchDelete">批量删除</el-button>
        </el-form-item>
    </el-form>

    <el-table ref="multipleTable"
              :data="data"
              v-loading="loading"
              :border="true"
              tooltip-effect="dark"
              style="width: 100%"
              @@selection-change="handleSelectionChange">
        <el-table-column type="selection"
                         width="55">
        </el-table-column>
        <el-table-column label="接口编号"
                         prop="serviceNo">
        </el-table-column>
        <el-table-column label="接口代码"
                         prop="serviceCode"
                         width="170">
        </el-table-column>
        <el-table-column label="接口名"
                         prop="serviceName">
        </el-table-column>
        <el-table-column label="接口版本"
                         prop="serviceVersion">
        </el-table-column>
        <el-table-column label="接口技术类型"
                         prop="serviceTech">
        </el-table-column>
        <el-table-column label="接口业务类型"
                         prop="serviceType">
            <template slot-scope="scope">
                <p>{{scope.row.serviceType='SHARE'?'共享':'采集'}}</p>
            </template>
        </el-table-column>
        <el-table-column label="接口状态"
                         prop="serviceStatus">
            <template slot-scope="scope">
                <p>{{scope.row.serviceStatus=='Y'?'正常':'禁用'}}</p>
            </template>
        </el-table-column>
        <el-table-column label="审核状态"
                         prop="auditFlag">
            <template slot-scope="scope">
                <p v-if="scope.row.auditFlag===null">
                    未审核
                </p>
                <p v-else-if="scope.row.auditFlag===0">
                    未通过
                </p>
                <p v-else-if="scope.row.auditFlag===1">
                    通过
                </p>
            </template>
        </el-table-column>
        <el-table-column label="操作">

            <template slot-scope="scope">
                <el-button size="mini"
                           type="primary"
                           v-on:click="handleAudit(scope.$index,scope.row)">审核</el-button>
            </template>
        </el-table-column>
    </el-table>


    <el-pagination @@size-change="handleSizeChange"
                   @@current-change="handleCurrentChange"
                   :current-page="pageIndex"
                   :page-sizes="[10, 20, 30, 40]"
                   :page-size="pageIndex"
                   layout="total, sizes, prev, pager, next, jumper"
                   :total="total">
    </el-pagination>

</div>
<script>
    layui.use(['element', 'layer'], function () {
        var layer = layui.layer
        var form = layui.form;
        var $ = layui.$
    })
</script>
<script>

    new Vue({
        el: "#app",
        data: function () {
            return {
                data: [],
                loading: true,
                pageIndex: 1,
                pageSize: 10,
                total: 0,
                multipleSelection: [],//获取批量选择的数据
                searchNo: '',
                searchCode: '',
                searchName: '',

                form: {

                },
                formLabelWidth: '160px',
                dialogTitle: '',
                labelPosition: 'left',
                IsCreate: true,//是否新增
            }
        },
        methods: {
            fetchList: function () {
                let vm = this
                vm.loading = true;
                axios.get(`/api/DcsServiceAuditAndPubData/${vm.pageIndex}/${vm.pageSize}?serviceno=${vm.searchNo}&servicecode=${vm.searchCode}&servicename=${vm.searchName}`)
                    .then(function (response) {
                        vm.data = response.data.content.data;
                        vm.total = response.data.content.total;
                        vm.loading = false;
                    })
                    .catch(function (error) {
                        vm.loading = false;
                        console.log(error)
                    });
            
            },
            handleAudit: function (index, row) {

                let vm = this;
                //已审核过的不能再审核
                if (row.auditFlag === 1 || row.auditFlag === 0) {
                    this.$message.error('已审核接口不能再次审核!');
                    return false;
                }

                let url = "/api/DcsServiceAuditAndPubData/Audit";
                let method = "POST";
                let confirm_title = "接口名：【" + row.serviceName + "】";

                layer.confirm(confirm_title, {
                    btn: ['通过审核', '不通过审核', '取消'], btn3: function (index) {

                        layer.close(index);

                    }
                }, function (index) {
                    let model = {
                        ServiceId: row.serviceId,
                        AuditFlag: 1
                    };
                    axios({ url: url, method: method, data: model })
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                return;
                            }

                            vm.fetchList();
                            layer.msg(response.data.message);
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                }, function (index) {

                    let model = {
                        ServiceId: row.serviceId,
                        AuditFlag: 0
                    };
                    axios({ url: url, method: method, data: model })
                        .then(function (response) {
                            console.log(response);

                            if (!response.data.isSuccess) {
                                return;
                            }

                            vm.fetchList();
                            layer.msg(response.data.message);
                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                        });
                }
                );

            },
            handleSizeChange(val) {
                console.log(`每页 ${val} 条`);
                this.pageSize = val;
                this.fetchList();
            },
            handleCurrentChange(val) {
                this.pageIndex = val;
                this.fetchList();
            },
            toggleSelection(rows) {
                if (rows) {
                    rows.forEach(row => {
                        this.$refs.multipleTable.toggleRowSelection(row);
                    });
                } else {
                    this.$refs.multipleTable.clearSelection();
                }
            },
            handleSelectionChange(val) {
                this.multipleSelection = val;

            },
            batchDelete() {
                let batchdatas = this.multipleSelection;
                if (batchdatas.length == 0) {
                    return;
                }
                let ids = '';
                for (let i = 0; i < batchdatas.length; i++) {
                    ids += `&ids=${batchdatas[i].serviceGroupId}`;
                };
                ids = ids.substring(1, ids.length)
                let vm = this
                vm.$confirm(`此操作将删除${batchdatas.length}条接口分类信息, 是否继续?`, '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.delete('/api/DcsServiceGroupData/BatchDelete?' + ids)
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                return;
                            }
                            vm.$message({ title: '成功', message: '删除成功', type: 'success' })
                            vm.fetchList();
                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                            console.log(error);
                        });

                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
                console.log(this.multipleSelection);
            }
        },
        mounted: function () {
            let vm = this
            vm.fetchList();
        }

    });
</script>