
@{
    ViewData["Title"] = "DcsServiceInfo";
}

<style>
    .layui-select-title input {
        width: 194px;
    }

    .layui-form-pane .layui-form-select {
        width: 194px;
    }

    .v-modal {
        display: none;
    }

    #app {
        margin-top: 15px;
        padding: 15px;
        background-color: #fff;
    }
</style>
<div id="app">
    <el-form :inline="true" class="demo-form-inline">
        <div class="layui-row">
            <el-form-item label="接口编号">
                <el-input placeholder="接口编号" v-model="searchform.ServiceNo"></el-input>
            </el-form-item>
            <el-form-item label="接口代码">
                <el-input placeholder="接口代码" v-model="searchform.ServiceCode"></el-input>
            </el-form-item>
            <el-form-item label="接口名称">
                <el-input placeholder="接口名称" v-model="searchform.ServiceName"></el-input>
            </el-form-item>
        </div>
        <div class="layui-row">
            <el-form-item label="技术类型">
                <el-select v-model="searchform.ServiceTech" style="width:214px">
                    <el-option v-for="item in searchTechType"
                               v-key="item"
                               :label="item"
                               :value="item">

                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="业务类型">
                <el-select v-model="searchform.ServiceType" style="width:214px">
                    <el-option v-for="item in searchServiceType"
                               v-key="item.key"
                               :label="item.value"
                               :value="item.key">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="接口状态">
                <el-select v-model="searchform.ServiceStatus" style="width:214px">
                    <el-option v-for="item in searchServiceStatus"
                               v-key="item.key"
                               :label="item.value"
                               :value="item.key">

                    </el-option>
                </el-select>
            </el-form-item>
        </div>

    </el-form>
    <el-form :inline="true" class="demo-form-inline">
        <el-form-item>
            <el-button type="primary" @@click="fetchList">查询</el-button>
        </el-form-item>
        <el-form-item>
            <el-button type="primary" @@click="handleAdd">添加</el-button>
        </el-form-item>
        <el-form-item>
            <el-button type="danger" @@click="batchDelete">批量删除</el-button>
        </el-form-item>
    </el-form>

    <el-table ref="multipleTable"
              v-loading="loading"
              :data="data"
              :border="true"
              tooltip-effect="dark"
              style="width: 100%"
              @@selection-change="handleSelectionChange">
        <el-table-column type="selection"
                         width="55">
        </el-table-column>
        <el-table-column label="接口编号"
                         prop="service_No">
        </el-table-column>
        <el-table-column label="接口代码"
                         prop="service_Code">
        </el-table-column>
        <el-table-column label="接口名"
                         prop="service_Name">
        </el-table-column>
        <el-table-column label="接口版本"
                         prop="service_Version">
        </el-table-column>
        <el-table-column label="接口技术类型"
                         prop="service_Tech">
        </el-table-column>
        <el-table-column label="接口业务类型"
                         prop="service_Type">
            <template slot-scope="scope">
                <p>{{scope.row.service_Type=='SHARE'?'共享':'采集'}}</p>
            </template>
        </el-table-column>
        <el-table-column label="接口状态"
                         prop="service_Status">
            <template scope="scope">
                <p>{{scope.row.service_Status==='Y'?'正常':'禁用'}}</p>
            </template>
        </el-table-column>
        <el-table-column label="操作">

            <template slot-scope="scope">
                <el-button size="mini"
                           v-on:click="handleEdit(scope.$index, scope.row)">编辑</el-button>
                <el-button size="mini"
                           type="danger"
                           v-on:click="handleDelete(scope.$index, scope.row)">删除</el-button>
            </template>
        </el-table-column>
    </el-table>


    <el-pagination @@size-change="handleSizeChange"
                   @@current-change="handleCurrentChange"
                   :current-page="searchform.pageNum"
                   :page-sizes="[10, 20, 30, 40]"
                   :page-size="searchform.pageSize"
                   layout="total, sizes, prev, pager, next, jumper"
                   :total="total">
    </el-pagination>

    <el-dialog :title="dialogTitle"
               :visible.sync="centerDialogVisible"
               v-loading="dialoading"
               element-loading-text="正在加载数据..."
               element-loading-spinner="el-icon-loading"
               element-loading-background="rgba(0, 0, 0, 0.8)"
               width="60%"
               center>
        <el-form :label-position="labelPosition" :inline="true" class="demo-form-inline" :model="form" :rules="rules" ref="form">
            <template>
                <el-tabs v-model="activeName" @@tab-click="handleClick">
                    <el-tab-pane label="主要信息" name="maininfo">
                        <el-row>
                            <e-col>
                                <el-form-item label="接口代码" prop="serviceCode">
                                    <el-input v-model="form.serviceCode"></el-input>
                                </el-form-item>
                            </e-col>
                            <e-col>
                                <el-form-item label="接口名称" prop="serviceName">
                                    <el-input v-model="form.serviceName"></el-input>
                                </el-form-item>
                            </e-col>
                            <e-col>
                                <el-form-item label="接口编号" prop="serviceNo">
                                    <el-input v-model="form.serviceNo"></el-input>
                                </el-form-item>
                            </e-col>
                        </el-row>

                        <el-row>
                            <e-col style="margin-left:10.5px">
                                <el-form-item label="目录分类">
                                    <el-select v-model="form.serviceGroupId" style="width:214px">
                                        <el-option v-for="item in CatelogType"
                                                   :key="item.key"
                                                   :label="item.value"
                                                   :value="item.key"></el-option>
                                    </el-select>
                                </el-form-item>
                            </e-col>
                            <e-col>
                                <el-form-item label="接口版本" prop="serviceVersion">
                                    <el-input v-model="form.serviceVersion"></el-input>
                                </el-form-item>
                            </e-col>
                            <e-col style="margin-left:10px">
                                <el-form-item label="数据源" style="margin-left:14px">
                                    <el-select v-model="ChecksDataSource" style="width:214px" @@change="dataSourceChange">
                                        <el-option v-for="item in DataSource"
                                                   v-key="item.key"
                                                   :label="item.value"
                                                   :value="item.key">
                                        </el-option>
                                    </el-select>
                                </el-form-item>
                            </e-col>
                        </el-row>

                        <el-row>
                            <e-col style="margin-left:10.5px">
                                <el-form-item label="技术类型">
                                    <el-select v-model="ChecksTechType" style="width:214px">
                                        <el-option v-for="item in TechType"
                                                   v-key="item"
                                                   :label="item"
                                                   :value="item">
                                        </el-option>
                                    </el-select>
                                </el-form-item>
                            </e-col>
                            <e-col style="margin-left:10.5px">
                                <el-form-item label="业务类型">
                                    <el-select v-model="ChecksServiceType" style="width:214px" @@change="serviceTypeChange">
                                        <el-option v-for="item in ServiceType"
                                                   v-key="item.key"
                                                   :label="item.value"
                                                   :value="item.key">
                                        </el-option>
                                    </el-select>
                                </el-form-item>
                            </e-col>
                            <e-col style="margin-left:10.5px">
                                <el-form-item label="返回格式">
                                    <el-select v-model="ChecksServiceReturn" style="width:214px">
                                        <el-option v-for="item in ServiceReturn"
                                                   v-key="item"
                                                   :label="item"
                                                   :value="item">
                                        </el-option>
                                    </el-select>
                                </el-form-item>
                            </e-col>
                        </el-row>

                        <el-row>
                            <e-col style="margin-left:10.5px">
                                <el-form-item label="排序值" style="margin-left:14px">
                                    <el-input v-model="form.sortKey"></el-input>
                                </el-form-item>
                            </e-col>
                            <e-col>
                                <el-form-item label="状态" style="margin-left:20px">
                                    <el-switch v-model="form.serviceStatus"
                                               active-color="#13ce66"
                                               inactive-color="#e5e5e5"
                                               active-value="1"
                                               inactive-value="0">
                                    </el-switch>
                                </el-form-item>
                            </e-col>
                            <e-col>
                                <el-form-item label="是否分页" style="margin-left:20px">
                                    <el-switch v-model="form.dataPageFlag"
                                               active-color="#13ce66"
                                               inactive-color="#e5e5e5"
                                               active-value="1"
                                               inactive-value="0">
                                    </el-switch>
                                </el-form-item>
                            </e-col>
                            <e-col>
                                <el-form-item label="是否多条结果" style="margin-left:20px">
                                    <el-switch v-model="form.dataMultiFlag"
                                               active-color="#13ce66"
                                               inactive-color="#e5e5e5"
                                               active-value="1"
                                               inactive-value="0">
                                    </el-switch>
                                </el-form-item>
                            </e-col>
                        </el-row>

                        <el-row>
                            <el-label>接口说明</el-label>
                            <el-input type="textarea"
                                      :rows="2"
                                      placeholder="请输入内容"
                                      v-model="form.serviceDesc">
                            </el-input>
                        </el-row>
                    </el-tab-pane>


                    <el-tab-pane label="参数信息" name="paramsinfo">
                        <template>
                            <el-button @@click="addParamsLine">添加行数</el-button>
                            <el-table :data="paramsData"
                                      style="width: 100%">
                                @*不展示*@
                                <el-table-column v-if="keyshow" label="主键">
                                    <template slot-scope="scope">
                                        <el-input v-model="scope.row.paramId" placeholder="主键"></el-input>
                                    </template>
                                </el-table-column>

                                <el-table-column prop="paramCode" label="参数代码">
                                    <template slot-scope="scope">
                                        <el-input v-model="scope.row.paramCode" placeholder="参数代码"></el-input>
                                    </template>
                                </el-table-column>
                                <el-table-column prop="paramName" label="参数名称">
                                    <template slot-scope="scope">
                                        <el-input v-model="scope.row.paramName" placeholder="参数名称"></el-input>
                                    </template>
                                </el-table-column>
                                <el-table-column prop="paramTypeId" label="参数类型">
                                    <template slot-scope="scope">
                                        <el-select v-model="scope.row.paramTypeId" placeholder="参数类型">
                                            <el-option v-for="item in ParamsType"
                                                       v-value="item.key"
                                                       :label="item.value"
                                                       :value="item.key"></el-option>
                                        </el-select>
                                    </template>
                                </el-table-column>
                                <el-table-column prop="relaFieldId" label="关联字段ID">
                                    <template slot-scope="scope">
                                        <el-select v-model="scope.row.relaFieldId" placeholder="关联字段ID">
                                            <el-option v-for="item in RelaField"
                                                       v-value="item.key"
                                                       :label="item.value"
                                                       :value="item.key"></el-option>
                                        </el-select>
                                    </template>
                                </el-table-column>
                                <el-table-column prop="paramDesc" label="参数说明">
                                    <template slot-scope="scope">
                                        <el-input type="textarea" v-model="scope.row.paramDesc" placeholder="参数说明"></el-input>
                                    </template>
                                </el-table-column>
                                <el-table-column prop="paramNullable" label="可以为空">
                                    <template slot-scope="scope">
                                        <el-switch v-model="scope.row.paramNullable"
                                                   active-color="#13ce66"
                                                   inactive-color="#e5e5e5"
                                                   active-value=1
                                                   inactive-value=0>
                                        </el-switch>
                                    </template>
                                </el-table-column>
                                <el-table-column prop="timeStampFlag" label="是否时间戳参数">
                                    <template slot-scope="scope">
                                        <el-switch v-model="scope.row.timeStampFlag"
                                                   active-color="#13ce66"
                                                   inactive-color="#e5e5e5"
                                                   active-value=1
                                                   inactive-value=0>
                                        </el-switch>
                                    </template>
                                </el-table-column>
                                <el-table-column>
                                    <template slot-scope="scope">
                                        <el-button size="mini"
                                                   type="danger"
                                                   v-if="!scope.row.editing"
                                                   icon="el-icon-delete"
                                                   @@click="handleDeleteParams(scope.$index, scope.row)">
                                            删除
                                        </el-button>
                                    </template>
                                </el-table-column>
                            </el-table>
                        </template>
                    </el-tab-pane>


                    <el-tab-pane v-if="sharedisplay" label="共享返回字段信息" name="shareresultinfo">
                        <el-checkbox-group v-model="ChecksShareResult">
                            <el-checkbox v-for="item in ShareResult"
                                         v-value="item.key"
                                         :label="item.value"
                                         :key="item.key"
                                         v-model="item.checked">
                                {{item.value}}
                            </el-checkbox>
                        </el-checkbox-group>
                    </el-tab-pane>


                    <el-tab-pane v-if="collectdisplay" label="采集返回字段信息" name="collectresultinfo">
                        <template>
                            <el-button @@click="addCollectLine">添加行数</el-button>
                            <el-table :data="collectData"
                                      style="width: 100%">
                                <el-table-column prop="reFieldName" label="返回字段名称">
                                    <template slot-scope="scope">
                                        <el-input v-model="scope.row.reFieldName" placeholder="返回字段名称"></el-input>
                                    </template>
                                </el-table-column>
                                <el-table-column prop="toFieldId" label="写入字段ID">
                                    <template slot-scope="scope">
                                        <el-select v-model="scope.row.toFieldId" placeholder="写入字段ID">
                                            <el-option v-for="item in WriteToId"
                                                       v-value="item.key"
                                                       :label="item.value"
                                                       :value="item.key"></el-option>
                                        </el-select>
                                    </template>
                                </el-table-column>
                                <el-table-column prop="bookname" label="是否需要从维度表转换数据">
                                    <template slot-scope="scope">
                                        <el-switch v-model="scope.row.dimTransFlag"
                                                   active-color="#13ce66"
                                                   inactive-color="#e5e5e5"
                                                   active-value="1"
                                                   inactive-value="0">
                                        </el-switch>
                                    </template>
                                </el-table-column>
                                <el-table-column>
                                    <template slot-scope="scope">
                                        <el-button size="mini"
                                                   type="danger"
                                                   v-if="!scope.row.editing"
                                                   icon="el-icon-delete"
                                                   @@click="handleDeleteParams(scope.$index, scope.row)">
                                            删除
                                        </el-button>
                                    </template>
                                </el-table-column>
                            </el-table>
                        </template>
                    </el-tab-pane>
                </el-tabs>
            </template>
        </el-form>
        <div slot="footer" class="dialog-footer">
            <el-button v-on:click="centerDialogVisible = false">取 消</el-button>
            <el-button type="primary" v-on:click="dialogSave('form')">确 定</el-button>
        </div>
    </el-dialog>
</div>
<script>
    layui.use(['element', 'layer'], function () {
        var layer = layui.layer
        var form = layui.form;
        var $ = layui.$
    })
</script>
<script>

    new Vue({
        el: "#app",
        data: function () {
            return {
                loading: true,//数据加载样式
                dialoading: false,
                data: [],
                paramsData: [{
                    paramId: '',
                    serviceId: '',
                    paramCode: '',
                    paramName: '',
                    paramTypeId: '',
                    paramDesc: '',
                    paramNullable: '',
                    timeStampFlag: '',
                    relaFieldId: ''
                }],
                collectData: [{
                    reFieldName: '',
                    toFieldId: '',
                    dimTransFlag: ''
                }],
                activeName: 'maininfo',
                sharedisplay: true,
                collectdisplay: true,
                keyshow: false,//主键  这里不展示，仅存放数据使用

                searchNo: '',
                searchCode: '',
                searchName: '',
                searchChecksTechType: [],
                searchTechType: ['WEBSERVICE', 'API'],
                searchChecksServiceType: [],
                searchServiceType: [{ key: 'SHARE', value: '共享' }, { key: 'COLLECT', value: '采集' }],
                searchChecksServiceStatus: [],
                searchServiceStatus: [{ key: 'Y', value: '正常' }, { key: 'N', value: '禁用' }],

                ChecksCatelogType: [], //选中的目录分类
                CatelogType: ['1', '2', '3'], //目录分类

                ChecksDataSource: '', //选中的数据源
                DataSource: [], //数据源

                ChecksTechType: [], //选中的技术类型
                TechType: ['WebService', 'API'], //技术类型

                ChecksServiceType: '', //选中的业务类型
                ServiceType: [{ key: 'SHARE', value: '共享' }, { key: 'COLLECT', value: '采集' }], //业务类型

                ChecksServiceReturn: '', //选中的返回格式
                ServiceReturn: ['XML', 'JSON'], //返回格式

                ChecksServiceStatus: '',//选中的接口状态

                ParamsType: [],//参数类型(参数信息)

                RelaField: [],//关联字段Id(参数信息)

                ChecksShareResult: [],//选中的共享返回参数信息
                ShareResult: [],//共享返回参数信息
                ShareResultClone: [],//共享返回参数信息

                //ChecksWriteToId: [],//选中的采集写入字段Id
                WriteToId: [],//采集写入字段Id

                relateData: [],
                centerDialogVisible: false,

                total: 0,
                multipleSelection: [],//获取批量选择的数据

                pageNum: 1,
                pageSize: 10,
                form: {
                    serviceNo: '',
                    serviceCode: '',
                    serviceGroupId: '',
                    serviceName: '',
                    serviceStatus: '',
                    serviceVersion: '',
                    dataPageFlag: '',//是否分页
                    dataMultiFlag: '',//是否多条结果
                    serviceDesc: '',//接口说明
                    sortKey: '',//排序值
                    lsparam: [],
                    lsshare: [],
                    lscollect: []
                },
                searchform: {
                    pageNum: 1,
                    pageSize: 10,
                    ServiceNo: '',
                    ServiceCode: '',
                    ServiceName: '',
                    ServiceTech: '',
                    ServiceType: '',
                    ServiceStatus: ''
                },
                rules: {
                    serviceCode: [
                        { required: true, message: '接口代码不能为空', trigger: 'blur' },
                        { min: 2, max: 25, message: '长度在 2 到 25 个字符', trigger: 'blur' }
                    ],
                    serviceName: [
                        { required: true, message: '接口名称不能为空', trigger: 'blur' },
                        { min: 2, max: 25, message: '长度在 2 到 25 个字符', trigger: 'blur' }
                    ],
                    serviceNo: [
                        { required: true, message: '接口编号不能为空', trigger: 'blur' },
                        { min: 2, max: 25, message: '长度在 2 到 25 个字符', trigger: 'blur' }
                    ],
                    serviceVersion: [
                        { required: true, message: '接口版本不能为空', trigger: 'blur' },
                        { min: 1, max: 10, message: '长度在 1 到 10 个字符', trigger: 'blur' }
                    ]
                },
                formLabelWidth: '160px',
                dialogTitle: '',
                labelPosition: 'left',
                IsCreate: true,//是否新增
            }
        },
        methods: {
            fetchList: function () {
                let vm = this;
                vm.loading = true
                axios({ url: `/api/dcsserviceinfodata/search1/`, async: false, method: 'post', data: vm.searchform })
                    .then(function (response) {
                        vm.data = response.data.content.data;
                        vm.total = response.data.content.total;
                        vm.loading = false;
                    })
                    .catch(function (error) {
                        console.log(error);
                        vm.loading = false;
                    });
            },

            //相关select框值多次使用，建议首次加载的时候写入到缓存，以免每次需要重新访问数据库
            fetchData: function () {
                let vm = this;


                //目录分类和数据源selects框
                $.ajax({
                    url: '/api/DcsServiceInfoData/GetCatelogAndDataSource',
                    type: 'get', //GET
                    async: false,    //或false,是否异步
                    timeout: 5000,    //超时时间
                    beforeSend: function () {
                        //vm.dialoading = true;//开启加载效果
                    },
                    success: function (response) {
                        vm.CatelogType = response.content.servicegroup;
                        vm.DataSource = response.content.datasource;

                    },
                    error: function (error) {
                        //vm.$notify({ title: '异常', message: error, type: 'error' });
                        vm.dialoading = false;//开启加载效果
                    },
                    complete: function () {
                        //vm.dialoading = false;//开启加载效果
                    }
                })

                //参数信息内的参数类型、关联字段Id
                axios({ url: '/api/DcsServiceInfoData/GetParamsTypeAndRelaField', method: 'get', async: false })
                    .then(function (response) {

                        vm.ParamsType = response.data.content.paramstype;
                        vm.RelaField = response.data.content.relafield;
                    })
                    .catch(function (error) {
                        vm.$notify({ title: '异常', message: error, type: 'error' });
                    })
            },

            handleClick: function (tab, event) {
                console.log(tab, event);
            },

            dataSourceChange: function () {
                //数据源点击事件  初始化共享的checkbox和采集的select
                let vm = this;
                let datasource = vm.ChecksDataSource;

                $.ajax({
                    url: `/api/DcsServiceInfoData/${datasource}`,
                    type: 'get',
                    async: false,
                    success: function (response) {

                        vm.ShareResult = response;//采集返回字段信息
                        vm.WriteToId = response;//共享返回字段信息
                    },
                    error: function () {
                        vm.$notify({ title: '异常', message: error, type: 'error' });
                    },
                    complete: function () { }
                })
            },

            serviceTypeChange: function () {
                //业务类型改变时

                let vm = this;
                vm.sharedisplay = true;
                vm.collectdisplay = true;
                switch (vm.ChecksServiceType) {
                    case "SHARE":
                        vm.collectdisplay = false;
                        break;
                    case "COLLECT":
                        vm.sharedisplay = false;
                        break;
                    default:
                        break;
                }
            },

            handleDeleteParams: function (index) {
                let vm = this;
                //移除
                vm.paramsData.splice(index, 1);

            },

            addParamsLine: function () {
                let vm = this;
                let newParam = {
                    paramId: '',
                    serviceId: '',
                    paramCode: '',
                    paramName: '',
                    paramTypeId: '',
                    paramDesc: '',
                    paramNullable: '',
                    timeStampFlag: '',
                    relaFieldId: ''
                };
                //添加新的行数
                vm.paramsData.push(newParam);
            },

            addCollectLine: function () {
                let vm = this;
                var newCollect = {
                    reFieldName: '',
                    toFieldId: '',
                    dimTransFlag: ''
                };
                //添加新的行数
                vm.collectData.push(newCollect);
            },

            handleEdit: function (index, row) {
                //编辑
                let vm = this;
                vm.dialogTitle = "编辑接口基本信息"
                vm.centerDialogVisible = true
                //vm.dialoading = true;
                let rowstr = JSON.stringify(row)
                let formdata = JSON.parse(rowstr)
                vm.IsCreate = false

                //拿到所有数据
                axios({ url: `/api/dcsserviceinfodata/getserviceinfoview?serviceid=${formdata.service_Id}`, method: 'get', async: false })
                    .then(function (response) {

                        //接口返回有数据
                        if (response && response.data.content != null) {
                            //需要重新组建select块的key-value给其赋值

                            var result = response.data.content;
                            //共享还是采集
                            vm.sharedisplay = true;
                            vm.collectdisplay = true;

                            //主要信息及共享返回字段部分直接赋值
                            //参数信息及采集返回字段部分需要通过push对象方式赋值
                            var pars = response.data.content.params;
                            jQuery.each(pars, function (index, item) {
                                item.paramNullable = item.paramNullable.toString();
                                item.timeStampFlag = item.timestampFlag.toString();
                            })

                            vm.paramsData = pars;
                            vm.ChecksDataSource = result.serviceInfo.datasourceId;
                            vm.dataSourceChange();

                            //目录分类
                            vm.ChecksCatelogType = result.serviceInfo.serviceGroupId;
                            //技术类型、业务类型、返回格式

                            vm.ChecksTechType = result.serviceInfo.serviceTech;
                            vm.ChecksServiceType = result.serviceInfo.serviceType;
                            vm.ChecksServiceReturn = result.serviceInfo.serviceReturn;
                            vm.ChecksShareResult = [];//清空已经选择数据重新赋值
                            switch (result.serviceInfo.serviceType) {
                                case "SHARE":
                                    vm.collectdisplay = false;

                                    //赋值ChecksShareResult
                                    vm.ShareResult.find(function (item) {
                                        for (var i = 0; i < result.shareResult.length; i++) {
                                            if (item.key === result.shareResult[i].fieldId) {
                                                vm.ChecksShareResult.push(item.value);
                                            }
                                        }
                                    })
                                    break;
                                case "COLLECT":
                                    vm.sharedisplay = false;
                                    vm.collectData = result.collectResult;//直接赋值
                                    break;
                                default:
                                    break
                            }
                            result.serviceInfo.dataMultiFlag = result.serviceInfo.dataMultiFlag.toString();
                            result.serviceInfo.dataPageFlag = result.serviceInfo.dataPageFlag.toString();
                            result.serviceInfo.serviceStatus = result.serviceInfo.serviceStatus == 'Y' ? '1' : '0';
                            vm.form = result.serviceInfo;
                            console.log(vm.paramsData);
                            console.log(result.serviceInfo);
                        }
                    })
                    .catch(function (error) {
                        vm.$notify({ title: '异常', message: error, type: 'error' });
                    });
            },
            handleDelete: function (index, row) {
                let vm = this
                //删除

                this.$confirm('此操作将删除该接口信息, 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.delete('/api/DcsServiceInfoData/' + row.serviceId)
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                return;
                            }
                            vm.$message({ title: '成功', message: '删除成功', type: 'success' })
                            vm.fetchList();
                            vm.centerDialogVisible = false
                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                            console.log(error);
                        });
                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
            },
            handleAdd: function () {
                let vm = this;

                vm.IsCreate = true;
                vm.resetForm();
                vm.dialogTitle = "添加接口基本信息";
                vm.centerDialogVisible = true;

                //添加
            },
            dialogCancel: function () {
                let vm = this;

                vm.centerDialogVisible = false
            },
            dialogSave: function (formName) {
                let vm = this;
                vm.$refs[formName].validate((valid) => {
                    if (valid) {
                        let url = "/api/DcsServiceInfoData";
                        let method = "POST";
                        if (vm.IsCreate != true) {
                            url = `/api/DcsServiceInfoData/${vm.form.serviceId}`;
                            method = "PUT";
                        }
                        var formdata = vm.form;
                        //vm.ChecksShareResult需要从vm.shareResult里先出数据拿到主键

                        let ls_sharereslt = [];
                        vm.ShareResult.find(function (item) {
                            for (var i = 0; i < vm.ChecksShareResult.length; i++) {
                                if (item.value === vm.ChecksShareResult[i]) {
                                    var obj = new Object();
                                    obj.fieldid = item.key;
                                    ls_sharereslt.push(obj);
                                }
                            }
                        })

                        let model = {
                            servicegroupid: formdata.serviceGroupId,
                            serviceno: formdata.serviceNo,
                            servicecode: formdata.serviceCode,
                            servicename: formdata.serviceName,
                            servicedesc: formdata.serviceDesc,
                            serviceversion: formdata.serviceVersion,
                            servicetech: vm.ChecksTechType,
                            servicetype: vm.ChecksServiceType,
                            servicereturn: vm.ChecksServiceReturn,
                            servicestatus: formdata.serviceStatus == '1' ? 'Y' : 'N',
                            datapageflag: formdata.dataPageFlag,
                            datamultiflag: formdata.dataMultiFlag,
                            datasourceid: vm.ChecksDataSource,
                            sortkey: formdata.sortKey,
                            lsparam: vm.paramsData,
                            lsshare: ls_sharereslt,
                            lscollect: vm.collectData
                        };

                        axios({ url: url, method: method, data: model })
                            .then(function (response) {
                                if (!response.data.isSuccess) {
                                    vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                    return;
                                }
                                vm.$message({ title: '成功', message: response.data.message, type: 'success' })
                                vm.fetchList();
                                vm.centerDialogVisible = false
                            })
                            .catch(function (error) {
                                vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                                console.log(error);
                            });
                    } else {
                        console.log('error submit!!');
                        return;
                    }
                });
            },
            resetForm() {
                let vm = this;
                //主要信息
                vm.form.serviceCode = '';
                vm.form.serviceName = '';
                vm.form.serviceNo = '';
                vm.form.serviceGroupId='',
                vm.ChecksCatelogType = [];
                vm.form.serviceVersion = '';
                vm.ChecksDataSource = [];
                vm.ChecksTechType = [];
                vm.ChecksServiceType = [];
                vm.ChecksServiceReturn = [];
                vm.form.sortKey = '';
                vm.form.serviceStatus = '';
                vm.form.dataPageFlag = '';
                vm.form.dataMultiFlag = '';
                vm.form.serviceDesc = '';

                //参数信息
                vm.paramsData = [
                    {
                        paramId: '',
                        serviceId: '',
                        paramCode: '',
                        paramName: '',
                        paramTypeId: '',
                        paramDesc: '',
                        paramNullable: '',
                        timeStampFlag: '',
                        relaFieldId: ''
                    }
                ];
                //采集返回
                vm.collectData = [
                    {
                        reFieldName: '',
                        toFieldId: '',
                        dimTransFlag: ''
                    }
                ];
                //共享返回
                vm.ShareResult = [];
                //共享返回选中
                vm.ChecksShareResult = [];
            },
            handleSizeChange(val) {
                console.log(`每页 ${val} 条`);
                this.searchform.pageSize = val;
                this.fetchList();
            },
            handleCurrentChange(val) {
                this.searchform.pageNum = val;
                this.fetchList();
            },
            toggleSelection(rows) {
                if (rows) {
                    rows.forEach(row => {
                        this.$refs.multipleTable.toggleRowSelection(row);
                    });
                } else {
                    this.$refs.multipleTable.clearSelection();
                }
            },
            handleSelectionChange(val) {
                this.multipleSelection = val;

            },
            batchDelete() {
                let batchdatas = this.multipleSelection;
                if (batchdatas.length == 0) {
                    return;
                }
                let ids = '';
                for (let i = 0; i < batchdatas.length; i++) {
                    ids += `&ids=${batchdatas[i].serviceGroupId}`;
                };
                ids = ids.substring(1, ids.length)
                let vm = this
                vm.$confirm(`此操作将删除${batchdatas.length}条接口信息, 是否继续?`, '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.delete('/api/DcsServiceInfoData/BatchDelete?' + ids)
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                return;
                            }
                            vm.$message({ title: '成功', message: '删除成功', type: 'success' })
                            vm.fetchList();
                            vm.centerDialogVisible = false
                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                            console.log(error);
                        });

                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
                console.log(this.multipleSelection);
            }
        },
        mounted: function () {
            let vm = this
            vm.fetchList();
            vm.fetchData();
        }
    });
</script>