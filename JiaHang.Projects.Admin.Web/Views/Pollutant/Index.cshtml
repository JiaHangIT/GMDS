
@{
    ViewData["Title"] = "企业污染物排放";
}

<style>
    tr {
        margin-right: 5px
    }

    .layui-select-title input {
        width: 194px;
    }

    .layui-form-pane .layui-form-select {
        width: 194px;
    }

    .v-modal {
        display: block;
    }

    #app {
        margin-top: 15px;
        padding: 15px;
        background-color: #fff;
    }

    td {
        padding:10px;
        text-align:center;
    }
</style>
<div id="app">
    <div id="func">
        <el-form :inline="true" class="demo-form-inline">
            <div class="layui-row">
                <el-form-item label="企业名称">
                    <el-input placeholder="请输入企业名称" v-model="orgname"></el-input>
                </el-form-item>
                <el-form-item label="企业信用代码">
                    <el-input placeholder="请输入企业信用代码" v-model="orgcode"></el-input>
                </el-form-item>
                <el-form-item label="年份">
                    <el-date-picker v-model="orgyear"
                                    type="year"
                                    format="yyyy"
                                    placeholder="选择年">
                    </el-date-picker>
                </el-form-item>
            </div>

        </el-form>
        <el-form :inline="true" class="demo-form-inline">
            <el-form-item>
                <el-button type="primary" @@click="querydata">查询</el-button>
            </el-form-item>
            <el-form-item>
                <el-button type="primary" @@click="exportdata">导出</el-button>
            </el-form-item>
            <el-form-item>
                <el-button type="primary" @@click="()=>{ this.showbutton = true}">导入</el-button>
            </el-form-item>
            <el-form-item>
                <el-button type="danger" @@click="batchDelete">选中行删除</el-button>
            </el-form-item>
        </el-form>
    </div>
    

    <template>
        <el-table :data="data"
                  border
                  style="width: 100%"
                  :height="tableheight"
                  v-loading="loading"
                  @@selection-change="handleSelectionChange">
            <el-table-column type="selection"
                             width="55">
            </el-table-column>
            <el-table-column fixed
                             prop="orgName"
                             label="企业名称"
                             width="150">
            </el-table-column>
            <el-table-column prop="periodYear"
                             label="年份"
                             width="120">
            </el-table-column>
            <el-table-column prop="town"
                             label="所属镇街"
                             width="120">
            </el-table-column>
            <el-table-column prop="orgCode"
                             label="统一社会信用代码"
                             width="150">
            </el-table-column>
            <el-table-column prop="registrationType"
                             label="登记注册类型"
                             width="120">
            </el-table-column>
            <el-table-column prop="address"
                             label="住所"
                             width="200">
            </el-table-column>
            <el-table-column prop="isInSystem"
                             label="是否纳入环统范围"
                             width="150">
            </el-table-column>

            <el-table-column prop="oxygen"
                             label="化学需氧量排放当量（吨）"
                             width="150">
            </el-table-column>
            <el-table-column prop="ammoniaNitrogen"
                             label="氨氮排放当量（吨）"
                             width="120">
            </el-table-column>
            <el-table-column prop="sulfurDioxide"
                             label="二氧化硫排放当量（吨）"
                             width="150">
            </el-table-column>
            <el-table-column prop="nitrogenOxide"
                             label="氮氧化物排放当量（吨）"
                             width="150">
            </el-table-column>
            <el-table-column prop="coal"
                             label="煤炭（吨）"
                             width="120">
            </el-table-column>
            <el-table-column prop="fuelOil"
                             label="燃料油（吨）"
                             width="120">
            </el-table-column>
            <el-table-column prop="hydrogen"
                             label="天然气（万立方米）"
                             width="120">
            </el-table-column>
            <el-table-column prop="firewood"
                             label="薪柴"
                             width="120">
            </el-table-column>
            <el-table-column prop="remark"
                             label="备注"
                             width="120">
            </el-table-column>
            <el-table-column prop="creationDate"
                             label="创建时间"
                             width="180">
                <template slot-scope="scope">
                    <span>
                        {{format(scope.row.creationDate)}}
                    </span>
                </template>
            </el-table-column>
            <el-table-column fixed="right"
                             label="操作"
                             width="150">
                <template slot-scope="scope">
                    <el-button size="mini"
                               v-on:click="handleEdit(scope.$index, scope.row)">编辑</el-button>

                    <el-button size="mini"
                               type="danger"
                               v-on:click="handleDelete(scope.$index, scope.row)">删除</el-button>
                </template>
            </el-table-column>
        </el-table>
    </template>

    <div id="pagination">
        <el-pagination @@size-change="handleSizeChange"
                       @@current-change="handleCurrentChange"
                       :current-page="currentPage"
                       :page-sizes="[10, 20, 30, 40]"
                       :page-size="pageSize"
                       layout="total, sizes, prev, pager, next, jumper"
                       :total="total">
        </el-pagination>
    </div>

    <el-dialog :title="dialogTitle"
               :visible.sync="centerDialogVisible"
               width="40%"
               :modal-append-to-body="false"
               center>

        <el-form :inline="true" :model="form" class="demo-form-inline" ref="form">
            <div class="layui-form-item">
                <div class="layui-inline">
                    <label class="layui-form-label">是否纳入环统范围</label>
                    <div class="layui-input-block">
                        <el-select v-model="form.isInSystem" placeholder="请选择">
                            <el-option v-for="item in options"
                                       :key="item"
                                       :label="item"
                                       :value="item">
                            </el-option>
                        </el-select>
                    </div>

                </div>
                <div class="layui-inline">
                    <label class="layui-form-label">化学需氧量排放当量(吨)</label>
                    <div class="layui-input-block">
                        <el-input placeholder="请输入" v-model="form.oxygen"></el-input>
                    </div>
                </div>
            </div>
            <div class="layui-form-item">
                <div class="layui-inline">
                    <label class="layui-form-label">氨氮排放当量(吨)</label>
                    <div class="layui-input-block">
                        <el-input placeholder="请输入" v-model="form.ammoniaNitrogen"></el-input>
                    </div>

                </div>
                <div class="layui-inline">
                    <label class="layui-form-label">二氧化硫排放当量(吨)</label>
                    <div class="layui-input-block">
                        <el-input placeholder="请输入" v-model="form.sulfurDioxide"></el-input>
                    </div>

                </div>
            </div>
            <div class="layui-form-item">
                <div class="layui-inline">
                    <label class="layui-form-label">氮氧化物排放当量(吨)</label>
                    <div class="layui-input-block">
                        <el-input placeholder="请输入" v-model="form.nitrogenOxide"></el-input>
                    </div>

                </div>
                <div class="layui-inline">
                    <label class="layui-form-label">煤炭(吨)</label>
                    <div class="layui-input-block">
                        <el-input placeholder="请输入" v-model="form.coal"></el-input>
                    </div>

                </div>
            </div>
            <div class="layui-form-item">
                <div class="layui-inline">
                    <label class="layui-form-label">燃料油(吨)</label>
                    <div class="layui-input-block">
                        <el-input placeholder="请输入" v-model="form.fuelOil"></el-input>
                    </div>

                </div>
                <div class="layui-inline">
                    <label class="layui-form-label">天燃气(万立方米)</label>
                    <div class="layui-input-block">
                        <el-input placeholder="请输入" v-model="form.hydrogen"></el-input>
                    </div>

                </div>
            </div>
            <div class="layui-form-item">
                <div class="layui-inline">
                    <label class="layui-form-label">薪柴</label>
                    <div class="layui-input-block">
                        <el-input placeholder="请输入" v-model="form.firewood"></el-input>
                    </div>

                </div>
                <div class="layui-inline">
                    <label class="layui-form-label">备注</label>
                    <div class="layui-input-block">
                        <el-input placeholder="请输入" v-model="form.remark"></el-input>
                    </div>

                </div>
            </div>


        </el-form>
        <div slot="footer" class="dialog-footer">
            <el-button v-on:click=" ()=>{this.centerDialogVisible = false}">取 消</el-button>
            <el-button type="primary" v-on:click="dialogSave('form')">确 定</el-button>
        </div>
    </el-dialog>


    <el-dialog :title="buttontxt"
               :visible.sync="showbutton"
               width="20%"
               :modal-append-to-body="false"
               center>
        <el-form>
            <el-form-item>
                <el-button type="primary" @@click="downtemplate">下载模板</el-button>
            </el-form-item>
            <el-form-item label="请选择导入年份">
                <el-date-picker v-model="exportyear"
                                type="year"
                                format="yyyy"
                                placeholder="选择年">
                </el-date-picker>
            </el-form-item>
            <el-form-item>
                <el-upload class="upload-demo"
                           action="/api/pollutant/upload"
                           :before-upload="beforeUpload"
                           :on-success="uploadSuccess"
                           :on-error="uploadError"
                           :data="model"
                           :show-file-list="false">
                    <el-button size="small" type="primary">点击上传</el-button>
                </el-upload>
            </el-form-item>
        </el-form>
          
    </el-dialog>
</div>


<script>
    layui.use(['element', 'layer'], function () {
        var layer = layui.layer
        var form = layui.form;
        var $ = layui.$
    })
</script>

<script>
    new Vue({
        el: '#app',
        data() {
            return {
                multipleSelection: [],//存放多选内容
                tableheight: null,
                labelPosition:'right',
                buttontxt: '',
                showbutton: false,
                formInline: {
                    user: '',
                    region: ''
                },
                centerDialogVisible: false,
                loading: false,
                dialogTitle: '',
                data: [],
                total: 0,
                pageSize: 10,
                currentPage: 1,
                value: '',
                exportyear: '',
                orgyear:'',
                orgcode: '',
                orgname: '',
                model: { year: '' },
                options: ['是', '否'],
                form: {
                    address: '',
                    ammoniaNitrogen: '',
                    coal: '',
                    firewood: '',
                    fuelOil: '',
                    hydrogen: '',
                    isInSystem: '',
                    nitrogenOxide: '',
                    orgCode: '',
                    orgName: '',
                    oxygen: '',
                    periodYear: '',
                    recordId: '',
                    registrationType: '',
                    remark: '',
                    sulfurDioxide: '',
                    town: '',
                }
            }
        },
        methods: {
            format(val) {
                if (val) {
                    let date = new Date(val)
                    return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`
                    console.log(date)

                }

            },
            fetchlist() {
                let vm = this;
                vm.loading = true

                var top = $("#app").offset().top;
                var func = $("#func").get(0).offsetHeight
                var pagination = $("#pagination").get(0).offsetHeight
                //自适应表高度
                var height = Math.max(0, document.documentElement.clientHeight) - top - 1 - func - pagination;
                vm.tableheight = height
                let y = ''
                if (vm.orgyear != '' && vm.orgyear != null) {
                    y = vm.orgyear.getFullYear()
                }
                axios({ url: `/api/pollutant/getlistpagination`, method: 'post', data: { orgname: vm.orgname, orgcode: vm.orgcode, limit: vm.pageSize, page: vm.currentPage, year: y } }).then(res => {
                    vm.data = res.data.content.data

                    vm.total = res.data.content.total
                    console.log(res.data.content.data)
                    vm.loading = false
                }).catch(err => { console.log(err); vm.loading = false })
                console.log(111)
            },
            querydata() {
                let vm = this
                vm.fetchlist()
            },
            openUploadLoading(val) {
                const loading = this.$loading({
                    lock: true,
                    text: '请稍候，正在导入...',
                    spinner: 'el-icon-loading',
                    background: 'rgba(0, 0, 0, 0.7)'
                });
                switch (val) {
                    case 'before':
                        break;
                    case 'after':
                        loading.close();
                        break;
                    default:
                }
            },
            beforeUpload() {
                let vm = this
                try {

                    vm.model.year = vm.exportyear.getFullYear()
                    vm.openUploadLoading('before')
                    if (vm.model.year === '') {
                        vm.$message.error('请先选择年份!');
                        return false
                    }
                } catch (e) {
                    vm.$message.error('请先选择年份!');
                    return false
                }
            },
            uploadSuccess(response, file, fileList) {
                let vm = this
                vm.showbutton = false
                vm.openUploadLoading('after')
                if (response.isSuccess == true) {
                    vm.$message.success(response.message);
                } else {
                    vm.$message.error(response.message);
                }
                vm.fetchlist()
                console.log(response);
            },
            uploadError(err, file, fileList) {
                let vm = this
                vm.showbutton = false
                vm.$message.error('操作失败！' + err);
                console.log(err)
            },
            exportdata() {
                //window.location.href = '/api/pollutant/export'
                let vm = this
                let y = ''
                if (vm.orgyear != '' && vm.orgyear != null) {
                    y = vm.orgyear.getFullYear()
                }
                let post = {
                    pagesize: vm.pageSize,
                    pagenum: vm.currentPage,
                    orgname: vm.orgname,
                    orgcode: vm.orgcode,
                    year: y
                };
                window.location.href = `/api/pollutant/export?` + $.param(post)
            },
            downtemplate() {
                window.location.href = `/api/pollutant/downtemplate`
            },
            handleEdit(index, row) {
                let vm = this

                let str = JSON.stringify(row)
                vm.form = JSON.parse(str)

                vm.dialogTitle = "编辑信息"
                vm.centerDialogVisible = true
                console.log(row)
            },
            dialogSave(formName) {
                let vm = this
                vm.$refs[formName].validate((valid) => {
                    if (valid) {
                        let url = `/api/pollutant/update/${vm.form.recordId}`
                        let method = `put`
                        
                        axios({
                            url: url, method: method, data: {
                                AmmoniaNitrogen: vm.form.ammoniaNitrogen,
                                Coal: vm.form.coal,
                                Firewood: vm.form.firewood,
                                FuelOil: vm.form.fuelOil,
                                Hydrogen: vm.form.hydrogen,
                                IsInSystem: vm.form.isInSystem,
                                NitrogenOxide: vm.form.nitrogenOxide,
                                Oxygen: vm.form.oxygen,
                                SulfurDioxide: vm.form.sulfurDioxide,
                                Remark: vm.form.remark
                            }
                        })
                            .then(res => {
                                if (res.data.isSuccess == true) {
                                    vm.$message.success(res.data.message)
                                    console.log(111)
                                } else {
                                    vm.$message.error(res.data.message)
                                }
                                vm.fetchlist()
                                vm.centerDialogVisible = false
                                console.log(res)
                            })
                            .catch(err => {
                                vm.$message.error('意料之外的错误!')
                                console.log(err)
                            })
                    } else {
                        vm.$message.error('error')
                        console.log('error');
                    }
                })
            },
            handleDelete(index, row) {
                let vm = this

                vm.$confirm('此操作将永久删除该数据, 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    let url = `/api/pollutant/delete/${row.recordId}`
                    let method = 'get'
                    axios({ url: url, method: method })
                        .then(res => {
                            if (res.data.isSuccess === true) {
                                vm.$message.success('操作成功！');
                                vm.fetchlist();
                            }
                            console.log(res)
                        })
                        .catch(error => {
                            vm.$message.error('操作失败，意外的原因！');
                            console.log(error)
                        })
                }).catch(() => {
                    vm.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
            },
            batchDelete() {
                let vm = this;
                let batchdatas = this.multipleSelection;
                if (batchdatas.length == 0) {
                    vm.$message("请先选中数据再进行操作！");
                    return;
                }
                let ids = '';
                for (let i = 0; i < batchdatas.length; i++) {
                    ids += `&ids=${batchdatas[i].recordId}`;
                };
                ids = ids.substring(1, ids.length)
                console.log(ids);
                vm.$confirm(`此操作将删除${batchdatas.length}条污染物信息, 是否继续?`, '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.delete('/api/pollutant/batchdelete?' + ids)
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                return;
                            }
                            vm.$message({ title: '成功', message: '删除成功', type: 'success' })
                            vm.fetchlist();
                            vm.centerDialogVisible = false
                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                            console.log(error);
                        });

                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
            },
            handleSizeChange(val) {
                let vm = this
                vm.pageSize = val
                vm.loading = true
                vm.fetchlist()
                console.log(`每页 ${val} 条`);
            },
            handleCurrentChange(val) {
                let vm = this
                vm.currentPage = val
                vm.loading = true
                vm.fetchlist()
                console.log(`当前页: ${val}`);
            },
            handleSelectionChange(val) {
                this.multipleSelection = val;

            }
        },
        mounted() {
            let vm = this
            vm.loading = true
            vm.fetchlist()
        }
    })
</script>