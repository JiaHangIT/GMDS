
@{
    ViewData["Title"] = "数据展示";
}
<style>
    .layui-select-title input {
        width: 194px;
    }

    .layui-form-pane .layui-form-select {
        width: 194px;
    }

    .v-modal {
        display: block;
    }

    #app {
        margin-top: 15px;
        padding: 15px;
        background-color: #fff;
    }
</style>

<div id="app">
    <div id="func">
        <el-form :inline="true" class="demo-form-inline">
            <div class="layui-row">
                <el-form-item label="企业名称">
                    <el-input placeholder="请输入企业名称" v-model="orgname"></el-input>
                </el-form-item>
                <el-form-item label="企业信用代码">
                    <el-input placeholder="请输入企业信用代码" v-model="orgcode"></el-input>
                </el-form-item>
                <el-form-item label="年份">
                    <el-date-picker v-model="orgyear"
                                    type="year"
                                    format="yyyy"
                                    placeholder="选择年">
                    </el-date-picker>
                </el-form-item>
            </div>

        </el-form>
        <el-form :inline="true" class="demo-form-inline">
            <el-form-item>
                <el-button type="danger" @@click="batchDelete">选中行删除</el-button>
            </el-form-item>
            <el-form-item>
                <el-button type="primary" @@click="querydata">查询</el-button>
            </el-form-item>
            <el-form-item>
                <el-button type="primary" @@click="exportdata">导出</el-button>
            </el-form-item>
            <el-form-item>
                <el-button type="primary" @@click="()=>{ this.showbutton = true}">导入</el-button>
            </el-form-item>

        </el-form>
    </div>

    <el-row v-loading="loading">
        <el-table :data="data"
                  :span-method="objectSpanMethod"
                  style="width: 100%;"
                  :height="tableheight"
                  @@selection-change="handleSelectionChange">
            <el-table-column type="selection"
                             width="55">
            </el-table-column>
            <el-table-column fixed
                             prop="orgName"
                             label="企业名称"
                             width="150">
            </el-table-column>
            <el-table-column prop="periodYear"
                             label="年份"
                             width="120">
            </el-table-column>
            <el-table-column prop="town"
                             label="所属镇街"
                             width="150">
            </el-table-column>
            <el-table-column prop="orgCode"
                             label="统一社会信用代码"
                             width="150">
            </el-table-column>
            <el-table-column prop="registrationType"
                             label="登记注册类型"
                             width="150">
            </el-table-column>
            <el-table-column prop="address"
                             label="住所"
                             width="150">
            </el-table-column>
            <el-table-column label="法定代表人">
                <el-table-column prop="legalRepresentative"
                                 label="姓名"
                                 width="120">
                </el-table-column>
                <el-table-column prop="phone"
                                 label="联系电话"
                                 width="120">
                </el-table-column>
            </el-table-column>
            <el-table-column label="日常联系人">
                <el-table-column prop="linkMan"
                                 label="姓名"
                                 width="120">
                </el-table-column>
                <el-table-column prop="phone2"
                                 label="联系电话"
                                 width="120">
                </el-table-column>
            </el-table-column>
            <el-table-column prop="ownershipLand"
                             label="自有土地面积(平方米)"
                             width="120">
            </el-table-column>
            <el-table-column prop="protectionLand"
                             label="评价保护期土地面积(平方米)"
                             width="120">
            </el-table-column>
            <el-table-column prop="reduceLand"
                             label="新减土地面积(平方米)"
                             width="120">
            </el-table-column>
            <el-table-column prop="factLand"
                             label="事实用地总面积(平方米)"
                             width="120">
            </el-table-column>
            <el-table-column prop="rentLand"
                             label="租用土地总面积(平方米)"
                             width="120">
            </el-table-column>
            <el-table-column prop="leaseLand"
                             label="出租土地总面积(平方米)"
                             width="120">
            </el-table-column>
            <el-table-column prop="remark"
                             label="备注"
                             width="120">
            </el-table-column>
            <el-table-column label="操作"
                             width="150">
                <template slot-scope="scope">
                    <el-button size="mini"
                               v-on:click="handleEdit(scope.$index, scope.row)">编辑</el-button>

                    <el-button size="mini"
                               type="danger"
                               v-on:click="handleDelete(scope.$index, scope.row)">删除</el-button>
                </template>
            </el-table-column>
        </el-table>

        <div id="pagination">
            <el-pagination @@size-change="handleSizeChange"
                           @@current-change="handleCurrentChange"
                           :current-page="currentPage"
                           :page-sizes="[10, 20, 30, 40]"
                           :page-size="pageSize"
                           layout="total, sizes, prev, pager, next, jumper"
                           :total="total">
            </el-pagination>
        </div>
       

        <el-dialog :title="dialogTitle"
                   :visible.sync="centerDialogVisible"
                   width="65%"
                   :modal-append-to-body="false"
                   center>

            <el-form :inline="true" class="demo-form-inline">
                <el-row>
                    <e-col>
                        <el-form-item label="事实用地">
                            <el-input placeholder="请输入事实用地总面积" v-model="mainform.fact"></el-input>
                        </el-form-item>
                    </e-col>
                    <e-col>
                        <el-form-item label="租用土地">
                            <el-input placeholder="请输入租用土地总面积" v-model="mainform.rent"></el-input>
                        </el-form-item>
                    </e-col>

                </el-row>
                <el-row>
                    <e-col>
                        <el-form-item label="出租土地">
                            <el-input placeholder="请输入出租土地总面积" v-model="mainform.lease"></el-input>
                        </el-form-item>
                    </e-col>
                    <e-col>
                        <el-form-item label="备注信息">
                            <el-input placeholder="请输入备注信息" v-model="mainform.remark"></el-input>
                        </el-form-item>
                    </e-col>
                </el-row>

            </el-form>
            <template>

                <el-table :data="detailData"
                          style="width: 100%">
                    @*不展示*@
                    <el-table-column v-if="keyshow" label="主键">
                        <template slot-scope="scope">
                            <el-input v-model="scope.row.recordId" placeholder="主键"></el-input>
                        </template>
                    </el-table-column>

                    <el-table-column prop="orgName" label="企业名称" width="245">
                        <template slot-scope="scope">
                            <el-input disabled="true" v-model="scope.row.orgName" placeholder="企业名称"></el-input>
                        </template>
                    </el-table-column>
                    <el-table-column prop="ownershipLand" label="自有土地面积">
                        <template slot-scope="scope">
                            <el-input v-model="scope.row.ownershipLand" placeholder="自有土地面积"></el-input>
                        </template>
                    </el-table-column>
                    <el-table-column prop="protectionLand" label="评价保护期土地面积">
                        <template slot-scope="scope">
                            <el-input v-model="scope.row.protectionLand" placeholder="评价保护期土地面积"></el-input>
                        </template>
                    </el-table-column>
                    <el-table-column prop="reduceLand" label="新减土地面积">
                        <template slot-scope="scope">
                            <el-input v-model="scope.row.reduceLand" placeholder="新减土地面积"></el-input>
                        </template>
                    </el-table-column>
                </el-table>
                <div slot="footer" class="dialog-footer">
                    <el-button v-on:click=" ()=>{this.centerDialogVisible = false}">取 消</el-button>
                    <el-button type="primary" v-on:click="dialogSave('detailData')">确 定</el-button>
                </div>
            </template>

        </el-dialog>

        <el-dialog :title="buttontxt"
                   :visible.sync="showbutton"
                   width="20%"
                   :modal-append-to-body="false"
                   center>
            <el-form>
                <el-form-item>
                    <el-button type="primary" @@click="downtemplate">下载模板</el-button>
                </el-form-item>
                <el-form-item label="请选择导入年份">
                    <el-date-picker v-model="exportyear"
                                    type="year"
                                    format="yyyy"
                                    placeholder="选择年">
                    </el-date-picker>
                </el-form-item>
                <el-form-item>
                    <el-upload class="upload-demo"
                               action="/api/qiyefile/upload"
                               :before-upload="beforeUpload"
                               :on-success="uploadSuccess"
                               :on-error="uploadError"
                               :data="model"
                               :show-file-list="false">
                        <el-button size="small" type="primary">点击上传</el-button>
                    </el-upload>
                </el-form-item>
            </el-form>

        </el-dialog>
</div>

<script>
    layui.use(['element', 'layer'], function () {
        var layer = layui.layer
        var form = layui.form;
        var $ = layui.$
    })
</script>

<script>
    new Vue({
        el: '#app',
        data() {
            return {
                multipleSelection: [],//存放多选内容
                buttontxt: '',
                showbutton: false,
                keyshow: false,
                detailData: [{
                    recordId: '',
                    orgName: '',
                    ownershipLand: '',
                    protectionLand: '',
                    reduceLand: ''
                }],
                dialogTitle: '',
                centerDialogVisible: false,
                tableheight: null,
                loading: false,
                array: [],
                sym: 0,
                data: [],
                orgname: '',
                orgcode: '',
                orgyear:'',
                model: { year: '' },
                exportyear: '',
                pageSize: 10,
                currentPage: 1,
                total: 0,
                mainform: {
                    key:'',
                    fact: '',
                    rent: '',
                    lease: '',
                    remark:''
                }
            }
        },
        methods: {
            fetchlist() {
                let vm = this;
                vm.loading = true
                let y = ''

                var top = $("#app").offset().top;
                var func = $("#func").get(0).offsetHeight
                var pagination = $("#pagination").get(0).offsetHeight
                //自适应表高度
                var height = Math.max(0, document.documentElement.clientHeight) - top - 1 - func - pagination;
                vm.tableheight = height
                if (vm.orgyear != '' && vm.orgyear != null) {
                    y = vm.orgyear.getFullYear()
                }

                axios({ url: `/api/qiyefile/getlist`, method: 'post', data: { orgname: vm.orgname, orgcode: vm.orgcode, limit: vm.pageSize, page: vm.currentPage, year: y } }).then(res => {
                    vm.data = res.data.content.data
                    vm.array = res.data.content.array
                    vm.total = res.data.content.total
                    console.log(res.data.content.data)
                    vm.loading = false
                }).catch(err => { console.log(err); vm.loading = false })
            },
            objectSpanMethod({ row, column, rowIndex, columnIndex }) {
                let vm = this
                let c = row.count               
                console.log(row.count)
                if (columnIndex < 10 || columnIndex > 12) {
                    //只有一行返回count个，其他的返回0
                    if (vm.array.find(item => { return item == rowIndex }) != null) {

                        return {
                            rowspan: c,
                            colspan: 1
                        };
                    } else {
                        return {
                            rowspan: 0,
                            colspan: 0
                        };
                    }
                }
            },
            querydata() {
                let vm = this
                vm.fetchlist()
            },
            openUploadLoading(val) {
                const loading = this.$loading({
                    lock: true,
                    text: '请稍候，正在导入...',
                    spinner: 'el-icon-loading',
                    background: 'rgba(0, 0, 0, 0.7)'
                });
                switch (val) {
                    case 'before':
                        break;
                    case 'after':
                        loading.close();
                        break;
                    default:
                }
            },
            exportdata() {
                let vm = this
                //window.location.href = `/api/qiyefile/export/${vm.pageSize}/${vm.currentPage}`
                let y = ''
                if (vm.orgyear != '' && vm.orgyear != null) {
                    y = vm.orgyear.getFullYear()
                }
                let post = {
                    pagesize: vm.pageSize,
                    pagenum: vm.currentPage,
                    orgname: vm.orgname,
                    orgcode: vm.orgcode,
                    year: y
                };
                window.location.href = `/api/qiyefile/export?` + $.param(post)
            },
            downtemplate() {
                let vm = this
                window.location.href = `/api/qiyefile/downtemplate`
            },
            beforeUpload() {
                let vm = this
                try {

                    vm.model.year = vm.exportyear.getFullYear()
                    vm.openUploadLoading('before')
                    if (vm.model.year === '') {
                        vm.$message.error('请先选择年份!');
                        return false
                    }
                } catch (e) {
                    vm.$message.error('请先选择年份!');
                    return false
                }
            },
            uploadSuccess(response, file, fileList) {
                let vm = this
                vm.showbutton = false
                vm.openUploadLoading('after')
                if (response.isSuccess == true) {
                    vm.$message.success(response.message);
                } else {
                    vm.$message.error(response.message);
                }
                debugger
                vm.fetchlist()
                console.log(response);
            },
            uploadError(err, file, fileList) {
                let vm = this
                vm.showbutton = false
                vm.$message.error('操作失败！' + err);
                debugger
                console.log(err)
            },
            handleEdit: function (index, row) {
                //编辑
                let vm = this
                console.log('index:', index)
                console.log('rowdata', row)
                console.log('key:', row.key)
                //通过接口拿到数据
                axios({ url: `/api/qiyefile/edit/${row.key}`, method: 'get', async: true }).then(res => {
                    if (res.data.isSuccess === true) {
                        var data = res.data.content
                        vm.detailData = []
                        for (var i = 0; i < data.length; i++) {

                            var obj = {
                                recordId: data[i].recordId,
                                orgName: data[i].orgName,
                                ownershipLand: data[i].ownershipLand,
                                protectionLand: data[i].protectionLand,
                                reduceLand: data[i].reduceLand
                            }

                            vm.detailData.push(obj)
                        }
                        vm.mainform = {
                            key: data[0].key,
                            fact: data[0].factLand,
                            rent: data[0].rentLand,
                            lease: data[0].leaseLand,
                            remark: data[0].remark,
                        }
                    } else {
                        vm.$message.error(res.data.message)
                    }
                    console.log(res)
                }).catch(err => {
                        vm.$message.error('数据请求异常!')
                    })
                vm.dialogTitle = "编辑信息"
                vm.centerDialogVisible = true

            },
            dialogSave: function (form) {
                let vm = this
                debugger
                //处理接收参数
                var detaillist = []
                for (var i = 0; i < vm.detailData.length; i++) {

                    let cd = {
                        RecordId: vm.detailData[i].recordId,
                        OwnershipLand: vm.detailData[i].ownershipLand,
                        ProtectionLand: vm.detailData[i].protectionLand,
                        ReduceLand: vm.detailData[i].reduceLand
                    }

                    detaillist.push(cd)
                }
                var postdata = new Object()
                postdata.Key = vm.mainform.key
                postdata.FactLand = vm.mainform.fact
                postdata.RentLand = vm.mainform.rent
                postdata.LeaseLand = vm.mainform.lease
                postdata.Remark = vm.mainform.remark
                postdata.detaillist = detaillist
                let url = `/api/qiyefile/update/${postdata.Key}`
                let method = "PUT"
                axios({ url: url, method: method, data: postdata })
                    .then(res => {
                        debugger
                        vm.centerDialogVisible = false
                        if (res.data.isSuccess === true) {
                            vm.$message.success('操作成功！');
                            vm.fetchlist();
                        }
                        console.log(res)
                    })
                    .catch(error => {
                        vm.centerDialogVisible = false
                        vm.$message.error('操作失败，意外的原因！');
                        console.log(error)
                    })
            },
            handleDelete: function (index, row) {
                let vm = this

                vm.$confirm('此操作将永久删除该数据, 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    let url = `/api/qiyefile/delete/${row.key}`
                    let method = 'get'
                    axios({ url: url, method: method })
                        .then(res => {
                            if (res.data.isSuccess === true) {
                                vm.$message.success('操作成功！');
                                vm.fetchlist();
                            }
                            console.log(res)
                        })
                        .catch(error => {
                            vm.$message.error('操作失败，意外的原因！');
                            console.log(error)
                        })
                }).catch(() => {
                    vm.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
            },
            batchDelete() {
                let vm = this;
                let batchdatas = this.multipleSelection;
                if (batchdatas.length == 0) {
                    vm.$message("请先选中数据再进行操作！");
                    return;
                }
                let ids = '';
                for (let i = 0; i < batchdatas.length; i++) {
                    ids += `&ids=${batchdatas[i].key}`;
                };
                ids = ids.substring(1, ids.length)
                console.log(ids);
                vm.$confirm(`此操作将删除${batchdatas.length}条用电信息, 是否继续?`, '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.delete('/api/qiyefile/batchdelete?' + ids)
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                return;
                            }
                            vm.$message({ title: '成功', message: '删除成功', type: 'success' })
                            vm.fetchlist();
                            vm.centerDialogVisible = false
                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                            console.log(error);
                        });

                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
            },
            handleSizeChange(val) {
                let vm = this
                vm.pageSize = val
                vm.loading = true
                vm.fetchlist()
                console.log(`每页 ${val} 条`);
            },
            handleCurrentChange(val) {
                let vm = this
                vm.currentPage = val
                vm.loading = true
                vm.fetchlist()
                console.log(`当前页: ${val}`);
            },
            handleSelectionChange(val) {
                this.multipleSelection = val;

            }
        },
        mounted() {
            let vm = this;
            vm.loading = true
            vm.fetchlist()
        }
    })
</script>

