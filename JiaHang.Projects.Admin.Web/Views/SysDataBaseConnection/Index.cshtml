
@{
    ViewData["Title"] = "数据库连接管理";
}

<style>
    .v-modal {
        display: none;
    }

    #app {
        margin-top: 15px;
        padding: 15px;
        background-color: #fff;
    }
</style>
<div id="app">

    <el-form :inline="true" class="demo-form-inline">
        <el-form-item label="连接名称：">
            <el-input placeholder="连接名称" v-model="searchConnectionName"></el-input>
        </el-form-item>
        <el-form-item label="数据库类型：">
            <el-select v-model="searchdatabaseTypes" placeholder="请选择">
                <el-option v-for="item in searchdatabaseType"
                           :key="item.databaseTypeId"
                           :label="item.databaseTypeName"
                           :value="item.databaseTypeId"
                           :disabled="item.disabled">
                </el-option>
            </el-select>
        </el-form-item>
    </el-form>
    <el-form :inline="true" class="demo-form-inline">
        <el-form-item>
            <el-button size="small" type="primary" @@click="fetchList">查询</el-button>
        </el-form-item>
        <el-form-item>
            <el-button size="small" type="primary" @@click="handleAdd">添加</el-button>
        </el-form-item>
        <el-form-item>
            <el-button size="small" type="danger" @@click="batchDelete">批量删除</el-button>
        </el-form-item>
    </el-form>

    <el-table ref="multipleTable"
              :data="data"
              :border="true"
              tooltip-effect="dark"
              style="width: 100%"
              @@selection-change="handleSelectionChange">
        <el-table-column type="selection"
                         width="55">
        </el-table-column>
        <el-table-column label="连接名称"
                         prop="connectionName">
        </el-table-column>
        @*<el-table-column label="连接字符串"
                             prop="connectionString">
            </el-table-column>*@
        <el-table-column label="数据库类型代码"
                         prop="databaseTypeCode">
        </el-table-column>
        <el-table-column label="数据库类型名称"
                         prop="databaseTypeName">
        </el-table-column>
        <el-table-column label="创建时间"
                         prop="creationDate">
        </el-table-column>
        <el-table-column label="操作">
            <template slot-scope="scope">
                <el-button size="mini"
                           v-on:click="handleEdit(scope.$index, scope.row)">编辑</el-button>
                <el-button size="mini"
                           type="danger"
                           v-on:click="handleDelete(scope.$index, scope.row)">删除</el-button>
            </template>
        </el-table-column>
    </el-table>
    <el-pagination @@size-change="handleSizeChange"
                   @@current-change="handleCurrentChange"
                   :current-page="currentPage"
                   :page-sizes="[10, 20, 30, 40]"
                   :page-size="pageSize"
                   layout="total, sizes, prev, pager, next, jumper"
                   :total="total">
    </el-pagination>
    <el-dialog :title="dialogTitle"
               :visible.sync="centerDialogVisible"
               width="30%"
               center>
        <el-form :label-position="labelPosition" label-width="160px" :model="form" :rules="rules" ref="form">
            <el-form-item label="连接ID" prop="connectionId" hidden>
                <el-input v-model="form.connectionId"></el-input>
            </el-form-item>
            <el-form-item label="数据类型名称：">
                <el-select v-model="form.databaseTypeId" placeholder="请选择">
                    <el-option v-for="item in databasetypename"
                               :key="item.databaseTypeId"
                               :label="item.databaseTypeName"
                               :value="item.databaseTypeId"
                               :disabled="item.disabled">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="连接名称" prop="connectionName">
                <el-input v-model="form.connectionName"></el-input>
            </el-form-item>
            <el-form-item label="连接字符串" prop="connectionString">
                <el-input type="textarea" :rows="5" v-model="form.connectionString"></el-input>
            </el-form-item>
        </el-form>
        <div slot="footer" class="dialog-footer">
            <el-button v-on:click="dialogCancel()">取 消</el-button>
            <el-button type="primary" v-on:click="dialogSave('form')">确 定</el-button>
        </div>
    </el-dialog>

</div>
<script>
    layui.use(['element', 'layer'], function () {
        var layer = layui.layer
        var form = layui.form;
        var $ = layui.$
    })
</script>
<script>
    let connectionId = "";
    new Vue({
        el: "#app",
        data: function () {
            return {
                data: [],
                centerDialogVisible: false,
                currentPage: 1,
                pageSize: 10,
                total: 0,
                multipleSelection: [],//获取批量选择的数据
                searchConnectionName: '',
                searchdatabaseType: [],
                databasetypename: [],
                searchdatabaseTypes: '',
                form: {
                    connectionId: '',
                    databaseTypeId: '',
                    connectionName: '',
                    connectionString: '',
                },
                rules: {
                    connectionName: [
                        { required: true, message: '连接名称不能为空', trigger: 'blur' },
                    ],
                    connectionString: [
                        { required: true, message: '连接字符串不能为空', trigger: 'blur' }
                    ],
                },
                formLabelWidth: '160px',
                dialogTitle: '',
                labelPosition: 'left',
                IsCreate: true,//是否新增
            }
        },
        methods: {
            fetchList: function () {
                let vm = this
                console.log(vm.searchdatabaseType);
                axios.get(`/api/SysDataBaseConnection/${vm.pageSize}/${vm.currentPage}?connectionName=${vm.searchConnectionName}&databaseType=${vm.searchdatabaseTypes}`)
                    .then(function (response) {
                        vm.data = response.data.content.data;
                        vm.total = response.data.content.total;
                    })
                    .catch(function (error) {
                        console.log(error)
                    });
            },
            handleEdit: function (index, row) {
                //编辑
                let vm = this
                let rowstr = JSON.stringify(row)
                let formdata = JSON.parse(rowstr)
                vm.IsCreate = false
                vm.dialogTitle = "编辑连接信息"
                vm.getConnectionType();
                vm.form = formdata;
              
                connectionId = vm.form.connectionId;
                vm.centerDialogVisible = true
            },
            handleDelete: function (index, row) {
                let vm = this
                //删除

                //弹出确认框

                this.$confirm('此操作将删除该连接信息, 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.delete('/api/SysDataBaseConnection/' + row.connectionId)
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                return;
                            }
                            vm.$message({ title: '成功', message: '删除成功', type: 'success' })
                            vm.fetchList();
                            vm.centerDialogVisible = false
                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                            console.log(error);
                        });

                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });

            },
            handleAdd: function () {
                let vm = this
                vm.IsCreate = true
                vm.getConnectionType();
                vm.resetForm()
                vm.dialogTitle = "添加连接信息"
                vm.centerDialogVisible = true
                //添加
            },
            dialogCancel: function () {
                let vm = this;

                vm.centerDialogVisible = false
            },
            dialogSave: function (formName) {
                let vm = this;
                vm.$refs[formName].validate((valid) => {
                    if (valid) {
                        let url = "/api/SysDataBaseConnection";
                        let method = "POST";
                        if (vm.IsCreate != true) {
                            url = `/api/SysDataBaseConnection/${vm.form.connectionId}`;
                            method = "PUT";
                        }
                        axios({ url: url, method: method, data: vm.form })
                            .then(function (response) {
                                if (!response.data.isSuccess) {
                                    vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                    return;
                                }
                                vm.$message({ title: '成功', message: response.data.message, type: 'success' })
                                vm.fetchList();
                                vm.centerDialogVisible = false
                            })
                            .catch(function (error) {
                                vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                                console.log(error);
                            });

                    } else {
                        console.log('error submit!!');
                        return;
                    }
                });
            },
            resetForm() {
                let vm = this;
                vm.form.databaseTypeId = ''
                vm.form.connectionName = ''
                vm.form.connectionString = ''
                vm.form.connectionId = ''
            },
            handleSizeChange(val) {
                console.log(`每页 ${val} 条`);
                this.pageSize = val;
                this.fetchList();
            },
            handleCurrentChange(val) {
                console.log(`当前页: ${val}`);
                this.currentPage = val;
                this.fetchList();
            },

            handleSelectionChange(val) {
                this.multipleSelection = val;

            },
            getConnectionType: function () {
                let vm = this;
                axios.get('/api/SysDataBaseConnection/SelectDatabaseType')
                    .then(function (response) {
                        vm.databasetypename = response.data.content;
                        vm.databasetypename.unshift({ databaseTypeName: '请选择', databaseTypeId: '' });
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            getselConnectionType: function () {
                let vm = this;
                axios.get('/api/SysDataBaseConnection/SelectDatabaseType')
                    .then(function (response) {
                        vm.searchdatabaseType = response.data.content;
                        vm.searchdatabaseType.unshift({ databaseTypeName: '请选择', databaseTypeId: '' });
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },

            batchDelete() {
                let vm = this
                let batchdatas = this.multipleSelection;
                if (batchdatas.length == 0) {
                    vm.$message("请先选中数据再进行操作！");
                    return;
                }
                let ids = '';
                for (let i = 0; i < batchdatas.length; i++) {
                    ids += `&ids=${batchdatas[i].connectionId}`;
                };
                ids = ids.substring(1, ids.length)
              
                vm.$confirm(`此操作将删除${batchdatas.length}条连接信息, 是否继续?`, '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.delete('/api/sysdatabaseconnection/batchdelete?' + ids)
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                return;
                            }
                            vm.$message({ title: '成功', message: '删除成功', type: 'success' })
                            vm.fetchList();
                            vm.centerDialogVisible = false
                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                            console.log(error);
                        });

                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
                console.log(this.multipleSelection);
            }
        },
        mounted: function () {
            let vm = this
            vm.fetchList();
            vm.getselConnectionType();
        }

    });
</script>
