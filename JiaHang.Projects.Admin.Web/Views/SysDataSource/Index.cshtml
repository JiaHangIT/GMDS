
@{
    ViewData["Title"] = "数据源ElementUI设计";
}
<style>
    .v-modal {
        display: none;
    }

    #app {
        margin-top: 15px;
        padding: 15px;
        background-color: #fff;
    }
</style>
<div id="app">
    <el-form :inline="true" class="demo-form-inline">
        <el-form-item label="数据源代码：">
            <el-input placeholder="数据源代码" v-model="searchDataSourceCode"></el-input>
        </el-form-item>
        <el-form-item label="数据源名称：" style="margin-left:18px">
            <el-input placeholder="数据源名称" v-model="searchDataSourceName"></el-input>
        </el-form-item>
    </el-form>
    <el-form :inline="true" class="demo-form-inline">
        <el-form-item label="数据源类型：">
            <el-select v-model="value1" placeholder="请选择">
                <el-option v-for="item in searchdataSourceType"
                           :key="item.value"
                           :label="item.label"
                           :value="item.value"
                           :disabled="item.disabled">
                </el-option>
            </el-select>
        </el-form-item>
        <el-form-item label="数据源用途：">
            <el-select v-model="value2" placeholder="请选择">
                <el-option v-for="item in searchdataSourceUse"
                           :key="item.value"
                           :label="item.label"
                           :value="item.value"
                           :disabled="item.disabled">
                </el-option>
            </el-select>
        </el-form-item>
    </el-form>
    <el-form :inline="true" class="demo-form-inline">
        <el-form-item>
            <el-button size="small" type="primary" @@click="search">查询</el-button>
        </el-form-item>
        <el-form-item>
            <el-button size="small" type="primary" @@click="dataSourceAdd">新增数据源</el-button>
        </el-form-item>
        <el-form-item>
            <el-button size="small" type="danger" @@click="batchDelete">选中行删除</el-button>
        </el-form-item>
    </el-form>
    <el-table ref="multipleTable"
              :data="data"
              :border="true"
              tooltip-effect="dark"
              style="width: 100%"
              @@selection-change="handleSelectionChange">
        <el-table-column type="selection"
                         width="55">
        </el-table-column>
        <el-table-column label="数据源代码"
                         prop="dataSourceCode">
        </el-table-column>
        <el-table-column label="数据源名称"
                         prop="dataSourceName">
        </el-table-column>
        <el-table-column label="数据源类型"
                         prop="dataSourceType">
        </el-table-column>
        <el-table-column label="数据源用途"
                         prop="dataSourceUse">
        </el-table-column>
        <el-table-column label="数据库连接名称"
                         prop="connectionName">
        </el-table-column>
        <el-table-column label="创建时间"
                         prop="creationDate">
        </el-table-column>
        <el-table-column label="操作">

            <template slot-scope="scope">
                <el-button size="mini"
                           v-on:click="handleEdit(scope.$index, scope.row)">编辑</el-button>
                <el-button size="mini"
                           type="danger"
                           v-on:click="handleDelete(scope.$index, scope.row)">删除</el-button>
            </template>
        </el-table-column>
    </el-table>
    <el-pagination @@size-change="handleSizeChange"
                   @@current-change="handleCurrentChange"
                   :current-page="currentPage"
                   :page-sizes="[10, 20, 30, 40]"
                   :page-size="pageSize"
                   layout="total, sizes, prev, pager, next, jumper"
                   :total="total">
    </el-pagination>
    <el-dialog :title="dialogTitle"
               :visible.sync="centerDialogVisible"
               width="50%"
               left>
        <el-tabs v-model="activeName" @@tab-click="handleClick" style="margin-top: -40px;">
            <el-tab-pane label="数据源基础信息" name="first">

                <el-form :label-position="labelPosition" label-width="160px" :model="form" :rules="rules" ref="form">
                    <el-form-item label="数据源ID" prop="dataSourceId" hidden>
                        <el-input v-model="form.dataSourceId"></el-input>
                    </el-form-item>
                    <el-form-item label="数据源代码" prop="dataSourceCode">
                        <el-input v-model="form.dataSourceCode"></el-input>
                    </el-form-item>
                    <el-form-item label="数据源名称" prop="dataSourceName">
                        <el-input v-model="form.dataSourceName"></el-input>
                    </el-form-item>
                    <el-form-item label="数据库连接名称：">
                        <el-select v-model="form.connectionId" placeholder="请选择">
                            <el-option v-for="item in databaseName"
                                       :key="item.connectionId"
                                       :label="item.connectionName"
                                       :value="item.connectionId"
                                       :disabled="item.disabled">
                            </el-option>
                        </el-select>
                    </el-form-item>
                    <el-form-item label="数据源类型：">
                        <el-select v-model="form.dataSourceType" placeholder="请选择">
                            <el-option v-for="item in dataSourceType"
                                       :key="item.value"
                                       :label="item.label"
                                       :value="item.value"
                                       :disabled="item.disabled">
                            </el-option>
                        </el-select>

                    </el-form-item>
                    <el-form-item label="数据源用途：">
                        <el-select v-model="form.dataSourceUse" placeholder="请选择">
                            <el-option v-for="item in dataSourceUse"
                                       :key="item.value"
                                       :label="item.label"
                                       :value="item.value"
                                       :disabled="item.disabled">
                            </el-option>
                        </el-select>

                    </el-form-item>
                    <el-form-item label="所属数据目录：">
                        <el-select v-model="form.dataCatlog" placeholder="请选择">
                            <el-option v-for="item in dataCatlogName"
                                       :key="item.dataCatalogId"
                                       :label="item.dataCatalogName"
                                       :value="item.dataCatalogId"
                                       :disabled="item.disabled">
                            </el-option>
                        </el-select>
                    </el-form-item>
                </el-form>
                <div style="margin-left:220px">
                    <el-button v-on:click="dialogCancel()">取 消</el-button>
                    <el-button type="primary" v-on:click="dialogSave('form')">确 定</el-button>
                </div>
            </el-tab-pane>

            <el-tab-pane label="数据源字段信息" name="second">
                <el-table ref="multipleTable"
                          :data="dataField"
                          :border="true"
                          tooltip-effect="dark"
                          style="width: 100%"
                          @@selection-change="handleSelectionChangeField">
                    <el-table-column type="selection"
                                     width="55">
                    </el-table-column>
                    <el-table-column label="字段代码"
                                     prop="fieldCode">
                    </el-table-column>
                    <el-table-column label="字段名称"
                                     prop="fieldName">
                    </el-table-column>
                    <el-table-column label="字段类型"
                                     prop="fieldTypeName">
                    </el-table-column>
                    <el-table-column label="是否可为空"
                                     prop="fieldNullable">
                    </el-table-column>
                    <el-table-column label="字段长度"
                                     prop="fieldLength">
                    </el-table-column>
                    <el-table-column label="是否索引"
                                     prop="fieldIndexFlag">
                    </el-table-column>
                    <el-table-column label="操作">

                        <template slot-scope="scope">
                            <el-button size="mini"
                                       v-on:click="handleEditField(scope.$index, scope.row)">编辑</el-button>
                            <el-button size="mini"
                                       type="danger"
                                       v-on:click="handleDeleteField(scope.$index, scope.row)">删除</el-button>
                        </template>
                    </el-table-column>
                </el-table>
                <el-pagination @@size-change="handleSizeChangeField"
                               @@current-change="handleCurrentChangeField"
                               :current-page="currentPageField"
                               :page-sizes="[10, 20, 30, 40]"
                               :page-size="pageSizeField"
                               layout="total, sizes, prev, pager, next, jumper"
                               :total="totalField">
                </el-pagination>
                <div style="margin-left:220px">

                    <el-button type="primary" size="mini" v-on:click="addfield()">添加字段</el-button>
                    <el-button type="danger" size="mini" v-on:click="deletebatchfield()">删除字段</el-button>
                    <el-button size="mini" v-on:click="canclefield()">取消</el-button>
                </div>
            </el-tab-pane>

        </el-tabs>


    </el-dialog>
    <el-dialog :title="adddialogTitle"
               :visible.sync="addcenterDialogVisible"
               width="50%"
               center>
        <el-form :inline="true" :label-position="addlabelPosition" label-width="160px" :model="addform" :rules="addrules" ref="addform">
            <el-form-item label="数据源代码：" prop="dataSourceCode">
                <el-input v-model="addform.dataSourceCode"></el-input>
            </el-form-item>
            <el-form-item label="数据源名称：" prop="dataSourceName">
                <el-input v-model="addform.dataSourceName"></el-input>
            </el-form-item>
            <el-form-item label="数据库连接名称：">
                <el-select v-model="addform.connectionId" placeholder="请选择">
                    <el-option v-for="item in databaseName"
                               :key="item.connectionId"
                               :label="item.connectionName"
                               :value="item.connectionId"
                               :disabled="item.disabled">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="数据源类型：">
                <el-select v-model="addform.dataSourceType" placeholder="请选择">
                    <el-option v-for="item in dataSourceType"
                               :key="item.value"
                               :label="item.label"
                               :value="item.value"
                               :disabled="item.disabled">
                    </el-option>
                </el-select>

            </el-form-item>
            <el-form-item label="数据源用途：">
                <el-select v-model="addform.dataSourceUse" placeholder="请选择">
                    <el-option v-for="item in dataSourceUse"
                               :key="item.value"
                               :label="item.label"
                               :value="item.value"
                               :disabled="item.disabled">
                    </el-option>
                </el-select>

            </el-form-item>
            <el-form-item label="所属数据目录：">
                <el-select v-model="addform.dataCatlog" placeholder="请选择">
                    <el-option v-for="item in dataCatlogName"
                               :key="item.dataCatalogId"
                               :label="item.dataCatalogName"
                               :value="item.dataCatalogId"
                               :disabled="item.disabled">
                    </el-option>
                </el-select>
            </el-form-item>
        </el-form>
        <div slot="footer" class="dialog-footer">
            <el-button v-on:click="adddialogCancel()">取 消</el-button>
            <el-button type="primary" v-on:click="adddialogSave('addform')">确 定</el-button>
        </div>
    </el-dialog>
    <el-dialog :title="addfielddialogTitle"
               :visible.sync="addfieldcenterDialogVisible"
               width="50%"
               center>
        <el-form :label-position="addfieldlabelPosition" label-width="160px" :model="addfieldform" :rules="addfieldrules" ref="addfieldform">
            <el-form-item label="数据源ID" prop="dataSourceId" hidden>
                <el-input v-model="addfieldform.dataSourceId"></el-input>
            </el-form-item>
            <el-form-item label="字段代码：" prop="fieldCode">
                <el-input v-model="addfieldform.fieldCode"></el-input>
            </el-form-item>
            <el-form-item label="字段名称：" prop="fieldName">
                <el-input v-model="addfieldform.fieldName"></el-input>
            </el-form-item>
            <el-form-item label="字段类型：">
                <el-select v-model="addfieldform.fieldTypeId" placeholder="请选择">
                    <el-option v-for="item in fieldtypes"
                               :key="item.fieldTypeId"
                               :label="item.fieldTypeName"
                               :value="item.fieldTypeId"
                               :disabled="item.disabled">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="是否可为空：">
                <el-select v-model="addfieldform.fieldNullable" placeholder="请选择">
                    <el-option v-for="item in fieldnullable"
                               :key="item.value"
                               :label="item.label"
                               :value="item.value"
                               :disabled="item.disabled">
                    </el-option>
                </el-select>

            </el-form-item>
            <el-form-item label="是否主键：">
                <el-select v-model="addfieldform.fieldKeyFlag" placeholder="请选择">
                    <el-option v-for="item in fieldkeyflag"
                               :key="item.value"
                               :label="item.label"
                               :value="item.value"
                               :disabled="item.disabled">
                    </el-option>
                </el-select>

            </el-form-item>
            <el-form-item label="字段长度：" prop="fieldLength">
                <el-input v-model="addfieldform.fieldLength"></el-input>
            </el-form-item>
            <el-form-item label="是否唯一索引：">
                <el-select v-model="addfieldform.fieldIndexFlag" placeholder="请选择">
                    <el-option v-for="item in fieldindexflag"
                               :key="item.value"
                               :label="item.label"
                               :value="item.value"
                               :disabled="item.disabled">
                    </el-option>
                </el-select>

            </el-form-item>
            <el-form-item label="字段默认值：" prop="fieldValue">
                <el-input v-model="addfieldform.fieldValue"></el-input>
            </el-form-item>
            <el-form-item label="是否维度字段：">
                <el-select v-model="addfieldform.dimFlag" placeholder="请选择">
                    <el-option v-for="item in dimflag"
                               :key="item.value"
                               :label="item.label"
                               :value="item.value"
                               :disabled="item.disabled">
                    </el-option>
                </el-select>

            </el-form-item>
            <el-form-item label="是否时间戳字段：">
                <el-select v-model="addfieldform.timestampFlag" placeholder="请选择">
                    <el-option v-for="item in timestampflag"
                               :key="item.value"
                               :label="item.label"
                               :value="item.value"
                               :disabled="item.disabled">
                    </el-option>
                </el-select>

            </el-form-item>
            <el-form-item label="维度字段表名：" prop="dimTableName">
                <el-input v-model="addfieldform.dimTableName"></el-input>
            </el-form-item>
            <el-form-item label="维度字段代码：" prop="dimFieldCode">
                <el-input v-model="addfieldform.dimFieldCode"></el-input>
            </el-form-item>
            <el-form-item label="维度字段名称：" prop="dimFieldName">
                <el-input v-model="addfieldform.dimFieldName"></el-input>
            </el-form-item>
            <el-form-item label="序列代码：" prop="oraSequenceCode">
                <el-input v-model="addfieldform.oraSequenceCode"></el-input>
            </el-form-item>
        </el-form>
        <div slot="footer" class="dialog-footer">
            <el-button v-on:click="addfielddialogCancel()">取 消</el-button>
            <el-button type="primary" v-on:click="addfielddialogSave('addfieldform')">确 定</el-button>
        </div>
    </el-dialog>
</div>
<script>
    layui.use(['element', 'layer'], function () {
        var layer = layui.layer
        var form = layui.form;
        var $ = layui.$
    })
</script>
<script>
    let dataSourceId = "";
    new Vue({
        el: '#app',
        data: function () {
            return {
                data: [],
                dataField:[],
                activeName: 'first',
                centerDialogVisible: false,
                addcenterDialogVisible: false,
                addfieldcenterDialogVisible:false,
                currentPage: 1,
                currentPageField:1,
                pageSize: 10,
                pageSizeField: 10,
                total: 0,
                totalField: 0,
                multipleSelection: [],//获取批量选择的数据
                multipleSelectionField:[],//
                searchDataSourceCode: '',
                searchDataSourceName: '',
                formLabelWidth: '160px',
                dialogTitle: '',
                adddialogTitle: '',
                addfielddialogTitle:'',
                value1: '',
                value2: '',
                valueconnection: '',
                valuetype: '',
                valueuse:'',
                databaseName: [],
                dataCatlogName:[],
                fieldtypes:[],
                rules: {
                    dataSourceCode: [
                        { required: true, message: '数据源代码不能为空', trigger: 'blur' }
                    ],
                    dataSourceName: [
                        { required: true, message: '数据源名称不能为空', trigger: 'blur' }
                    ],
                    connectionName: [
                        {type:'number',required:true,message:'请选择',trigger:'change'}
                    ]
                },
                addrules: {
                    dataSourceCode: [
                        { required: true, message: '数据源代码不能空', trigger: 'blur' },
                        { min: 2, max: 10, message: '长度在 2 到 10 个字符', trigger: 'blur' }
                    ],
                    dataSourceName: [
                        { required: true, message: '数据源名称不能为空', trigger: 'blur' },
                        { min: 2, max: 10, message: '长度在 2 到 10 个字符', trigger: 'blur' }
                    ],
                    //connectionId: [
                    //    { type:'number',required: true, message: '请选择数据库连接', trigger: 'change' }
                    //],
                    //dataSourceType: [
                    //    { required: true, message: '请选择数据源类型', trigger: 'change' }
                    //],
                    //dataSourceUse: [
                    //    { required: true, message: '请选择数据源用途', trigger: 'change' }
                    //],
                },
                addfieldrules: {
                    fieldCode: [
                        { required: true, message: '字段代码不能为空', trigger: 'blur' },
                        { min: 2, max: 10, message: '长度在 2 到 10 个字符', trigger: 'blur' }
                    ],
                    fieldName: [
                        { required: true, message: '字段名字不能为空', trigger: 'blur' },
                        { min: 2, max: 10, message: '长度在 2 到 10 个字符', trigger: 'blur' }
                    ],
                    fieldLength: [
                        { required: true, message: '字段长度不能为空' ,trigger: 'blur'},
                    ],
                },
                searchdataSourceType: [
                    {
                        value: '',
                        label: '请选择'
                    },    {
                    value: 'TABLE',
                    label: 'TABLE'
                },
                    {
                        value: 'VIEW',
                        label:'VIEW'
                    }
                ],
                fieldnullable: [
                    {
                        value: '',
                        label: '请选择'
                    }, {
                        value: '1',
                        label: '是'
                    },
                    {
                        value: '0',
                        label: '否'
                    }
                ],
                fieldkeyflag: [
                    {
                        value: '',
                        label: '请选择'
                    }, {
                        value: '1',
                        label: '是'
                    },
                    {
                        value: '0',
                        label: '否'
                    }
                ],
                fieldindexflag: [
                    {
                        value: '',
                        label: '请选择'
                    }, {
                        value: '1',
                        label: '是'
                    },
                    {
                        value: '0',
                        label: '否'
                    }
                ],
                dimflag: [
                    {
                        value: '',
                        label: '请选择'
                    }, {
                        value: '1',
                        label: '是'
                    },
                    {
                        value: '0',
                        label: '否'
                    }
                ],
                timestampflag:[
                    {
                        value: '',
                        label: '请选择'
                    }, {
                        value: '1',
                        label: '是'
                    },
                    {
                        value: '0',
                        label: '否'
                    }
                ],
                searchdataSourceUse: [
                    {
                        value: '',
                        label: '请选择'
                    },
                    {
                    value: 'SHARE',
                    label: 'SHARE'
                },
                {
                    value: 'COLLECTION',
                    label: 'COLLECTION'
                }
                ],
                dataSourceUse: [
                    {
                        value: '',
                        label: '请选择'
                    },
                    {
                        value: 'SHARE',
                        label: 'SHARE'
                    },
                    {
                        value: 'COLLECTION',
                        label: 'COLLECTION'
                    }
                ],
                dataSourceType: [
                    {
                        value: '',
                        label: '请选择'
                    }, {
                        value: 'TABLE',
                        label: 'TABLE'
                    },
                    {
                        value: 'VIEW',
                        label: 'VIEW'
                    }
                ],
                labelPosition: 'left',
                addlabelPosition: 'left',
                addfieldlabelPosition:'left',
                IsCreate: true,//是否新增字段信息
                form: {
                    dataSourceId:'',
                    dataSourceCode: '',
                    dataSourceName: '',
                    connectionId: '',
                    dataSourceType: '',
                    dataSourceUse: '',
                    dataCatlog:'',

                },
                addform: {
                    dataSourceCode: '',
                    dataSourceName: '',
                    connectionId: '',
                    dataCatlog:'',
                    dataSourceType: '',
                    dataSourceUse: '',
                },
                addfieldform: {
                    dataSourceId: '',
                    fieldCode:'',
                    fieldName: '',
                    fieldTypeId: '',
                    fieldNullable: '',
                    fieldKeyFlag: '',
                    fieldLength: '',
                    fieldIndexFlag: '',
                    fieldValue: '',
                    dimFlag: '',
                    timestampFlag: '',
                    dimTableName: '',
                    dimFieldCode: '',
                    dimFieldName: '',
                    oraSequenceCode: '',
                },
            }
        },
        methods: {
            search: function () {
                let vm = this;
                axios.get(`/api/SysDataSource/${vm.pageSize}/${vm.currentPage}?dataSourceCode=${vm.searchDataSourceCode}&dataSourceName=${vm.searchDataSourceName}&dataSourceType=${vm.value1}&dataSourceUse=${vm.value2}`)
                    .then(function (response) {
                        vm.data = response.data.content.data;
                        vm.total = response.data.content.total;
                    })
                    .catch(function (error) {
                        console.log(error)
                    });
            },
            searchField: function () {
                let vm = this;
                axios.get(`/api/SysDataSourceField/${vm.pageSizeField}/${vm.currentPageField}?dataSourceId=${dataSourceId}`)
                    .then(function (response) {
                        vm.dataField = response.data.content.data;
                        vm.totalField = response.data.content.total;
                    })
                    .catch(function (error) {
                        console.log(error)
                    });
            },
            handleClick(tab, event) {
                //console.log(tab, event);
            },
            adddialogCancel: function () {
                let vm = this;
                vm.addcenterDialogVisible = false
            },
            addfielddialogCancel: function () {
                this.addfieldcenterDialogVisible=false
            },
            getSelect: function () {
                let vm = this;
                axios.get('/api/sysdatasource/SelectConnection')
                    .then(function (response) {
                        vm.databaseName = response.data.content;
                        vm.databaseName.unshift({ connectionName: '请选择', connectionId:''});
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            getFieldType: function () {
                let vm = this;
                axios.get('/api/sysdatasourcefield/SelectFieldInfo')
                    .then(function (response) {
                        vm.fieldtypes = response.data.content;
                        vm.fieldtypes.unshift({ fieldTypeName: '请选择', fieldTypeId: '' });
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            getDcsDataCatalog: function () {
                let vm = this;
                axios.get('/api/SysDataSource/SelectDcsDataCatalog')
                    .then(function (response) {
                        console.log(response.data.content)
                        vm.dataCatlogName = response.data.content; 
                        vm.dataCatlogName.unshift({ dataCatalogName: '请选择', dataCatalogId: '' });
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            handleEdit: function (index, row) {
                //编辑
                let vm = this
                let rowstr = JSON.stringify(row)
                let formdata = JSON.parse(rowstr)
                vm.getSelect();
                vm.getDcsDataCatalog();
                vm.dialogTitle = "编辑数据源基础和字段信息"
                vm.form = formdata;
                dataSourceId = vm.form.dataSourceId;
                vm.searchField();
                vm.centerDialogVisible = true;
            },
            adddialogSave: function (formName) {
                let vm = this;
                this.$refs[formName].validate((valid) => {
                    if (valid) {
                        let url = "/api/SysDataSource";
                        let method = "POST";
                        axios({ url: url, method: method, data: vm.addform })
                            .then(function (response) {
                                if (!response.data.isSuccess) {
                                    vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                    return;
                                }
                                vm.$message({ title: '成功', message: response.data.message, type: 'success' })
                                vm.search();
                                vm.addcenterDialogVisible = false
                            })
                            .catch(function (error) {
                                vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                                console.log(error);
                            });

                    } else {
                        console.log('error submit!!');
                        return;
                    }
                });
            },
            addfielddialogSave: function (formName) {
                let vm = this;
                this.$refs[formName].validate((valid) => {
                    if (valid) {
                        let url = "/api/sysdatasourcefield";
                        let method = "POST";
                        if (vm.IsCreate != true) {
                            url = `/api/sysdatasourcefield/${vm.addfieldform.fieldId}`;
                            method = "PUT";
                        }
                        vm.addfieldform.dimFlag = vm.addfieldform.dimFlag == "否" ? 0 : 1;
                        vm.addfieldform.fieldIndexFlag = vm.addfieldform.fieldIndexFlag == "否" ? 0 : 1;
                        vm.addfieldform.fieldKeyFlag = vm.addfieldform.fieldKeyFlag == "否" ? 0 : 1;
                        vm.addfieldform.fieldNullable = vm.addfieldform.fieldNullable == "否" ? 0 : 1;
                        vm.addfieldform.timestampFlag = vm.addfieldform.timestampFlag == "否" ? 0 : 1;
                        axios({ url: url, method: method, data: vm.addfieldform })
                            .then(function (response) {
                                if (!response.data.isSuccess) {
                                    vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                    return;
                                }
                                vm.$message({ title: '成功', message: response.data.message, type: 'success' })
                                vm.searchField();
                                vm.addfieldcenterDialogVisible = false
                            })
                            .catch(function (error) {
                                vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                                console.log(error);
                            });

                    } else {
                        console.log('error submit!!');
                        return;
                    }
                });
            },
            dialogSave: function (formName) {
                //编辑
                let vm = this;
                this.$refs[formName].validate((valid) => {
                    if (valid) {
                        let url = `/api/SysDataSource/${vm.form.dataSourceId}`;
                        let method = "PUT";
                        axios({ url: url, method: method, data: vm.form })
                            .then(function (response) {
                                if (!response.data.isSuccess) {
                                    vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                    return;
                                }
                                vm.$message({ title: '成功', message: response.data.message, type: 'success' })
                                vm.search();
                                vm.centerDialogVisible = false
                            })
                            .catch(function (error) {
                                vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                                console.log(error);
                            });

                    } else {
                        console.log('error submit!!');
                        return;
                    }
                });
            },
            handleDelete: function (index, row) {
                let vm = this
                //删除
                //弹出确认框
                this.$confirm('此操作将删除该数据源信息, 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.delete('/api/SysDataSource/' + row.dataSourceId)
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                return;
                            }
                            vm.$message({ title: '成功', message: '删除成功', type: 'success' })
                            vm.search();
                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                            console.log(error);
                        });

                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
            },
            handleDeleteField: function (index, row) {
                let vm = this;
                this.$confirm('此操作将删除该字段信息, 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.delete('/api/SysDataSourceField/' + row.fieldId)
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                return;
                            }
                            vm.$message({ title: '成功', message: '删除成功', type: 'success' })
                            vm.searchField();
                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                            console.log(error);
                        });

                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
            },
            //编辑字段
            handleEditField: function (index,row) {
                let vm = this;
                vm.addfielddialogTitle = "修改字段信息";
                let rowstr = JSON.stringify(row);
                let formdata = JSON.parse(rowstr);
                vm.IsCreate = false
                formdata.fieldTypeId = parseInt(formdata.fieldTypeId);
                vm.getFieldType();
                vm.addfieldform = formdata;
                vm.addfieldform.dataSourceId = vm.form.dataSourceId;

                vm.addfieldcenterDialogVisible = true;
            },
            addfield: function () {
                let vm = this;
                vm.addfielddialogTitle = "新增字段";
                vm.IsCreate = true;
                vm.resetFieldForm();
                vm.getFieldType();
                vm.addfieldform.dataSourceId = vm.form.dataSourceId;
                vm.addfieldcenterDialogVisible = true;
            },
            //批量删除字段信息
            deletebatchfield: function () {
                let batchdatas = this.multipleSelectionField;
                let vm = this
                if (batchdatas.length == 0) {
                    vm.$message("请先选中数据再进行操作！");
                    return;
                }
                let ids = '';
                for (let i = 0; i < batchdatas.length; i++) {
                    ids += `&ids=${batchdatas[i].fieldId}`;
                };
                ids = ids.substring(1, ids.length)
                vm.$confirm(`此操作将删除${batchdatas.length}条数据源信息, 是否继续?`, '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.delete('/api/SysDataSourceField/DeleteDataSourceFields?' + ids)
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                return;
                            }
                            vm.$message({ title: '成功', message: '删除成功', type: 'success' })
                            vm.searchField();

                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                            console.log(error);
                        });

                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
            },
            canclefield: function () { },
            dataSourceAdd: function () {
                let vm = this;
                //添加
                vm.adddialogTitle = "添加数据源";
                vm.resetForm();
                vm.getSelect();
                vm.getDcsDataCatalog();
                vm.addcenterDialogVisible = true;
            },
            batchDelete(){
                let batchdatas = this.multipleSelection;
                let vm = this
                if (batchdatas.length == 0) {
                    vm.$message("请先选中数据再进行操作！");
                    return;
                }
                let ids = '';
                for (let i = 0; i < batchdatas.length; i++) {
                    ids += `&ids=${batchdatas[i].dataSourceId}`;
                };
                ids = ids.substring(1, ids.length)
                vm.$confirm(`此操作将删除${batchdatas.length}条数据源信息, 是否继续?`, '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.delete('/api/SysDataSource/DeleteDataSourceInfos?' + ids)
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                return;
                            }
                            vm.$message({ title: '成功', message: '删除成功', type: 'success' })
                            vm.search();
                            vm.centerDialogVisible = false
                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                            console.log(error);
                        });

                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
            },
            handleSizeChange(val) {
                this.pageSize = val;
                this.search();
            },
            handleSizeChangeField(val) {
                this.pageSizeField = val;
                this.searchField();
            },
            dialogCancel: function () {
                let vm = this;
                vm.centerDialogVisible = false
            },
            handleSelectionChange(val) {
                this.multipleSelection = val;

            },
            handleSelectionChangeField(val) {
                this.multipleSelectionField = val;
            },
            handleCurrentChange(val) {
                //当前页
                this.currentPage = val;
                this.search();
            },
            handleCurrentChangeField(val) {
                this.currentPageField = val;
                this.searchField();
            },
            resetForm() {
                let vm = this;
                vm.addform.dataSourceCode = '';
                vm.addform.dataSourceName= '';
                vm.addform.connectionId = '';
                vm.addform.dataSourceType = '';
                vm.addform.dataSourceUse = ''
                vm.addform.dataCatlog=''
            },
            resetFieldForm() {
                let vm = this;
                vm.addfieldform.fieldCode = '';
                vm.addfieldform.fieldName = '';
                vm.addfieldform.fieldTypeId = '';
                vm.addfieldform.fieldNullable = '';
                vm.addfieldform.fieldKeyFlag = '';
                vm.addfieldform.fieldLength = '';
                vm.addfieldform.fieldIndexFlag = '';
                vm.addfieldform.fieldValue = '';
                vm.addfieldform.dimFlag = '';
                vm.addfieldform.timestampFlag = '';
                vm.addfieldform.dimTableName = '';
                vm.addfieldform.dimFieldCode = '';
                vm.addfieldform.dimFieldName = '';
                vm.addfieldform.oraSequenceCode = '';
            }
        },
        mounted: function () {
            let vm = this;
            vm.search();
        }
    })
</script>
