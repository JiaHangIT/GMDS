

@{
    ViewData["Title"] = "ElemeIndex";
}

<style>
    .v-modal {
        display: none;
    }

    #app {
        margin-top: 15px;
        padding: 15px;
        background-color: #fff;
    }
</style>
<div id="app">

    <el-form :inline="true" class="demo-form-inline">
        <el-form-item label="维度类型名：">
            <el-input placeholder="维度类型名" v-model="searchDimTypeName"></el-input>
        </el-form-item>
        <el-form-item label="创建人：">
            <el-select v-model="searchCreation_By" placeholder="请选择">
                <el-option v-for="item in optCreationBy"
                           :key="item.userId"
                           :label="item.userName"
                           :value="item.userId"
                           :disabled="item.disabled">
                </el-option>
            </el-select>
        </el-form-item>
    </el-form>
    <el-form :inline="true" class="demo-form-inline">
        <el-form-item>
            <el-button size="small" type="primary" @@click="fetchList">查询</el-button>
        </el-form-item>
        <el-form-item>
            <el-button size="small" type="primary" @@click="handleAdd">添加</el-button>
        </el-form-item>
        <el-form-item>
            <el-button size="small" type="danger" @@click="batchDelete">批量删除</el-button>
        </el-form-item>
    </el-form>

    <el-table ref="multipleTable"
              :data="data"
              :border="true"
              tooltip-effect="dark"
              style="width: 100%"
              @@selection-change="handleSelectionChange">
        <el-table-column type="selection"
                         width="55">
        </el-table-column>
        <el-table-column label="维度类型编号"
                         prop="dimTypecode">
        </el-table-column>
        <el-table-column label="维度类型名称"
                         prop="messageTitle">
        </el-table-column>
        <el-table-column label="建立时间"
                         prop="creationDate">
        </el-table-column>
        <el-table-column label="操作">
            <template slot-scope="scope">
                <el-button size="mini"
                           v-on:click="handleEdit(scope.$index, scope.row)">编辑</el-button>

                <el-button size="mini"
                           type="danger"
                           v-on:click="handleDelete(scope.$index, scope.row)">删除</el-button>
            </template>
        </el-table-column>
    </el-table>
    <el-pagination @@size-change="handleSizeChange"
                   @@current-change="handleCurrentChange"
                   :current-page="currentPage"
                   :page-sizes="[10, 20, 30, 40]"
                   :page-size="pageSize"
                   layout="total, sizes, prev, pager, next, jumper"
                   :total="total">
    </el-pagination>
    <el-dialog :title="dialogTitle"
               :visible.sync="centerDialogVisible"
               width="30%"
               center>
        <el-form :label-position="labelPosition" label-width="160px" :model="form" :rules="rules" ref="form">

            <el-form-item label="维度类型名：" prop="messageTitle">
                <el-input placeholder="维度类型名" v-model="form.messageTitle"></el-input>
            </el-form-item>
        </el-form>
        <div slot="footer" class="dialog-footer">
            <el-button v-on:click="dialogCancel()">取 消</el-button>
            <el-button type="primary" v-on:click="dialogSave('form')">确 定</el-button>
        </div>
    </el-dialog>
</div>
<script>
    layui.use(['element', 'layer'], function () {
        var layer = layui.layer
        var form = layui.form;
        var $ = layui.$
    })
</script>
<script>
    new Vue({
        el: "#app",
        data: function () {
            return {
                data: [],
                centerDialogVisible: false,
                currentPage: 1,
                pageSize: 10,
                total: 0,
                multipleSelection: [],//获取批量选择的数据
                searchDimTypeName: '',
                searchCreation_By: '',
                optCreationBy: [],
                typeId:'',
                form: {
                    messageTitle: '',

                },
                rules: {
                    messageTitle: [
                        { required: true, message: '维度类型名不能为空', trigger: 'blur' },
                    ],

                },
                formLabelWidth: '160px',
                dialogTitle: '',
                labelPosition: 'left',
                IsCreate: true,//是否新增
            }
        },
        methods: {
            fetchList: function () {
                let vm = this
                axios.get(`/api/SysDimType/${vm.pageSize}/${vm.currentPage}?dimTypeName=${vm.searchDimTypeName}&createdBy=${vm.searchCreation_By}`)
                    .then(function (response) {
                        vm.data = response.data.content.data;
                        vm.total = response.data.content.total;
                    })
                    .catch(function (error) {
                        console.log(error)
                    });
            },
            handleEdit: function (index, row) {
                //编辑
                let vm = this
                let rowstr = JSON.stringify(row)
                let formdata = JSON.parse(rowstr)
                vm.IsCreate = false
                vm.dialogTitle = "编辑信息"
                console.log(formdata)
                vm.form = formdata;
                typeId= formdata.dimTypecode
                vm.centerDialogVisible = true
            },
            getSelCreateBy: function () {
                let vm = this;
                $.ajax({
                    url: "/api/SysMessageInfo/GetUser",
                    success: function (data) {
                        $.each(data, function (index, item) {
                            vm.optCreationBy = data;
                        });
                        vm.optCreationBy.unshift({ userName: '请选择', userId: '' });
                    }
                });
            },
            handleDelete: function (index, row) {
                let vm = this
                this.$confirm('此操作将删除该条信息, 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.delete('/api/SysDimType/' + row.dimTypecode)
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                return;
                            }
                            vm.$message({ title: '成功', message: '删除成功', type: 'success' })
                            vm.fetchList();
                            vm.centerDialogVisible = false
                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                            console.log(error);
                        });

                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });

            },
            handleAdd: function () {
                let vm = this
                vm.IsCreate = true
                vm.resetForm();
                vm.dialogTitle = "添加信息"
                vm.centerDialogVisible = true
            },
            dialogCancel: function () {
                let vm = this;

                vm.centerDialogVisible = false
            },
            dialogSave: function (formName) {
                let vm = this;
                let model = "";
                vm.$refs[formName].validate((valid) => {
                    if (valid) {
                        console.log(vm.form.dimTypecode);
                        model = {
                            Dim_Type_Name: vm.form.messageTitle,
                            Dim_Type_Code: vm.form.dimTypecode,
                        };
                        let url = "/api/SysDimType/add";
                        let method = "POST";
                        if (vm.IsCreate != true) {
                            url = `/api/SysDimType/${typeId}`;
                            method = "PUT";
                        }
                        axios({ url: url, method: method,data: model })
                            .then(function (response) {
                                if (!response.data.isSuccess) {
                                    vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                    return;
                                }
                                vm.$message({ title: '成功', message: response.data.message, type: 'success' })
                                vm.fetchList();
                                vm.centerDialogVisible = false
                            })
                            .catch(function (error) {
                                vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                                console.log(error);
                            });

                    } else {
                        console.log('error submit!!');
                        return;
                    }
                });
            },
            resetForm() {
                let vm = this;
                vm.form.messageTitle = ''

            },
            handleSizeChange(val) {
                this.pageSize = val;
                this.fetchList();
            },
            handleCurrentChange(val) {
                this.currentPage = val;
                this.fetchList();
            },

            handleSelectionChange(val) {
                this.multipleSelection = val;

            },

            batchDelete() {
                let vm = this;
                let batchdatas = this.multipleSelection;
                if (batchdatas.length == 0) {
                    vm.$message("请先选中数据再进行操作！");
                    return;
                }
                let ids = '';
                for (let i = 0; i < batchdatas.length; i++) {
                    ids += `&ids=${batchdatas[i].dimTypecode}`;
                };
                ids = ids.substring(1, ids.length)
                console.log(ids);
                vm.$confirm(`此操作将删除${batchdatas.length}条维度信息, 是否继续?`, '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    //axios.delete('/api/SysDimInfo/batchdelete?' + ids)
                    axios({ url: '/api/SysDimType/batchdelete?' + ids, headers: { 'Content-Type':'application/json'},method:'delete'})
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                return;
                            }
                            vm.$message({ title: '成功', message: '删除成功', type: 'success' })
                            vm.fetchList();
                            vm.centerDialogVisible = false
                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                            console.log(error);
                        });

                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
                console.log(this.multipleSelection);
            }
        },
        mounted: function () {
            let vm = this
            vm.fetchList();
            vm.getSelCreateBy();
        }

    });
</script>






