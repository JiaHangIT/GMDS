
@{
    ViewData["Title"] = "Index";
}


<style>
    .v-modal {
        display: none;
    }

    #app {
        margin-top: 15px;
        padding: 15px;
        background-color: #fff;
    }
    .customWidth {
        width: 90%;
    }

    .abow_dialog {
        display: flex;
        justify-content: center;
        align-items: Center;
        overflow: hidden;
    
    }
        .abow_dialog .el-dialog {
            margin: 0 auto !important;
            height: 90%;
            overflow: auto;
        }

            .abow_dialog .el-dialog.el-dialog__body {
                position: absolute;
                left: 0;
                top: 54px;
                bottom: 0;
                right: 0;
                padding: 0;
                z-index: 1;
                overflow: hidden;
                overflow-y: auto;
            }
</style>
<div id="app">
    <el-form :inline="true" class="demo-form-inline">
        <el-form-item label="调度任务代码">
            <el-input placeholder="调度任务代码" v-model="searchForm.Job_Code"></el-input>
        </el-form-item>
        <el-form-item label="调度任务名称">
            <el-input placeholder="调度任务名称" v-model="searchForm.Job_NAME"></el-input>
        </el-form-item>
        <el-form-item label="调度类型">
            <el-select v-model="searchForm.Job_TYPE">
                <el-option v-for="item in SchedulingMode" v-key="item.key" :label="item.value" :value="item.key"></el-option>
            </el-select>
            @*<el-input placeholder="调度类型" v-model="searchForm.Job_TYPE"></el-input>*@
        </el-form-item>
    </el-form>
    <el-form :inline="true" class="demo-form-inline">
        <el-form-item>
            <el-button type="primary" @@click="fetchList">查询</el-button>
        </el-form-item>
        <el-form-item>
            <el-button type="primary" @@click="handleAdd">添加</el-button>
        </el-form-item>
        <el-form-item>
            <el-button type="danger" @@click="batchDelete">批量删除</el-button>
        </el-form-item>
    </el-form>

    <el-table ref="multipleTable"
              :data="data"
              :border="true"
              v-loading="loading"
              tooltip-effect="dark"
              style="width: 100%"
              @@selection-change="handleSelectionChange">
        <el-table-column type="selection"
                         width="55">
        </el-table-column>
        <el-table-column label="调度任务代码"
                         prop="jobCode">
        </el-table-column>
        <el-table-column label="调度任务名称"
                         prop="jobName">
        </el-table-column>
        <el-table-column label="调度任务类型"
                         prop="jobType">
            <template slot-scope="scope">
                <p v-if="scope.row.jobType==='0'">手动调度</p>
                <p v-else-if="scope.row.jobType==='1'">调度一次</p>
                <p v-else-if="scope.row.jobType==='2'">循环调度</p>
            </template>
        </el-table-column>
        <el-table-column label="是否有效"
                         prop="enableFlag">
            <template slot-scope="scope">
                <p v-if="scope.row.enableFlag===0">否</p>
                <p v-else-if="scope.row.enableFlag===1">是</p>
            </template>
        </el-table-column>

        <el-table-column label="操作">
            <template slot-scope="scope">
                <el-button size="mini"
                           v-on:click="handleEdit(scope.$index, scope.row)">编辑</el-button>
                <el-button size="mini"
                           type="danger"
                           v-on:click="handleDelete(scope.$index, scope.row)">删除</el-button>
            </template>
        </el-table-column>
    </el-table>


    <el-pagination @@size-change="handleSizeChange"
                   @@current-change="handleCurrentChange"
                   :current-page="searchForm.pageNum"
                   :page-sizes="[10, 20, 30, 40]"
                   :page-size="searchForm.pageSize"
                   layout="total, sizes, prev, pager, next, jumper"
                   :total="total">
    </el-pagination>

    <el-dialog :title="dialogTitle"
               :visible.sync="centerDialogVisible"
               customClass="customWidth"
               class="abow_dialog"
               center>
        <el-form :label-position="labelPosition" :inline="true" class="demo-form-inline" :model="form" :rules="rules" ref="form">
            <el-row>
                <el-form-item label="调度代码" prop="JobCode">
                    <el-input v-model="form.jobCode" suffix-icon="el-icon-edit-outline"></el-input>
                </el-form-item>
                <el-form-item label="调度名称" prop="JobName">
                    <el-input v-model="form.jobName" suffix-icon="el-icon-edit-outline"></el-input>
                </el-form-item>
            </el-row>
            <el-row>
                <el-form-item label="调度方式" prop="JobType">
                    <el-select v-model="form.jobType" @@change="schedulingchange">
                        <el-option v-for="item in SchedulingMode"
                                   v-key="item.key"
                                   :label="item.value"
                                   :value="item.key"></el-option>
                    </el-select>
                </el-form-item>
                <el-form-item label="是否启用" prop="EnableFlag">
                    <el-select v-model="form.enableFlag">
                        <el-option v-for="item in Start"
                                   v-key="item.key"
                                   :label="item.value"
                                   :value="item.key"></el-option>
                    </el-select>
                </el-form-item>
            </el-row>
            <el-row>
                <el-label>调度说明</el-label>
            </el-row>
            <el-row>
                <el-input type="textarea"
                          v-rows="2"
                          placeholder="请输入内容"
                          style="width:70%"
                          v-model="form.jobDesc"></el-input>
            </el-row>

            <template v-if="SchedulingOnce">
                <el-row style="margin-top:25px">
                    <el-label>调度一次</el-label>
                </el-row>
                <el-row>
                    
                    <el-form-item label="日期时间" prop="OneTimesDate">
                        <el-date-picker v-model="form.oneTimesDate"
                                        type="date"
                                        placeholder="选择日期">
                        </el-date-picker>
                    </el-form-item>
                </el-row>
            </template>
            <template v-if="SchedulingManual">

            </template>
            <template v-if="SchedulingCircle">
                <el-row style="margin-top:25px">
                    <el-label>频率</el-label>
                </el-row>
                <el-form-item label="执行" prop="" style="margin:0 30px 0 30px">
                    <el-select v-model="form.cycleFrequeceType" @@change="ratechange">
                        <el-option v-for="item in Rate"
                                   v-key="item"
                                   :label="item"
                                   :value="item"></el-option>
                    </el-select>
                </el-form-item>
                <div v-if="EveryWeek">
                    <el-form-item label="执行日" prop="" style="margin-left:32px">
                        <el-checkbox-group v-model="CheckedExecDay">
                            <el-checkbox v-for="item in ExecDay"
                                         v-value="item.key"
                                         :label="item.value"
                                         :key="item.key"
                                         v-model="item.checked">
                            </el-checkbox>
                        </el-checkbox-group>
                    </el-form-item>
                </div>
              
                <div v-if="EveryMonth">
                    
                    <el-row v-if="EveryMonthOnce" style="margin-left:43px">
                        <el-form-item label="第">
                            <el-input v-model="form.cycleMonthDaytimes" :disabled="EveryMonthOnceChecked" suffix-icon="el-icon-edit-outline" ></el-input>
                        </el-form-item>
                        <el-label>@*天（写整数，多项用"，"分开，如：1，2，3）*@</el-label>
                        <el-form-item label="天（写整数，多项用'，'分开，如：1，2，3）">
                            <el-radio v-model="EveryMonthChecked" label="1" @@change="everymonthradiochange">&nbsp;</el-radio>
                        </el-form-item>

                    </el-row>
                    <el-row v-if="EveryMonthGap">
                        <el-form-item label="执行间隔">
                            <el-select v-model="form.cycleMonthWeekType" :disabled="EveryMonthGapChecked">
                                <el-option v-for="item in Ths"
                                           v-key="item.key"
                                           :label="item.value"
                                           :value="item.key">

                                </el-option>
                            </el-select>
                        </el-form-item>
                        <el-form-item>
                            <el-select v-model="form.cycleMonthWeekNumber" :disabled="EveryMonthGapChecked">
                                <el-option v-for="item in ExecDay"
                                           v-key="item.key"
                                           :label="item.value"
                                           :value="item.key">
                                </el-option>
                            </el-select>
                        </el-form-item>
                        <el-form-item>
                            <el-radio v-model="EveryMonthChecked" label="2" @@change="everymonthradiochange">&nbsp;</el-radio>
                        </el-form-item>
                    </el-row>
                </div>
          

                <div v-if="EveryDay">
                    <el-row style="margin-top:25px">
                        <el-label>每天频率</el-label>
                    </el-row>
                    <el-row v-if="EveryDayOnce">
                        <el-form-item label="执行一次">
                            <el-time-picker v-model="form.cycleDayOnetimesTime"
                                            :disabled="EveryDayOnceChecked"
                                            placeholder="任意时间点">
                            </el-time-picker>
                        </el-form-item>
                        <el-form-item>
                            <el-radio v-model="EveryDayChecked" label="1" @@change="radiochange">&nbsp;</el-radio>
                        </el-form-item>

                    </el-row>
                    <el-row v-if="EveryDayGap">
                        <el-form-item label="执行间隔">
                            <el-input v-model="form.cycleDayFrequeceType" :disabled="EveryDayGapChecked" suffix-icon="el-icon-edit-outline"></el-input>
                        </el-form-item>
                        <el-form-item>
                            <el-radio v-model="EveryDayChecked" label="2" @@change="radiochange">&nbsp;</el-radio>
                        </el-form-item>
                        <el-form-item>
                            <el-select v-model="form.cycleDayIntervalType" :disabled="EveryDayGapChecked">
                                <el-option v-for="execute in ExecuteGap" :label="execute" :value="execute"></el-option>
                            </el-select>
                        </el-form-item>
                    </el-row>
                </div>

                <el-row style="margin-top:25px">
                    <el-label>持续时间</el-label>
                </el-row>
                <el-row>
                    <el-form-item label="执行开始">
                        <el-date-picker v-model="form.cycleStartDate"
                                        type="date"
                                        placeholder="选择日期">
                        </el-date-picker>
                    </el-form-item>

                    <el-form-item label="执行结束" style="margin-left:10px">
                        <el-date-picker v-model="form.cycleEndDate"
                                        type="date"
                                        placeholder="选择日期"
                                        suffix-icon="el-icon-edit-outline">
                        </el-date-picker>
                    </el-form-item>

                </el-row>
            </template>
        </el-form>
        <div slot="footer" class="dialog-footer">
            <el-button v-on:click="dialogCancel()">取 消</el-button>
            <el-button type="primary" v-on:click="dialogSave('form')">确 定</el-button>
        </div>
    </el-dialog>


</div>
<script>
    layui.use(['element', 'layer'], function () {
        var layer = layui.layer
        var form = layui.form;
        var $ = layui.$
    })
</script>
<script>

    new Vue({
        el: "#app",
        data: function () {
            return {
                data: [],
                loading: true,
                SchedulingOnce: false,           //调度方式（调度一次）
                SchedulingManual: false,         //调度方式（手动调度）
                SchedulingCircle: false,         //高度方式（循环调度）
                EveryDay: false,                 //执行频率 每天
                EveryDayChecked:'1',             //每天的radio
                EveryDayOnce: true,             //每天频率的方式（一次）
                EveryDayOnceChecked: false,        //每天频率的方式（一次）是否可编辑
                EveryDayGap: true,              //每天频率的方式（间隔）
                EveryDayGapChecked: false,         //每天频率的方式（间隔）是否可编辑
                EveryWeek: false,                //执行频率  每周
                EveryMonthChecked: '1',           //每月的radio
                EveryMonth: false,               //执行频率  每月 
                EveryMonthOnce: true,             //每月频率的方式（一次）
                EveryMonthOnceChecked: false,             //每月频率的方式（一次）可编辑
                EveryMonthGap: true,              //每月频率的方式（间隔）
                EveryMonthGapChecked: false,              //每月频率的方式（间隔）可编辑
                centerDialogVisible: false,

                total: 0,
                multipleSelection: [],//获取批量选择的数据

                SchedulingMode: [{ key: '0', value: '手动调度' }, { key: '1', value: '调度一次' }, { key: '2', value: '循环调度' } ],
                Start: [{ key: 0, value: '否' }, { key: 1, value: '是' }],
                Rate: ['每天', '每周', '每月'],
                ExecuteGap:['分钟','小时'],//执行间隔单位
                Ths: [{ key: '1', value: '第一个' },
                    { key: '2', value: '第二个' },
                    { key: '3', value: '第三个' },
                    { key: '4', value: '第四个' },],
                CheckedExecDay: [],
                ExecDay: [{ key: 1, value: '周一' },
                    { key: 2, value: '周二' },
                    { key: 3, value: '周三' },
                    { key: 4, value: '周四' },
                    { key: 5, value: '周五' },
                    { key: 6, value: '周六' },
                    { key: 7, value: '周天' },],

                form: {
                    createdBy: '',
                    creationDate: null,
                    cycleDayFrequeceType: '',
                    cycleDayIntervalNumber: null,
                    cycleDayIntervalType: '',
                    cycleDayOnetimesTime: '',
                    cycleEndDate: null,
                    cycleFrequeceType: '',
                    cycleMonthDaytimes: '',
                    cycleMonthFrequeceType: '',
                    cycleMonthIntervalNumber: null,
                    cycleMonthIntervalType: '',
                    cycleMonthOnetimesTime: '',
                    cycleMonthType: '',
                    cycleMonthWeekNumber: '',
                    cycleMonthWeekType: '',
                    cycleStartDate: null,
                    cycleWeekEnabledFri: '',
                    cycleWeekEnabledMon: '',
                    cycleWeekEnabledSat: '',
                    cycleWeekEnabledSun: '',
                    cycleWeekEnabledThu: '',
                    cycleWeekEnabledTue: '',
                    cycleWeekEnabledWed: '',
                    cycleWeekFrequeceType: '',
                    cycleWeekIntervalNumber: null,
                    cycleWeekIntervalType: '',
                    cycleWeekOnetimesTime: '',
                    deleteBy: '',
                    deleteDate: null,
                    deleteFlag: 0,
                    enableFlag: 0,
                    jobCode: '',
                    jobDesc: '',
                    jobId: '',
                    jobLastRuntime: null,
                    jobName: '',
                    jobType: '',
                    lastUpdateDate: null,
                    lastUpdatedBy: '',
                    onetimesDate: null,
                },
                searchForm: {
                    pageNum: 1,
                    pageSize: 10,
                    Job_Code: '',
                    Job_NAME: '',
                    Job_TYPE: ''
                },
                rules: {
                    serviceGroupCode: [
                        { required: true, message: '编号不能为空', trigger: 'blur' },
                        { min: 2, max: 10, message: '长度在 2 到 10 个字符', trigger: 'blur' }
                    ],
                    serviceGroupName: [
                        { required: true, message: '名字不能为空', trigger: 'blur' },
                        { min: 2, max: 10, message: '长度在 2 到 10 个字符', trigger: 'blur' }
                    ]


                },
                formLabelWidth: '160px',
                dialogTitle: '',
                labelPosition: 'left',
                IsCreate: true,//是否新增
            }
        },
        methods: {
            fetchList: function () {
                let vm = this
                vm.loading = true
                axios({ url: `/api/SysJobInfo/Search1`, method: 'post', async: false, data: vm.searchForm })
                    .then(function (response) {
                        vm.data = response.data.content.data;
                        vm.total = response.data.content.total;
                        vm.loading = false
                    })
                    .catch(function (error) {
                        vm.loading = false
                        console.log(error)
                    });

            },

            schedulingchange: function () {
                //调度方式选择事件
                let vm = this;
                let schedulingmode = vm.form.jobType;
                try {
                    if (schedulingmode) {
                        switch (schedulingmode) {
                            case '1':
                                vm.SchedulingOnce = true;
                                vm.SchedulingCircle = false;
                                break;
                            case '0':
                                vm.SchedulingOnce = false;
                                vm.SchedulingCircle = false;
                                break;
                            case '2':
                                vm.SchedulingCircle = true;
                                vm.SchedulingOnce = false;
                                break;
                            default:
                                break;
                        }
                    }
                } catch (e) {
                    console.log(e);
                }
            },

            ratechange: function () {
                //频率选择事件
                let vm = this;
                vm.EveryDay = true;
                vm.EveryWeek = false;
                vm.EveryMonth = false;
                let ratevalue = vm.form.cycleFrequeceType;
                try {
                    switch (ratevalue) {
                        case '每天':
                            vm.EveryDay = true;
                            break;
                        case '每周':
                            vm.EveryWeek = true;
                            break;
                        case '每月':
                            vm.EveryMonth = true;
                            break;
                        default:
                    }
                } catch (e) {
                    console.log(e);
                }
            },

            radiochange: function () {
                //每日频率内的radio点击事件
                let vm = this;
                let checkedvalue = vm.EveryDayChecked;

                vm.EveryDayOnceChecked = false;
                vm.EveryDayGapChecked = false;
                try {
                    switch (checkedvalue) {
                        case '1':
                            vm.EveryDayGapChecked = true;
                            break;
                        case '2':
                            vm.EveryDayOnceChecked = true;
                            break;
                        default:
                    }
                } catch (e) {
                    vm.$message({ title: '异常', message: e, type: 'error' })
                }
                
            },

            everymonthradiochange: function () {
                //每月频率内的radio点击事件
                let vm = this;
                let checkedvalue = vm.EveryMonthChecked;

                vm.EveryMonthOnceChecked = false;
                vm.EveryMonthGapChecked = false;
                try {
                    switch (checkedvalue) {
                        case '1':
                            vm.EveryMonthGapChecked = true;
                            break;
                        case '2':
                            vm.EveryMonthOnceChecked = true;
                            break;
                        default:
                    }
                } catch (e) {
                    vm.$message({ title: '异常', message: e, type: 'error' })
                }
            },

            handleEdit: function (index, row) {
                //编辑
                let vm = this
                let rowstr = JSON.stringify(row)
                let formdata = JSON.parse(rowstr)
                vm.IsCreate = false
                vm.dialogTitle = "编辑调度信息"
                vm.form = formdata;
                vm.CheckedExecDay =
                    [this.isvalue(vm.form.cycleWeekEnabledMon) == true ? '周一' : '',
                    this.isvalue(vm.form.cycleWeekEnabledTue) == true ? '周二' : '',
                    this.isvalue(vm.form.cycleWeekEnabledWed) == true ? '周三' : '',
                    this.isvalue(vm.form.cycleWeekEnabledThu) == true ? '周四' : '',
                    this.isvalue(vm.form.cycleWeekEnabledFri) == true ? '周五' : '',
                    this.isvalue(vm.form.cycleWeekEnabledSat) == true ? '周六' : '',
                    this.isvalue(vm.form.cycleWeekEnabledSun) == true ? '周天' : ''];
                


                //根据调度方式展开（一）
                vm.schedulingchange();
                vm.ratechange();


                vm.radiochange();
                vm.everymonthradiochange();
                
                console.log(formdata);

                vm.centerDialogVisible = true
            },

            isvalue(obj) {
                if (obj != null && obj != '' && obj != undefined) {
                    return true;
                }
                return false;
            },

            handleDelete: function (index, row) {
                let vm = this
                //删除

                //弹出确认框

                this.$confirm('此操作将删除该调度信息, 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.delete('/api/SysJobInfo/' + row.jobId)
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                return;
                            }
                            vm.$message({ title: '成功', message: '删除成功', type: 'success' })
                            vm.fetchList();
                            vm.centerDialogVisible = false
                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                            console.log(error);
                        });

                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });

            },

            handleAdd: function () {
                let vm = this;
                vm.IsCreate = true;
                vm.resetForm();
                vm.dialogTitle = "添加调度信息";
                vm.EveryDayChecked = '1';
                vm.radiochange();
                vm.EveryMonthChecked = '1';
                vm.everymonthradiochange();
                vm.centerDialogVisible = true;
                
                //添加
            },

            dialogCancel: function () {
                let vm = this;

                vm.centerDialogVisible = false
            },

            dialogSave: function (formName) {
                let vm = this;
                vm.$refs[formName].validate((valid) => {
                    if (valid) {
                        let url = "/api/SysJobInfo/add";
                        let method = "POST";
                        if (vm.IsCreate != true) {
                            url = `/api/SysJobInfo/${vm.form.jobId}`;
                            method = "PUT";
                        }

                        @* CycleWeekEnabledMon
                        CycleWeekEnabledTue
                        CycleWeekEnabledWed
                        CycleWeekEnabledThu
                        CycleWeekEnabledFri
                        CycleWeekEnabledSat
                        CycleWeekEnabledSun *@

                        let checkeddays = vm.CheckedExecDay;
                        if (vm.CheckedExecDay.length > 0) {
                            vm.form.cycleWeekEnabledMon = '';
                            vm.form.cycleWeekEnabledTue = '';
                            vm.form.cycleWeekEnabledWed = '';
                            vm.form.cycleWeekEnabledThu = '';
                            vm.form.cycleWeekEnabledFri = '';
                            vm.form.cycleWeekEnabledSat = '';
                            vm.form.cycleWeekEnabledSun = '';
                            $.each(vm.CheckedExecDay, function (index, item) {
                                switch (item) {
                                    case '周一':
                                        vm.form.cycleWeekEnabledMon = '1';
                                        break;
                                    case '周二':
                                        vm.form.cycleWeekEnabledTue = '2';
                                        break;
                                    case '周三':
                                        vm.form.cycleWeekEnabledWed = '3';
                                        break;
                                    case '周四':
                                        vm.form.cycleWeekEnabledThu = '4';
                                        break;
                                    case '周五':
                                        vm.form.cycleWeekEnabledFri = '5';
                                        break;
                                    case '周六':
                                        vm.form.cycleWeekEnabledSat = '6';
                                        break;
                                    case '周天':
                                        vm.form.cycleWeekEnabledSun = '7';
                                        break;
                                    default:
                                }
                            })
                        }


                        console.log(checkeddays)
                        console.log(vm.form);
                        axios({ url: url, method: method, data: vm.form })
                            .then(function (response) {
                                if (!response.data.isSuccess) {
                                    vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                    return;
                                }
                                vm.$message({ title: '成功', message: response.data.message, type: 'success' })
                                vm.fetchList();
                                vm.centerDialogVisible = false
                            })
                            .catch(function (error) {
                                vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                                console.log(error);
                            });

                    } else {
                        console.log('error submit!!');
                        return;
                    }
                });
                
            },
            resetForm() {
                let vm = this;
                vm.CheckedExecDay = [];

                vm.SchedulingOnce = false;           //调度方式（调度一次）
                vm.SchedulingManual = false;         //调度方式（手动调度）
                vm.SchedulingCircle = false;         //高度方式（循环调度）
                vm.EveryDay = false;                 //执行频率 每天
                vm.EveryDayChecked = '';             //每天的radio
                vm.EveryDayOnce = true;             //每天频率的方式（一次）
                vm.EveryDayOnceChecked = false;        //每天频率的方式（一次）是否可编辑
                vm.EveryDayGap = true;              //每天频率的方式（间隔）
                vm.EveryDayGapChecked = false;         //每天频率的方式（间隔）是否可编辑
                vm.EveryWeek = false;                //执行频率  每周
                vm.EveryMonthChecked = '';           //每月的radio
                vm.EveryMonth = false;               //执行频率  每月 
                vm.EveryMonthOnce = true;             //每月频率的方式（一次）
                vm.EveryMonthOnceChecked = false;             //每月频率的方式（一次）可编辑
                vm.EveryMonthGap = true;              //每月频率的方式（间隔）
                vm.EveryMonthGapChecked = false;              //每月频率的方式（间隔）可编辑

                vm.form.createdBy = '';
                vm.form.creationDate = null;
                vm.form.cycleDayFrequeceType = '';
                vm.form.cycleDayIntervalNumber = null;
                vm.form.cycleDayIntervalType = '';
                vm.form.cycleDayOnetimesTime = '';
                vm.form.cycleEndDate = null;
                vm.form.cycleFrequeceType = '';
                vm.form.cycleMonthDaytimes = '';
                vm.form.cycleMonthFrequeceType = '';
                vm.form.cycleMonthIntervalNumber = null;
                vm.form.cycleMonthIntervalType = '';
                vm.form.cycleMonthOnetimesTime = '';
                vm.form.cycleMonthType = '';
                vm.form.cycleMonthWeekNumber = '';
                vm.form.cycleMonthWeekType = '';
                vm.form.cycleStartDate = null;
                vm.form.cycleWeekEnabledFri = '';
                vm.form.cycleWeekEnabledMon = '';
                vm.form.cycleWeekEnabledSat = '';
                vm.form.cycleWeekEnabledSun = '';
                vm.form.cycleWeekEnabledThu = '';
                vm.form.cycleWeekEnabledTue = '';
                vm.form.cycleWeekEnabledWed = '';
                vm.form.cycleWeekFrequeceType = '';
                vm.form.cycleWeekIntervalNumber = null;
                vm.form.cycleWeekIntervalType = '';
                vm.form.cycleWeekOnetimesTime = '';
                vm.form.deleteBy = '';
                vm.form.deleteDate = null;
                vm.form.deleteFlag = 0;
                vm.form.enableFlag = 0;
                vm.form.jobCode = '';
                vm.form.jobDesc = '';
                vm.form.jobId = '';
                vm.form.jobLastRuntime = null;
                vm.form.jobName = '';
                vm.form.jobType = '';
                vm.form.lastUpdateDate = null;
                vm.form.lastUpdatedBy = '';
                vm.form.onetimesDate = null;

            },
            handleSizeChange(val) {
                console.log(`每页 ${val} 条`);
                this.searchForm.pageSize = val;
                this.fetchList();
            },
            handleCurrentChange(val) {
                this.searchForm.pageNum = val;
                this.fetchList();
            },
            toggleSelection(rows) {
                if (rows) {
                    rows.forEach(row => {
                        this.$refs.multipleTable.toggleRowSelection(row);
                    });
                } else {
                    this.$refs.multipleTable.clearSelection();
                }
            },
            handleSelectionChange(val) {
                this.multipleSelection = val;

            },
            batchDelete() {
                let batchdatas = this.multipleSelection;
                if (batchdatas.length == 0) {
                    return;
                }
                let ids = '';
                for (let i = 0; i < batchdatas.length; i++) {
                    ids += `&ids=${batchdatas[i].jobId}`;
                };
                ids = ids.substring(1, ids.length)
                let vm = this
                vm.$confirm(`此操作将删除${batchdatas.length}条调度信息, 是否继续?`, '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.delete('/api/SysJobInfo/BatchDelete?' + ids)
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                return;
                            }
                            vm.$message({ title: '成功', message: '删除成功', type: 'success' })
                            vm.fetchList();
                            vm.centerDialogVisible = false
                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                            console.log(error);
                        });

                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
            }
        },
        mounted: function () {
            let vm = this
            vm.fetchList();
        }

    });
</script>