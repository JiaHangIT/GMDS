
@{
    ViewData["Title"] = "系统公告";
}


<style>
    .v-modal {
        display: none;
    }

    #app {
        margin-top: 15px;
        padding: 15px;
        background-color: #fff;
    }
</style>


<script src="~/ueditor-1.4.3.3/ueditor.config.js"></script>
<script src="~/ueditor-1.4.3.3/ueditor.all.min.js"></script>

<div id="app">

    <el-form :inline="true" class="demo-form-inline">
        <el-form-item label="公告名称">
            <el-input placeholder="公告名称" v-model="searchTitle"></el-input>
        </el-form-item>
        <el-form-item label="建立人">
            <el-input placeholder="建立人" v-model="searchCreationBy"></el-input>
        </el-form-item>
        <el-form-item label="是否通过审核">
            <el-select v-model:value="searchAuditFlag">
                <el-option v-for="item in Flag"
                           :key="item.key"
                           :label="item.value"
                           :value="item.key">
                </el-option>
            </el-select>

        </el-form-item>
    </el-form>
    <el-form :inline="true" class="demo-form-inline">
        <el-form-item>
            <el-button type="primary" @@click="fetchList">查询</el-button>
        </el-form-item>
        <el-form-item>
            <el-button type="primary" @@click="handleAdd">添加</el-button>
        </el-form-item>
        <el-form-item>
            <el-button type="danger" @@click="batchDelete">批量删除</el-button>
        </el-form-item>
    </el-form>

    <el-table ref="multipleTable"
              :data="data"
              :border="true"
              v-loading="loading"
              tooltip-effect="dark"
              style="width: 100%"
              @@selection-change="handleSelectionChange">
        <el-table-column type="selection"
                         width="55">
        </el-table-column>
        <el-table-column label="公告名称"
                         prop="messageTitle">
        </el-table-column>
        <el-table-column label="是否重要"
                         prop="importantFlag">
            <template slot-scope="scope">
                <p>{{scope.row.importantFlag===1?'是':'否'}}</p>
            </template>
        </el-table-column>
        <el-table-column label="是否审核"
                         prop="auditFlag">
            <template slot-scope="scope">
                <p v-if="scope.row.auditFlag===null">
                    未审核
                </p>
                <p v-else-if="scope.row.auditFlag===0">
                    审核未通过
                </p>
                <p v-else-if="scope.row.auditFlag===1">
                    审核通过
                </p>
            </template>
        </el-table-column>
        <el-table-column label="审核时间"
                         prop="auditedDate">
        </el-table-column>
        <el-table-column label="审核人"
                         prop="auditedBy">
        </el-table-column>
        <el-table-column label="建立时间"
                         prop="creationDate">
        </el-table-column>
        <el-table-column label="建立人"
                         prop="createdBy">
        </el-table-column>
        <el-table-column label="操作"
                         min-width="120%">

            <template slot-scope="scope">
                <el-button size="mini"
                           type="primary"
                           v-on:click="handleAudit(scope.$index,scope.row)">审核</el-button>
                <el-button size="mini"
                           v-on:click="handleEdit(scope.$index, scope.row)">编辑</el-button>
                <el-button size="mini"
                           type="danger"
                           v-on:click="handleDelete(scope.$index, scope.row)">删除</el-button>
            </template>
        </el-table-column>
    </el-table>


    <el-pagination @@size-change="handleSizeChange"
                   @@current-change="handleCurrentChange"
                   :current-page="pageNum"
                   :page-sizes="[10, 20, 30, 40]"
                   :page-size="pageSize"
                   layout="total, sizes, prev, pager, next, jumper"
                   :total="total">
    </el-pagination>

    <el-dialog :title="dialogTitle"
               :visible.sync="centerDialogVisible"
               width="50%"
               center>
        <el-form :label-position="labelPosition" label-width="160px" :model="form" :rules="rules" ref="form">
            <el-form-item label="公告名称" prop="messageTitle">
                <el-input v-model="form.messageTitle"></el-input>
            </el-form-item>
            <el-form-item label="是否重要" prop="importantFlag">
                <el-select v-model:value="importantFlag">
                    <el-option v-for="item in Flag"
                               :key="item.key"
                               :label="item.value"
                               :value="item.key">
                    </el-option>
                </el-select>

            </el-form-item>
        </el-form>
        <template>
            <script id="editor" type="text/plain" name="gdesc" style="width:100%;height:200px;">
            </script>
        </template>


        <div slot="footer" class="dialog-footer">
            <el-button v-on:click="dialogCancel()">取 消</el-button>
            <el-button type="primary" v-on:click="dialogSave('form')">确 定</el-button>
        </div>
    </el-dialog>

</div>

<script>
    layui.use(['element', 'layer'], function () {
        var layer = layui.layer
        var form = layui.form;
        var $ = layui.$
    })
</script>


<script>

    new Vue({
        el: "#app",
        data: function () {
            return {
                loading: true,
                data: [],
                imageUrl: [],
                centerDialogVisible: false,
                pageNum: 1,
                pageSize: 10,
                total: 0,
                multipleSelection: [],//获取批量选择的数据
                searchTitle: '',
                searchCreationBy: '',
                searchAuditFlag: [{ key: 1, value: '是' }, { key: 0, value: '否' }],
                Flag: [{ key: 1, value: '是' }, { key: 0, value: '否' }],
                importantFlag: '',
                form: {
                    messageTitle: '',
                    importantFlag: '',
                    messageContent: '',
                    auditFlag: null,

                },
                rules: {
                    messageTitle: [
                        { required: true, message: '公告名称不能为空', trigger: 'blur' },
                        { min: 1, max: 200, message: '长度在 1 到 200 个字符', trigger: 'blur' }
                    ]


                },
                formLabelWidth: '160px',
                dialogTitle: '',
                labelPosition: 'left',
                IsCreate: true,//是否新增
            }
        },
        methods: {
            fetchList: function () {
                let vm = this
                vm.loading = true;
                axios.get(`/api/SysMessageInfo/${vm.pageSize}/${vm.pageNum}?title=${vm.searchTitle}&creationby=${vm.searchCreationBy}&auditflag=${vm.searchAuditFlag}`)
                    .then(function (response) {
                        vm.data = response.data.content.data;
                        vm.total = response.data.content.total;
                        vm.loading = false;
                    })
                    .catch(function (error) {
                        vm.loading = false;
                        console.log(error)
                    });
            },
            handleAudit: function (index, row) {
                //审核
                console.log(row);
                let vm = this;
                //已审核过的不能再审核
                if (row.auditFlag === 1 || row.auditFlag === 0) {
                    this.$message.error('已审核信息不能再次审核!');
                    return false;
                }

                let url = "/api/SysMessageInfo/UpdateExamine";
                let method = "POST";
                let confirm_title = "公告名称为：【" + row.messageTitle + "】";

                layer.confirm(confirm_title, {
                    btn: ['通过审核', '不通过审核', '取消'], btn3: function (index, layero) {

                        layer.close(index);

                    }

                }, function (index, layero) {
                    let model = {
                        Message_ID: row.messageId,
                        Audit_Flag: 1
                    };
                    axios({ url: url, method: method, data: model })
                        .then(function (response) {
                            console.log(response);
                            layer.msg(response.data.message);
                            if (!response.data.isSuccess) {
                                return;

                            }
                            layer.close(index);
                            vm.fetchList();

                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                }, function (index) {

                    let model = {
                        Message_ID: row.messageId,
                        Audit_Flag: 0
                    };
                    axios({ url: url, method: method, data: model })
                        .then(function (response) {
                            console.log(response);
                            layer.msg(response.data.message);
                            if (!response.data.isSuccess) {
                                return;

                            }
                            layer.close(index);
                            vm.fetchList();
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                }
                );
            },
            handleEdit: function (index, row) {
                //编辑器初始化
                var ue = UE.getEditor('editor');
                //编辑
                let vm = this
                let rowstr = JSON.stringify(row)
                let formdata = JSON.parse(rowstr)

                vm.IsCreate = false
                vm.dialogTitle = "编辑公告信息"
                vm.form = formdata;
                vm.importantFlag = formdata.importantFlag == 1 ? '是' : '否'
                //搞不懂的道理，直接设置默认值无效，添加一个定时方法即可(可能是要先等Ue富文本编辑器先初始化)

                //ue.addListener('ready', function () {
                //    ue.setContent(formdata.messageContent);
                //})

                setTimeout(function () {
                    ue.setContent(formdata.messageContent);

                    //文本框获取焦点时清空默认显示的内容
                    //ue.addListener("focus", function () {
                    //    ue.setContent('');
                    //});
                }, 800)

                vm.centerDialogVisible = true
            },
            handleDelete: function (index, row) {
                let vm = this
                //删除
                this.$confirm('此操作将删除公告信息, 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.delete('/api/SysMessageInfo/' + row.messageId)
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                return;
                            }
                            vm.$message({ title: '成功', message: '删除成功', type: 'success' })
                            vm.fetchList();
                            vm.centerDialogVisible = false
                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                            console.log(error);
                        });

                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });

            },
            handleAdd: function () {
                //实例化编辑器
                var ue = UE.getEditor('editor');
                let vm = this;
                vm.IsCreate = true;
                vm.resetForm();

                setTimeout(function () {
                    ue.setContent('');
                }, 2000)


                vm.dialogTitle = "添加系统公告信息";
                vm.centerDialogVisible = true
            },
            dialogCancel: function () {
                let vm = this;

                vm.centerDialogVisible = false
            },
            dialogSave: function (formName) {
                let vm = this;
                console.log(vm.$refs[formName])
                vm.$refs[formName].validate((valid) => {
                    if (valid) {
                        let url = "/api/SysMessageInfo/";
                        let method = "POST";
                        if (vm.IsCreate != true) {
                            url = `/api/SysMessageInfo/${vm.form.messageId}`;
                            method = "PUT";
                        }
                        var ue = UE.getEditor('editor');
                        vm.form.messageContent = ue.getContent();
                        vm.form.importantFlag = vm.importantFlag == '是' ? 1 : 0;

                        axios({ url: url, method: method, data: vm.form })
                            .then(function (response) {
                                if (!response.data.isSuccess) {
                                    vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                    return;
                                }
                                vm.$message({ title: '成功', message: response.data.message, type: 'success' })
                                vm.fetchList();
                                vm.centerDialogVisible = false
                            })
                            .catch(function (error) {
                                vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                                console.log(error);
                            });

                    } else {
                        console.log('error submit!!');
                        return;
                    }
                });
            },
            resetForm() {
                let vm = this;
                vm.form.messageTitle = ''
                vm.form.messageContent = ''
                vm.form.importantFlag = ''
            },
            handleSizeChange(val) {
                console.log(`每页 ${val} 条`);
                this.pageSize = val;
                this.fetchList();
            },
            handleCurrentChange(val) {
                this.pageNum = val;
                this.fetchList();
            },
            toggleSelection(rows) {
                if (rows) {
                    rows.forEach(row => {
                        this.$refs.multipleTable.toggleRowSelection(row);
                    });
                } else {
                    this.$refs.multipleTable.clearSelection();
                }
            },
            handleSelectionChange(val) {
                this.multipleSelection = val;

            },
            batchDelete() {
                let batchdatas = this.multipleSelection;
                if (batchdatas.length == 0) {
                    return;
                }
                let ids = '';
                for (let i = 0; i < batchdatas.length; i++) {
                    ids += `&MessageIds=${batchdatas[i].messageId}`;
                };
                ids = ids.substring(1, ids.length)
                let vm = this
                vm.$confirm(`此操作将删除${batchdatas.length}条公告信息, 是否继续?`, '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.delete('/api/SysMessageInfo/BatchDelete?' + ids)
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                return;
                            }
                            vm.$message({ title: '成功', message: '删除成功', type: 'success' })
                            vm.fetchList();
                            vm.centerDialogVisible = false
                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                            console.log(error);
                        });

                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
                console.log(this.multipleSelection);
            }
        },
        mounted: function () {
            let vm = this
            vm.fetchList();

        }

    });
</script>
