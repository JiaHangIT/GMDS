
@{
    ViewData["Title"] = "问题信息管理";
}

<style>
    .v-modal {
        display: none;
    }

    #app {
        margin-top: 15px;
        padding: 15px;
        background-color: #fff;
    }
</style>
<div id="app">

    <el-form :inline="true" class="demo-form-inline">
        <el-form-item label="问题类型：">
            <el-select v-model="searchProblemTypeId" placeholder="请选择">
                <el-option v-for="item in searchoptProblemType"
                           :key="item.problemTypeId"
                           :label="item.problemTypaName"
                           :value="item.problemTypeId"
                           :disabled="item.disabled">
                </el-option>
            </el-select>
        </el-form-item>
        <el-form-item label="问题标题：">
            <el-input placeholder="问题标题" v-model="searchProblemTitle"></el-input>
        </el-form-item>
        <el-form-item label="是否审核：">
            <el-select v-model="searchAuditFlag" placeholder="请选择">
                <el-option v-for="item in searchoptauditFlag"
                           :key="item.value"
                           :label="item.label"
                           :value="item.value"
                           :disabled="item.disabled">
                </el-option>
            </el-select>
        </el-form-item>
    </el-form>
    <el-form :inline="true" class="demo-form-inline">
        <el-form-item>
            <el-button size="small" type="primary" @@click="fetchList">查询</el-button>
        </el-form-item>
        <el-form-item>
            <el-button size="small" type="primary" @@click="handleAdd">添加</el-button>
        </el-form-item>
        <el-form-item>
            <el-button size="small" type="danger" @@click="batchDelete">批量删除</el-button>
        </el-form-item>
    </el-form>

    <el-table ref="multipleTable"
              :data="data"
              :border="true"
              tooltip-effect="dark"
              style="width: 100%"
              @@selection-change="handleSelectionChange">
        <el-table-column type="selection"
                         width="55">
        </el-table-column>
        <el-table-column label="常见问题类型" width="200"
                         prop="problem_Type_Name">
        </el-table-column>
        <el-table-column label="常见问题标题" width="200"
                         prop="problem_Title">
        </el-table-column>
        <el-table-column label="是否审核"
                         prop="audit_Flag">
            <template slot-scope="scope">
                <p v-if="scope.row.audit_Flag===2">
                    未审核
                </p>
                <p v-else-if="scope.row.audit_Flag===0">
                    未通过
                </p>
                <p v-else-if="scope.row.audit_Flag===1">
                    通过
                </p>
            </template>
        </el-table-column>
        <el-table-column label="审核时间" width="200"
                         prop="audited_Date">
        </el-table-column>
        <el-table-column label="审核人"
                         prop="audited_By">
        </el-table-column>
        <el-table-column label="操作" width="260">
            <template slot-scope="scope">
                <el-button size="mini"
                           v-on:click="handleEdit(scope.$index, scope.row)">编辑</el-button>
                <el-button size="mini"
                           v-on:click="handleExamine(scope.$index, scope.row)">审核</el-button>
                <el-button size="mini"
                           type="danger"
                           v-on:click="handleDelete(scope.$index, scope.row)">删除</el-button>
            </template>
        </el-table-column>
    </el-table>
    <el-pagination @@size-change="handleSizeChange"
                   @@current-change="handleCurrentChange"
                   :current-page="currentPage"
                   :page-sizes="[10, 20, 30, 40]"
                   :page-size="pageSize"
                   layout="total, sizes, prev, pager, next, jumper"
                   :total="total">
    </el-pagination>
    <el-dialog :title="dialogTitle"
               :visible.sync="centerDialogVisible"
               width="30%"
               center>
        <el-form :label-position="labelPosition" label-width="160px" :model="form" :rules="rules" ref="form">
            <el-form-item label="问题类型：">
                <el-select v-model="form.problem_Type_Id" placeholder="请选择">
                    <el-option v-for="item in optProblemType"
                               :key="item.problemTypeId"
                               :label="item.problemTypaName"
                               :value="item.problemTypeId"
                               :disabled="item.disabled">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="问题标题：" prop="problem_Title">
                <el-input placeholder="问题标题" v-model="form.problem_Title"></el-input>
            </el-form-item>
            <el-form-item label="常见问题内容" prop="problem_Contant">
                <el-input type="textarea" :rows="3" v-model="form.problem_Contant"></el-input>
            </el-form-item>
        </el-form>
        <div slot="footer" class="dialog-footer">
            <el-button v-on:click="dialogCancel()">取 消</el-button>
            <el-button type="primary" v-on:click="dialogSave('form')">确 定</el-button>
        </div>
    </el-dialog>
</div>
<script>
    layui.use(['element', 'layer'], function () {
        var layer = layui.layer
        var form = layui.form;
        var $ = layui.$
    })
</script>
<script>
    new Vue({
        el: "#app",
        data: function () {
            return {
                data: [],
                centerDialogVisible: false,
                currentPage: 1,
                pageSize: 10,
                total: 0,
                multipleSelection: [],//获取批量选择的数据
                searchoptauditFlag: [
                    { value: '', label: '请选择' },
                    { value: '1', label: '通过审核' },
                    { value: '0', label: '未通过审核' },
                    { value: '2', label: '未审核' },
                ],
                searchoptProblemType: [],
                searchProblemTypeId: '',
                searchAuditFlag: '',
                searchProblemTitle: '',
                optProblemType: [],
                form: {
                    problem_Type_Id: '',
                    problem_Title: '',
                    problem_Contant: '',
                },
                rules: {
                    problem_Title: [
                        { required: true, message: '问题标题不能为空', trigger: 'blur' },
                    ],
                    problem_Contant: [
                        { required: true, message: '问题内容不能为空', trigger: 'blur' }
                    ],
                },
                formLabelWidth: '160px',
                dialogTitle: '',
                labelPosition: 'left',
                IsCreate: true,//是否新增
            }
        },
        methods: {
            fetchList: function () {
                let vm = this
                axios.get(`/api/sysprobleminfodata/${vm.pageSize}/${vm.currentPage}?problemTypeId=${vm.searchProblemTypeId}&problemTitle=${vm.searchProblemTitle}&auditFlag=${vm.searchAuditFlag}`)
                    .then(function (response) {
                        vm.data = response.data.content.data;
                        vm.total = response.data.content.total;
                    })
                    .catch(function (error) {
                        console.log(error)
                    });
            },
            handleEdit: function (index, row) {
                //编辑
                let vm = this
                let rowstr = JSON.stringify(row)
                let formdata = JSON.parse(rowstr)
                vm.IsCreate = false
                vm.dialogTitle = "编辑信息"
                vm.getProblemType();
                vm.form = formdata;
                console.log(formdata);
                vm.centerDialogVisible = true
            },
            handleExamine: function (index, row) {
                //审核
                let vm = this;
                let rowstr = JSON.stringify(row);
                let formdata = JSON.parse(rowstr);
                //已审核过的不能再审核
                if (formdata.audit_Flag === 1 || formdata.audit_Flag === 0) {
                    this.$message.error('已审核的不能再次审核!');
                    return false;
                }
                let url = "/api/sysproblemInfodata/UpdateExamine";
                let method = "POST";
                let confirm_title = "确认审核 ：【" + formdata.problem_Title + "】的记录么";
                layer.confirm(confirm_title, {
                    btn: ['通过审核', '不通过审核', '取消'], btn3: function (index, layero) {
                        layer.close(index);
                    }
                }, function (index, layero) {
                    let model = {
                        ProblemId: formdata.problem_Id,
                        AuditFlag: 1
                    };
                    axios({ url: url, method: method, data: model })
                        .then(function (response) {
                            console.log(response);
                            layer.msg(response.data.message);
                            if (!response.data.isSuccess) {
                                return;
                            }
                            vm.fetchList();
                            layer.msg(response.data.message);
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                }, function (index) {
                    //alert("不通过");
                    let model = {
                        ProblemId: formdata.problem_Id,
                        AuditFlag: 0
                    };
                    axios({ url: url, method: method, data: model })
                        .then(function (response) {
                            console.log(response);
                            layer.msg(response.data.message);
                            if (!response.data.isSuccess) {
                                return;
                            }
                            vm.fetchList();
                            layer.msg(response.data.message);
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                }
                );

            },
            handleDelete: function (index, row) {
                let vm = this
                //删除

                //弹出确认框

                this.$confirm('此操作将删除该条信息, 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.delete('/api/sysprobleminfodata/' + row.problem_Id)
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                return;
                            }
                            vm.$message({ title: '成功', message: '删除成功', type: 'success' })
                            vm.fetchList();
                            vm.centerDialogVisible = false
                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                            console.log(error);
                        });

                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });

            },
            handleAdd: function () {
                let vm = this
                vm.IsCreate = true
                vm.getProblemType();
                vm.resetForm()
                vm.dialogTitle = "添加信息"
                vm.centerDialogVisible = true
                //添加
            },
            dialogCancel: function () {
                let vm = this;

                vm.centerDialogVisible = false
            },
            dialogSave: function (formName) {
                let vm = this;
                let model = "";
                vm.$refs[formName].validate((valid) => {
                    if (valid) {
                        model = {
                            problemTypeId: vm.form.problem_Type_Id,
                            problemTitle: vm.form.problem_Title,
                            problemContent: vm.form.problem_Contant,
                        };
                        let url = "/api/sysprobleminfodata";
                        let method = "POST";
                        if (vm.IsCreate != true) {
                            url = `/api/sysprobleminfodata/${vm.form.problem_Id}`;
                            method = "PUT";

                        }
                        axios({ url: url, method: method,data: model })
                            .then(function (response) {
                                if (!response.data.isSuccess) {
                                    vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                    return;
                                }
                                vm.$message({ title: '成功', message: response.data.message, type: 'success' })
                                vm.fetchList();
                                vm.centerDialogVisible = false
                            })
                            .catch(function (error) {
                                vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                                console.log(error);
                            });

                    } else {
                        console.log('error submit!!');
                        return;
                    }
                });
            },
            resetForm() {
                let vm = this;
                vm.form.problem_Type_Id = ''
                vm.form.problem_Title = ''
                vm.form.problem_Contant = ''
            },
            handleSizeChange(val) {
                this.pageSize = val;
                this.fetchList();
            },
            handleCurrentChange(val) {
                this.currentPage = val;
                this.fetchList();
            },

            handleSelectionChange(val) {
                this.multipleSelection = val;

            },
            getProblemType: function () {
                let vm = this;
                axios.get('/api/SysProblemInfoData/SelectProblemType')
                    .then(function (response) {
                        vm.optProblemType = response.data.content;
                        vm.optProblemType.unshift({ problemTypaName: '请选择', problemTypeId: '' });
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            getselProblemType: function () {
                let vm = this;
                axios.get('/api/SysProblemInfoData/SelectProblemType')
                    .then(function (response) {
                        console.log(response.data.content);
                        vm.searchoptProblemType = response.data.content;
                        vm.searchoptProblemType.unshift({ problemTypaName: '请选择', problemTypeId: '' });
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },

            batchDelete() {
                let vm = this;
                let batchdatas = this.multipleSelection;
                if (batchdatas.length == 0) {
                    vm.$message("请先选中数据再进行操作！");
                    return;
                }
                let ids = '';
                for (let i = 0; i < batchdatas.length; i++) {
                    ids += `&ids=${batchdatas[i].problem_Id}`;
                };
                ids = ids.substring(1, ids.length)
                vm.$confirm(`此操作将删除${batchdatas.length}条问题类型信息, 是否继续?`, '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.delete('/api/sysprobleminfodata/batchdelete?' + ids)
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                return;
                            }
                            vm.$message({ title: '成功', message: '删除成功', type: 'success' })
                            vm.fetchList();
                            vm.centerDialogVisible = false
                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                            console.log(error);
                        });

                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
                console.log(this.multipleSelection);
            }
        },
        mounted: function () {
            let vm = this
            vm.fetchList();
            vm.getselProblemType();
        }

    });
</script>



