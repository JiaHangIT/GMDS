
@{
    ViewData["Title"] = "Index";
}
<style>
    .layui-layer-shade {
        display: none;
    }

    .layui-select-title input {
        width: 180px;
    }

    .layui-row .layui-col-md4 {
        padding-right: 5%;
    }

    .layui-row {
        margin-bottom: 6px;
    }

    .layui-form-pane .layui-form-select {
        width: 182px;
    }
</style>
@*<script src="~/utf8-asp/ueditor.config.js"></script>
    <script src="~/utf8-asp/ueditor.all.js"></script>*@
<div>


    <div class="layui-form layui-form-pane" style="background-color:#F2F2F2;margin-top:8px;">
        <div class="layui-row">
            <div class="layui-col-md4 layui-col-xs6" style="margin-top:4px">
                <label class="layui-form-label">问题类型：</label>
                <div class="layui-inline">
                    <select name="search_problem_type_id" id="search_problem_type_id"></select>
                </div>
            </div>
            <div class="layui-col-md4 layui-col-xs6" style="margin-top:4px">
                <label class="layui-form-label">问题标题：</label>
                <div class="layui-inline">
                    <input class="layui-input" name="id" id="search_problem_title" autocomplete="off">
                </div>
            </div>

            @*</div>
                <div class="layui-row">*@

            <div class="layui-col-md4 layui-col-xs6" style="margin-top:4px">
                <label class="layui-form-label"> 是否审核：</label>
                <div class="layui-inline">
                    <select name="interest" id="search_audit_flag" lay-filter="aihao">
                        <option value=""></option>
                        <option value="1">审核通过</option>
                        <option value="0">审核未通过</option>
                        <option value="2">未审核</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="layui-form-item" style="margin-top:8px">
            <button class="layui-btn btn-search" data-type="search">条件查询</button>
            <button class="layui-btn" data-type="showGenerateLayer">新增信息</button>
            <button class="layui-btn" data-type="getCheckData">选中行删除</button>
            @*<a class="layui-btn" href="/api/sysprobleminfodata/export">导出所有</a>*@
        </div>

    </div>
    <table class="layui-hide" id="test" lay-filter="sysproblem" style="margin-top:8px"> </table>

</div>
<div id="generate_layer" style="display:none;position:relative;padding-left:15px;margin-top:4px">
    <div class="layui-form layui-form-pane" action="" lay-filter="generate-form">
        <div class="layui-form-item">

            <div class="layui-inline">
                <label class="layui-form-label">问题类型</label>
                @*<div class="layui-input-block">
                        <input type="text" name="problem_type_id" id="problem_type_id" autocomplete="off" class="layui-input" lay-verify="required">
                    </div>*@
                <div class="layui-input-block">
                    <select name="problem_type_id" id="problem_type_id"></select>
                </div>

            </div>


            <div class="layui-inline" style="padding-left:20px">
                <label class="layui-form-label">问题标题</label>
                <div class="layui-input-block">
                    <input type="text" name="problem_title" id="problem_title" autocomplete="off" class="layui-input" lay-verify="required">
                </div>
            </div>


            <div class="layui-form-item layui-form-text" style="padding-right:20px">
                <label class="layui-form-label">常见问题内容</label>
                <div class="layui-input-block">
                    <textarea placeholder="请输入内容" id="problem_contant" name="problem_contant" class="layui-textarea"></textarea>
                </div>
            </div>

        </div>
        <div class="layui-form-item" style="margin-left:210PX">
            <button class="layui-btn" data-type="generate" id="generate_btn" lay-submit lay-filter="submit">立即创建</button>
            <button class="layui-btn layui-layer-btn1" lay-filter="demo2" data-type="closeGenerateLayer">取消</button>
        </div>
    </div>


</div>




<script type="text/html" id="barDemo">
    <a class="layui-btn layui-btn-xs" lay-event="edit">编辑</a>
    <a class="layui-btn layui-btn-xs" lay-event="examine">审核</a>
    <a class="layui-btn layui-btn-danger layui-btn-xs" lay-event="del">删除</a>
</script>
<script>
    layui.use(['table', 'element', 'layer', 'layedit', 'form', 'laydate'], function () {
        var table = layui.table;
        var element = layui.element;
        var layer = layui.layer;
        var form = layui.form;
        var laydate = layui.laydate;
        var layedit = layui.layedit
        var generateLayer_index = 0;
        var layType = true;//true 新增  false 编辑
        var problem_id = 0;

        //初始化问题类型下拉框

        problemType()

        table.render({
            elem: '#test'
            , url: '/api/sysprobleminfodata/search/'
            , contentType: 'application/json'
            , method: 'post'
            , parseData: function (res) { //res 即为原始返回的数据
                return {
                    "status": res.isSuccess,
                    "code": res.isSuccess == true ? 0 : 1, //解析接口状态
                    "msg": res.message, //解析提示文本
                    "count": res.content.total, //解析数据长度
                    "data": res.content.data //解析数据列表
                };
            }



            , cols: [[

                { type: 'checkbox', fixed: 'left', width: 40 }
                , { title: '操作', align: 'center', toolbar: '#barDemo', fixed: 'left', width: 180 }//里的toolbar值是模板元素的选择器

                , { field: 'problem_Type_Name', width: 200, title: '常见问题类型',/* sort: true, */fixed: 'left' }
                //, { field: 'problem_Type_Id', title: '帮助类型' }
                , { field: 'problem_Title', width: 200, title: '常见问题标题',/* sort: true,*/ fixed: 'left' }
                //, { field: 'user_Org_Id', title: '用户组别', }
                //, { field: 'important_Flag', title: '是否重要', sort: true }
                , {
                    field: 'audit_Flag', title: '是否审核',
                 templet: function (d) {
                        if (d.audit_Flag > 0) {
                            if (d.audit_Flag == 1) {
                                return '审核通过';
                            }
                            else {
                                return "未审核";
                            }
                        }
                        else {
                            return "审核未通过";
                        }
                    }
                }
                //, { field: 'user_Mobile_No', title: '手机号', sort: true }
                , { field: 'audited_Date', title: '审核时间', sort: true }
                //, { field: 'language_Code', title: '默认语言', sort: true }
                , { field: 'audited_By', title: '审核人', /*sort: true */ }
                //, { field: 'eff_Start_Date', title: '有效开始日期', sort: true }
                //, { field: 'eff_End_Date', title: '有效结束日期', sort: true }

            ]]
            , id: 'testReload'
            , page: true,
            text: {
                none: '暂无相关数据' //默认：无数据。注：该属性为 layui 2.2.5 开始新增
            }
        });


        //监听工具条
        table.on('tool(sysproblem)', function (obj) {
            //debugger;
            //为什么会是审核的值
            var data = obj.data;
            if (obj.event === 'detail') {
                layer.msg('ID：' + data.id + ' 的查看操作');
            } else if (obj.event === 'del') {
                let confirm_title = "确认删除" + data.problem_Title + "的记录么";
                layer.confirm(confirm_title, function (index) {
                    layer.close(index);
                    axios.delete('/api/sysprobleminfodata/' + data.problem_Id)
                        .then(function (response) {
                            layer.msg(response.data.message);
                            if (!response.data.isSuccess) {
                                return;
                            }
                            obj.del();
                        })
                        .catch(function (error) {
                            console.log(error);
                        });

                });
            } else if (obj.event === 'edit') {
                // layer.alert('编辑行：<br>' + JSON.stringify(data))


                problem_Id = data.problem_Id
                layType = false;
                showLayer(data);
            } else if (obj.event === 'examine') {
                console.log("审核");
                console.log(data.problem_Id);
                console.log(data.problem_Title);
                let model = {
                    ProblemId: data.problem_Id,

                };
                let url = "/api/sysproblemInfodata/UpdateExamine";
                let method = "POST";
                let confirm_title = "确认审核 ：【" + data.problem_Title + "】的记录么";
                if (data.audit_Flag == 1) {
                    layer.confirm(confirm_title, {
                        btn: ['不通过审核', '取消'], btn2: function (index, layero) {
                            layer.close(index);
                        }
                    }, function (index, layero) { //alert("不通过");
                        let model = {
                            ProblemId: data.problem_Id,
                            AuditFlag: 0
                        };
                        axios({ url: url, method: method, data: model })
                            .then(function (response) {
                                console.log(response);
                                layer.msg(response.data.message);
                                if (!response.data.isSuccess) {
                                    return;
                                    tableReload(datatable);
                                }
                            })
                            .catch(function (error) {
                                console.log(error);
                            });
                    }, function (index) { })
                }
                else {
                layer.confirm(confirm_title, {
                    btn: ['通过审核', '不通过审核', '取消'], btn3: function (index, layero) {

                        layer.close(index);

                    }


                }, function (index, layero) {
                    let model = {
                        ProblemId: data.problem_Id,
                        AuditFlag: 1
                    };
                    axios({ url: url, method: method, data: model })
                        .then(function (response) {
                            console.log(response);
                            layer.msg(response.data.message);
                            if (!response.data.isSuccess) {
                                return;
                                tableReload(datatable);
                            }

                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                }, function (index) {
                    //alert("不通过");
                    let model = {
                        ProblemId: data.problem_Id,
                        AuditFlag: 0
                    };
                    axios({ url: url, method: method, data: model })
                        .then(function (response) {
                            console.log(response);
                            layer.msg(response.data.message);
                            if (!response.data.isSuccess) {
                                return;
                                tableReload(datatable);
                            }

                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                }
                );
            }
            }
        });


        var $ = layui.$, active = {
            getCheckData: function () { //获取选中数据
                var checkStatus = table.checkStatus('testReload')
                    , data = checkStatus.data;


                layer.confirm("确认删除" + data.length + "条记录么", function (index) {
                    layer.close(index);

                    let ids = [];
                    let parms = "?";
                    for (let i = 0; i < data.length; i++) {
                        ids.push(data[i].problem_Id);
                        parms += "ids=" + data[i].problem_Id + "&";
                    }
                    parms = parms.substring(0, parms.length - 1);
                    //layer.alert(JSON.stringify(data));
                    axios.delete("/api/sysprobleminfodata/batchdelete/" + parms)
                        .then(function (response) {
                            layer.msg(response.data.message);
                            if (!response.data.isSuccess) {
                                return;
                            }

                            //移除
                            let tabledata = table.cache.testReload;
                            //for (let i = 0; i < tabledata.length; i++) {
                            //    for (let j = 0; j < ids.length; j++) {
                            //        if (tabledata[i].user_Id == ids[j]) {
                            //            tabledata.splice(i, 1);
                            //        }
                            //    }
                            //}
                            //console.log(tabledata);
                            tableReload(tabledata);


                        })
                        .catch(function (error) {
                            layer.msg("发生了预料之外的错误!");
                            console.log(error);
                        });
                });
            },
            search: function () {
                let pars = {

                    //problem_Type_Id: $("#search_problem_type_id").val(),
                    problem_Title: $("#search_problem_title").val(),
                    problem_Type_Id: $("#search_problem_type_id").val(),
                    //important_Flag: 0,
                    audit_Flag: $("#search_audit_flag").val(),
                }
                //if ($("#search_important_flag").val() != "") {
                //    pars.Important_Flag = $("#search_important_flag").val();
                //}
                //if ($("#search_audit_flag").val() != "") {
                //    pars.Audit_Flag = $("#search_audit_flag").val();
                //}
                //执行重载
                table.reload('testReload', {
                    where: pars,
                    contentType: 'application/json',
                    method: 'post'
                });

            },
            showGenerateLayer: function () {
                layType = true;
                showLayer();
            },
            closeGenerateLayer: function () {
                layer.close(generateLayer_index);
            },

        };
        form.on('submit(submit)', function () {
            //alert($("#problem_type_id").val());
            //实例化

            //var ue = UE.getEditor('editor');
            ////获取纯文本内容
            //var txt = ue.getContentTxt();
            let model = {
                problemtypeid: $("#problem_type_id").val(),
                problemtitle: $("#problem_title").val(),
                problemcontent: $("#problem_contant").val(),
                importantflag: $("#important_flag").val(),
                auditflag: $("#audit_flag").val(),
                //auditeddate: $("#audited_date").val(),
                //auditedby: $("#audited_by").val()
            };
            let url = "/api/sysprobleminfodata";
            let method = "POST"
            if (layType != true) {
                url = "/api/sysprobleminfodata/" + problem_Id;
                method = "PUT";
            }
            console.log(url);
            axios({ url: url, method: method, data: model })
                .then(function (response) {
                    layer.msg(response.data.message);
                    if (!response.data.isSuccess) {

                        return;
                    }
                    let datatable = table.cache.testReload;
                    if (layType != true) {
                        //修改
                        for (let i = 0; i < datatable.length; i++) {
                            if (datatable[i].problem_Id == response.data.content.problem_Id) {
                                datatable.splice(i, 1, response.data.content);
                                break;
                            }
                        }
                    }
                    else {
                        //新增
                        datatable.unshift(response.content)
                    }
                    tableReload(datatable)
                    layer.close(generateLayer_index);
                })
                .catch(function (error) {

                    layer.msg("发生了预料之外的错误!");
                    console.log(error);
                });

            return false; //阻止表单跳转。如果需要表单跳转，去掉这段即可。
        }),
            $('.layui-btn').on('click', function () {
                var type = $(this).data('type');
                active[type] ? active[type].call(this) : '';
            });
        function showLayer(data) {
            console.log(data);
            initFormValue(data);
            let title = "新增";
            document.getElementById("problem_title").disabled = false;
            document.getElementById("generate_btn").innerHTML = "立即创建";
            if (layType != true) {
                title = "编辑";
                document.getElementById("problem_title").disabled = false;
                document.getElementById("generate_btn").innerHTML = "立即修改";
            }
            generateLayer_index = layer.open({
                type: 1
                , title: title //不显示标题栏
                , closeBtn: false
                , fixed: false
                , area: ['670px', '310px']
                , shade: 0.8
                , id: 'LAY_layuipro' //设定一个id，防止重复弹出
                //, btn: ['火速围观', '残忍拒绝']
                , btnAlign: 'c'
                , moveType: 0 //拖拽模式，0或者1
                , content: $('#generate_layer') //这里content是一个DOM，注意：最好该元素要存放在body最外层，否则可能被其它的相对元素所影响
                , offset: ['13%', '18%']
            });
        };
        function initFormValue(data) {
            console.log(data);

            if (data == undefined) {
                form.val("generate-form", {
                    problem_id: "",
                    problem_type_id: "",
                    problem_title: "",
                    problem_contant: "",
                    editor: "",
                    //important_flag: "",
                    audit_flag: "",
                    //audited_Date: "",
                    //audited_By: "",

                })
                return;
            }
            form.val("generate-form", {

                problem_id: data.problem_Id,
                problem_type_id: data.problem_Type_Id,
                problem_title: data.problem_Title,
                problem_contant: data.problem_Contant,

                //editor: data.problem_Contant,
                //important_flag: data.important_Flag,
                audit_flag: data.audit_Flag,
                //audited_Date: data.audited_Date,
                //audited_By: data.audited_By,
            })
        }


        function tableReload(datatable) {
            table.reload("testReload", {
                data: datatable
            })

        }
        function problemType() {
            axios.get('/api/SysProblemInfoData/SelectProblemType')
                .then(function (response) {
                    var len = response.data.content.length;
                    console.log();
                    var text = '<option value="">请选择</option>';
                    $('#search_problem_type_id').append(text);
                    $('#problem_type_id').append(text);
                    for (var i = 0; i < len; i++) {
                        $('#search_problem_type_id').append(new Option(response.data.content[i].problemTypaName, response.data.content[i].problemTypeId));
                        $('#problem_type_id').append(new Option(response.data.content[i].problemTypaName, response.data.content[i].problemTypeId));
                    }
                    form.render("select");
                })
                .catch(function (error) {
                    console.log(error);
                });
        }
    });

</script>
<script type="text/javascript">
    @*
        //实例化编辑器
        //建议使用工厂方法getEditor创建和引用编辑器实例，如果在某个闭包下引用该编辑器，直接调用UE.getEditor('editor')就能拿到相关的实例
        var ue = UE.getEditor('editor');


        function isFocus(e) {
            alert(UE.getEditor('editor').isFocus());
            UE.dom.domUtils.preventDefault(e)
        }
        function setblur(e) {
            UE.getEditor('editor').blur();
            UE.dom.domUtils.preventDefault(e)
        }
        function insertHtml() {
            var value = prompt('插入html代码', '');
            UE.getEditor('editor').execCommand('insertHtml', value)
        }
        function createEditor() {
            enableBtn();
            UE.getEditor('editor');
        }
        function getAllHtml() {
            alert(UE.getEditor('editor').getAllHtml())
        }
        function getContent() {
            var arr = [];
            arr.push("使用editor.getContent()方法可以获得编辑器的内容");
            arr.push("内容为：");
            arr.push(UE.getEditor('editor').getContent());
            alert(arr.join("\n"));
        }
        function getPlainTxt() {
            var arr = [];
            arr.push("使用editor.getPlainTxt()方法可以获得编辑器的带格式的纯文本内容");
            arr.push("内容为：");
            arr.push(UE.getEditor('editor').getPlainTxt());
            alert(arr.join('\n'))
        }
        function setContent(isAppendTo) {
            var arr = [];
            arr.push("使用editor.setContent('欢迎使用ueditor')方法可以设置编辑器的内容");
            UE.getEditor('editor').setContent('欢迎使用ueditor', isAppendTo);
            alert(arr.join("\n"));
        }
        function setDisabled() {
            UE.getEditor('editor').setDisabled('fullscreen');
            disableBtn("enable");
        }

        function setEnabled() {
            UE.getEditor('editor').setEnabled();
            enableBtn();
        }

        function getText() {
            //当你点击按钮时编辑区域已经失去了焦点，如果直接用getText将不会得到内容，所以要在选回来，然后取得内容
            var range = UE.getEditor('editor').selection.getRange();
            range.select();
            var txt = UE.getEditor('editor').selection.getText();
            alert(txt)
        }

        function getContentTxt() {
            var arr = [];
            arr.push("使用editor.getContentTxt()方法可以获得编辑器的纯文本内容");
            arr.push("编辑器的纯文本内容为：");
            arr.push(UE.getEditor('editor').getContentTxt());
            alert(arr.join("\n"));
        }
        function hasContent() {
            var arr = [];
            arr.push("使用editor.hasContents()方法判断编辑器里是否有内容");
            arr.push("判断结果为：");
            arr.push(UE.getEditor('editor').hasContents());
            alert(arr.join("\n"));
        }
        function setFocus() {
            UE.getEditor('editor').focus();
        }
        function deleteEditor() {
            disableBtn();
            UE.getEditor('editor').destroy();
        }
        function disableBtn(str) {
            var div = document.getElementById('btns');
            var btns = UE.dom.domUtils.getElementsByTagName(div, "button");
            for (var i = 0, btn; btn = btns[i++];) {
                if (btn.id == str) {
                    UE.dom.domUtils.removeAttributes(btn, ["disabled"]);
                } else {
                    btn.setAttribute("disabled", "true");
                }
            }
        }
        function enableBtn() {
            var div = document.getElementById('btns');
            var btns = UE.dom.domUtils.getElementsByTagName(div, "button");
            for (var i = 0, btn; btn = btns[i++];) {
                UE.dom.domUtils.removeAttributes(btn, ["disabled"]);
            }
        }

        function getLocalData() {
            alert(UE.getEditor('editor').execCommand("getlocaldata"));
        }

        function clearLocalData() {
            UE.getEditor('editor').execCommand("clearlocaldata");
            alert("已清空草稿箱")
        }*@
</script>



