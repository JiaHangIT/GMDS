
@{
    ViewData["Title"] = "Index";
}
<style>
    .layui-layer-shade {
        display: none;
    }

    .layui-select-title input {
        width: 180px;
    }

    .layui-row .layui-col-md4 {
        padding-right: 5%;
    }

    .layui-row {
        margin-bottom: 6px;
    }

    .layui-form-pane .layui-form-select {
        width: 182px;
    }
</style>
<div>


    <div class="layui-form layui-form-pane" style="background-color:#F2F2F2;padding:15px;margin-top:6px;">
        <div class="layui-row">
            <div class=" layui-col-md6 layui-col-xs6">
                <label class="layui-form-label">类型：</label>
                <div class="layui-inline">
                    <input class="layui-input" name="id" id="search_problem_type_name" autocomplete="off">
                </div>
            </div>
        </div>

        <div class="layui-form-item" style="margin-top:15px;">
            <button class="layui-btn btn-search" data-type="search">条件查询</button>
            <button class="layui-btn" data-type="showGenerateLayer">新增帮助</button>
            <button class="layui-btn" data-type="getCheckData">选中行删除</button>
            @*<a class="layui-btn" href="/api/sysproblemtypedata/export">导出所有</a>*@
        </div>
    </div>
    <table class="layui-hide" id="test" lay-filter="sysproblem"> </table>
</div>
<div id="generate_layer" style="display:none;position:relative;padding:15px;">
    <div class="layui-form layui-form-pane" action="" lay-filter="generate-form">
        <div class="layui-form-item">
            <div class="layui-inline">
                <label class="layui-form-label">帮助类型名称</label>
                <div class="layui-input-block">
                    <input type="text" name="problem_type_name" id="problem_type_name" autocomplete="off" placeholder="帮助类型名称" class="layui-input" lay-verify="required">
                </div>
            </div>
        </div>
        <div class="layui-form-item">
            <button class="layui-btn" data-type="generate" id="generate_btn" lay-submit lay-filter="submit">立即创建</button>
            <button class="layui-btn layui-layer-btn1" lay-filter="demo2" data-type="closeGenerateLayer">取消</button>
        </div>
    </div>
</div>
<script type="text/html" id="barDemo">
    <a class="layui-btn layui-btn-xs" lay-event="edit">编辑</a>
    <a class="layui-btn layui-btn-danger layui-btn-xs" lay-event="del">删除</a>
</script>
<script>

    layui.use(['table', 'element', 'layer', 'form', 'laydate'], function () {
        var table = layui.table;
        var element = layui.element;
        var layer = layui.layer;
        var form = layui.form;
        var laydate = layui.laydate;
        var generateLayer_index = 0;
        var layType = true;//true 新增  false 编辑
        var problem_id = 0;
        //日期
        //laydate.render({
        //    elem: '#eff_start_date'
        //});
        //laydate.render({
        //    elem: '#eff_end_date'
        //});


        table.render({
            elem: '#test'
            , url: '/api/sysproblemtypedata/search/'
            , contentType: 'application/json'
            , method: 'post'
            , parseData: function (res) { //res 即为原始返回的数据
                return {
                    "status": res.isSuccess,
                    "code": res.isSuccess == true ? 0 : 1, //解析接口状态
                    "msg": res.message, //解析提示文本
                    "count": res.content.total, //解析数据长度
                    "data": res.content.data //解析数据列表
                };
            }


            , cols: [[

                { type: 'checkbox', fixed: 'left', width: 40 }
                , { title: '操作', align: 'center', toolbar: '#barDemo', fixed: 'left', width: 140 }//这里的toolbar值是模板元素的选择器

                , { field: 'problem_Type_Name', width: 300, title: '帮助类型名称', sort: true, fixed: 'left' }
                , { field: 'creation_Date', width: 300, title: '创建时间' }
            ]]
            , id: 'testReload'
            , page: true,
            text: {
                none: '暂无相关数据' //默认：无数据。注：该属性为 layui 2.2.5 开始新增
            }
        });


        table.on('checkbox(sysproblem)', function (obj) {
        });
        //监听工具条
        table.on('tool(sysproblem)', function (obj) {
            debugger;
            var data = obj.data;
            if (obj.event === 'detail') {
                layer.msg('ID：' + data.id + ' 的查看操作');
            } else if (obj.event === 'del') {
                let confirm_title = "确认删除" + data.problem_Type_Name + "的记录么";
                layer.confirm(confirm_title, function (index) {
                    layer.close(index);
                    axios.delete('/api/sysproblemtypedata/' + data.problem_Type_Id)
                        .then(function (response) {
                            layer.msg(response.data.message);
                            if (!response.data.isSuccess) {
                                return;
                            }
                            obj.del();
                        })
                        .catch(function (error) {
                            console.log(error);
                        });

                });
            } else if (obj.event === 'edit') {
                // layer.alert('编辑行：<br>' + JSON.stringify(data))
                problem_type_id = data.problem_Type_Id
                layType = false;
                showLayer(data);
            }
        });




        var $ = layui.$, active = {
            getCheckData: function () { //获取选中数据
                var checkStatus = table.checkStatus('testReload')
                    , data = checkStatus.data;


                layer.confirm("确认删除" + data.length + "条记录么", function (index) {
                    layer.close(index);

                    let ids = [];
                    let parms = "?";
                    for (let i = 0; i < data.length; i++) {
                        ids.push(data[i].problem_Type_Id);
                        parms += "ids=" + data[i].problem_Type_Id + "&";
                    }
                    parms = parms.substring(0, parms.length - 1);
                    //layer.alert(JSON.stringify(data));
                    axios.delete("/api/sysproblemtypedata/batchdelete/" + parms)
                        .then(function (response) {
                            layer.msg(response.data.message);
                            if (!response.data.isSuccess) {
                                return;
                            }

                            //移除
                            let tabledata = table.cache.testReload;
                            //for (let i = 0; i < tabledata.length; i++) {
                            //    for (let j = 0; j < ids.length; j++) {
                            //        if (tabledata[i].user_Id == ids[j]) {
                            //            tabledata.splice(i, 1);
                            //        }
                            //    }
                            //}
                            //console.log(tabledata);
                            tableReload(tabledata);


                        })
                        .catch(function (error) {
                            layer.msg("发生了预料之外的错误!");
                            console.log(error);
                        });
                });
            },
            search: function () {
                let pars = {
                    limit: 10,
                    page: 1,
                    problem_Type_Name: $("#search_problem_type_name").val(),

                }
                //if ($("#search_user_ower").val() != "") {
                //    pars.User_Ower = Number($("#search_user_ower").val());
                //}

                //执行重载
                table.reload('testReload', {
                    where: pars,
                    contentType: 'application/json',
                    method: 'post'
                });
            },
            showGenerateLayer: function () {
                layType = true;
                showLayer();
            },
            closeGenerateLayer: function () {
                layer.close(generateLayer_index);
            },

        };
        form.on('submit(submit)', function () {
            let model = {
                problemtypename: $("#problem_type_name").val(),

            };
            let url = "/api/sysproblemtypedata";
            let method = "POST";
            if (layType != true) {
                url = "/api/sysproblemtypedata/" + problem_type_id;
                method = "PUT";
            }
            axios({ url: url, method: method, data: model })
                .then(function (response) {
                    layer.msg(response.data.message);
                    if (!response.data.isSuccess) {
                        return;
                    }
                    let datatable = table.cache.testReload;
                    if (layType != true) {
                        //修改
                        for (let i = 0; i < datatable.length; i++) {
                            if (datatable[i].problem_Type_Id == response.data.content.problem_Type_Id) {
                                datatable.splice(i, 1, response.data.content);
                                break;
                            }
                        }
                    }
                    else {
                        //新增
                        datatable.unshift(response.content)

                    }
                    tableReload(datatable)
                    layer.close(generateLayer_index);
                })
                .catch(function (error) {

                    layer.msg("发生了预料之外的错误!");
                    console.log(error);
                });

            return false; //阻止表单跳转。如果需要表单跳转，去掉这段即可。
        }),
            $('.layui-btn').on('click', function () {
                var type = $(this).data('type');
                active[type] ? active[type].call(this) : '';
            });
        function showLayer(data) {
            initFormValue(data);
            let title = "新增";
            document.getElementById("problem_type_name").disabled = false;
            document.getElementById("generate_btn").innerHTML = "立即创建";
            if (layType != true) {
                title = "编辑";
                document.getElementById("problem_type_name").disabled = false;
                document.getElementById("generate_btn").innerHTML = "立即修改";
            }
            generateLayer_index = layer.open({
                type: 1
                , title: title //不显示标题栏
                , closeBtn: false
                , fixed: false
                , area: ['800px', '600px']
                , shade: 0.8
                , id: 'LAY_layuipro' //设定一个id，防止重复弹出
                //, btn: ['火速围观', '残忍拒绝']
                , btnAlign: 'c'
                , moveType: 0 //拖拽模式，0或者1
                , content: $('#generate_layer') //这里content是一个DOM，注意：最好该元素要存放在body最外层，否则可能被其它的相对元素所影响
                , offset: ['10%', '3%']
            });
        };
        function initFormValue(data) {
            if (data == undefined) {

                form.val("generate-form", {
                    problem_type_id:"",
                    creation_date: "",
                    problem_type_name: "",
                })
                return;
            }
            form.val("generate-form", {
                problem_type_id: data.problem_Type_Id,
                creation_date: data.creation_Date,
                problem_type_name: data.problem_Type_Name,

            })
        }


        function tableReload(datatable) {
            table.reload("testReload", {
                data: datatable
            })
        }

    });



</script>
