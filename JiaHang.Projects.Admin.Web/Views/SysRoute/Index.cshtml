@{
    ViewData["Title"] = "Index";
}

<style>
    .layui-layer-shade { display: none; }
    .layui-select-title input { width: 180px; }
    .top { border: 1px solid #DCDFE6; }
    .top > div > .el-collapse-item__header { background-color: #E4E7ED; padding: 0 8px; }
    .middle > div > .el-collapse-item__header { background-color: #EBEEF5; padding: 0 8px; }
    .HttpGet { background: rgba(97,175,254,.1); }
    .HttpGet .MethoedType { background: #61affe; }
    .HttpPost { background: rgba(73,204,144,.1); }
    .HttpPost .MethoedType { background: #49cc90; }
    .HttpPut { background: rgba(252,161,48,.1); }
    .HttpPut .MethoedType { background: #fca130; }
    .HttpDelete { background: rgba(249,62,62,.1); }
    .HttpDelete .MethoedType { background: #f93e3e; }
    .HttpTrace { }
    .HttpTrace .MethoedType { }
    .HttpHead { }
    .HttpHead .MethoedType { }
    .HttpOptions { }
    .HttpOptions .MethoedType { }
    .HttpConnect { }
    .HttpConnect .MethoedType { }
    .el-collapse-item__content { padding-bottom: 0px; border: none; }
</style>

<div id="app">


    <div class="layui-row layui-col-space15" style="background-color:#F1F1F1;">
        <div class="layui-col-md8">

            <div class="layui-tab layui-tab-brief" style=" background-color: #ffffff;">
                @*<ul class="layui-tab-title">
                        <li class="layui-this">视图资源</li>
                        <li>API资源</li>
                    </ul>*@
                <div class="layui-tab-content">
                    <div class="layui-tab-item layui-show">
                        <div style="margin-bottom:8px">
                            <button class="layui-btn" @@click="showControllerForm()">新增控制器</button>
                        </div>

                        <div class="layui-field-box" style="padding:15px 0px 0px 0px;">
                            <div v-if="!viewRoute_controllers||viewRoute_controllers.length===0" style="padding:8px">无控制器。</div>
                            <el-collapse v-for="ctrl in viewRoute_controllers" :key="ctrl.controllerId" :value="ctrl.controllerId" style="margin-bottom:25px;border:none;">
                                <el-collapse-item class="middle" :name="ctrl.controllerId" style="">
                                    <template slot="title">
                                        {{ctrl.controllerPath}}({{ctrl.controllerAlias}})
                                        <div style="margin-left:8px">
                                            <el-button type="primary" icon="el-icon-plus" circle size="mini" @@click="function(e){showMethodForm(null, ctrl, null);e.cancelBubble = true;}"></el-button>
                                            <el-button type="warning" icon="el-icon-edit" circle size="mini" @@click="function(e){showControllerForm(ctrl, null);e.cancelBubble = true;}"></el-button>
                                            <el-button type="danger" icon="el-icon-delete" circle size="mini" @@click="function(e){delCtrl(ctrl);e.cancelBubble = true;}"></el-button>
                                        </div>
                                    </template>
                                    <div v-if="!ctrl.methods||ctrl.methods.length===0" style="padding:8px">无方法。</div>
                                    <div v-for="method in ctrl.methods" :key="method.methodId" :class="method.methodType" style="padding:8px;">
                                        <el-tag class="MethoedType" style="color:white">{{method.methodType}}</el-tag>
                                        <span style="margin-left:8px">{{method.completePath}}({{method.methodAlias}})</span>
                                        <span style="margin-left:8px">
                                            <el-button type="warning" icon="el-icon-edit" circle size="mini" @@click="function(e){showMethodForm(method, ctrl, null);e.cancelBubble = true;}"></el-button>
                                            <el-button type="danger" icon="el-icon-delete" circle size="mini" @@click="function(e){delMethod(method);e.cancelBubble = true;}"></el-button>
                                        </span>
                                    </div>
                                </el-collapse-item>
                            </el-collapse>
                        </div>
                        @*<fieldset class="layui-elem-field" style="margin-top: 35px">
                                <legend>控制器</legend>
                            </fieldset>*@
                    </div>
                    <div class="layui-tab-item">
                        <div style="margin-bottom:8px">
                            <button class="layui-btn" @@click="showAreaForm()">新增区域</button>
                            <button class="layui-btn" @@click="showControllerForm()">新增控制器</button>
                        </div>
                        <div class="layui-tab-item">
                            <div style="margin-bottom:8px">
                                <button class="layui-btn" @@click="showAreaForm()">新增区域</button>
                                <button class="layui-btn" @@click="showControllerForm()">新增控制器</button>
                            </div>

                            <fieldset class="layui-elem-field">
                                <legend>区域</legend>
                                <div class="layui-field-box">
                                    <div v-if="!apiRoute_areas||apiRoute_areas.length===0" style="padding:8px">无区域。</div>
                                    <el-collapse v-for="area in apiRoute_areas" :key="area.areaId" :value="area.areaId">

                                        <el-collapse-item class="first" :name="area.areaId">


                                            <template slot="title">
                                                {{area.areaPath}}({{area.areaAlias}})
                                                <div style="margin-left:8px">
                                                    <el-button type="primary" icon="el-icon-plus" circle size="mini" @@click="function(e){showControllerForm(null, area);e.cancelBubble = true;}"></el-button>
                                                    <el-button type="warning" icon="el-icon-edit" circle size="mini" @@click="function(e){showAreaForm(area);e.cancelBubble = true;}"></el-button>
                                                    <el-button type="danger" icon="el-icon-delete" circle size="mini" @@click="function(e){delArea(area);e.cancelBubble = true;}"></el-button>
                                                </div>
                                            </template>
                                            <div v-if="!area.controllers||area.controllers.length===0" style="padding:8px">无控制器。</div>
                                            <el-collapse v-for="ctrl in area.controllers" :key="ctrl.controllerId" :value="ctrl.controllerId">

                                                <el-collapse-item class="second" :name="ctrl.controllerId">

                                                    <template slot="title">
                                                        {{ctrl.controllerPath}}({{ctrl.controllerAlias}})
                                                        <div style="margin-left:8px">
                                                            <el-button type="primary" icon="el-icon-plus" circle size="mini" @@click="function(e){showMethodForm(null, ctrl, area);e.cancelBubble = true;}"></el-button>
                                                            <el-button type="warning" icon="el-icon-edit" circle size="mini" @@click="function(e){showControllerForm(ctrl, area);e.cancelBubble = true;}"></el-button>
                                                            <el-button type="danger" icon="el-icon-delete" circle size="mini" @@click="function(e){delCtrl(ctrl);e.cancelBubble = true;}"></el-button>
                                                        </div>
                                                    </template>
                                                    <div v-if="!ctrl.methods||ctrl.methods.length===0" style="padding:8px">无方法。</div>
                                                    <div v-for="method in ctrl.methods" :key="method.methodId" :class="method.methodType" style="padding:8px">
                                                        <el-tag class="MethoedType" style="color:white">{{method.methodType}}</el-tag>
                                                        <span style="margin-left:8px">{{method.completePath}}({{method.methodAlias}})</span>
                                                        <span style="margin-left:8px">
                                                            <el-button type="warning" icon="el-icon-edit" circle size="mini" @@click="function(e){showMethodForm(method, ctrl, area);e.cancelBubble = true;}"></el-button>
                                                            <el-button type="danger" icon="el-icon-delete" circle size="mini" @@click="function(e){delMethod(method);e.cancelBubble = true;}"></el-button>
                                                        </span>
                                                    </div>
                                                </el-collapse-item>
                                            </el-collapse>
                                        </el-collapse-item>
                                    </el-collapse>
                                </div>

                            </fieldset>

                            <fieldset class="layui-elem-field" style="margin-top:35px">
                                <legend>控制器</legend>
                                <div class="layui-field-box">
                                    <div v-if="!apiRoute_controllers||apiRoute_controllers.length===0" style="padding:8px">无控制器。</div>
                                    <el-collapse v-for="ctrl in apiRoute_controllers" :key="ctrl.controllerId" :value="ctrl.controllerId">

                                        <el-collapse-item class="second" :name="ctrl.controllerId" style="border: 1px solid #DCDFE6;">
                                            <template slot="title">
                                                {{ctrl.controllerPath}}({{ctrl.controllerAlias}})
                                                <div style="margin-left:8px">
                                                    <el-button type="primary" icon="el-icon-plus" circle size="mini" @@click="function(e){showMethodForm(null, ctrl, null);e.cancelBubble = true;}"></el-button>
                                                    <el-button type="warning" icon="el-icon-edit" circle size="mini" @@click="function(e){showControllerForm(ctrl, null);e.cancelBubble = true;}"></el-button>


                                                    <el-button type="danger" icon="el-icon-delete" circle size="mini" @@click="function(e){delCtrl(ctrl);e.cancelBubble = true;}"></el-button>
                                                </div>
                                            </template>
                                            <div v-if="!ctrl.methods||ctrl.methods.length===0" style="padding:8px">无方法。</div>
                                            <div v-for="method in ctrl.methods" :key="method.methodId" :class="method.methodType" style="padding:8px">
                                                <el-tag class="MethoedType" style="color:white">{{method.methodType}}</el-tag>
                                                <span style="margin-left:8px">{{method.completePath}}({{method.methodAlias}})</span>
                                                <span style="margin-left:8px">

                                                    <el-button type="warning" icon="el-icon-edit" circle size="mini" @@click="function(e){showMethodForm(method, ctrl, null);e.cancelBubble = true;}"></el-button>

                                                    <el-button type="danger" icon="el-icon-delete" circle size="mini" @@click="function(e){delMethod(method);e.cancelBubble = true;}"></el-button>
                                                </span>
                                            </div>
                                        </el-collapse-item>
                                    </el-collapse>
                                </div>
                            </fieldset>
                        </div>
                    </div>
                </div>

                @*<h4 v-if="viewRoute_controllers.length<=0">暂无数据</h4>*@
            </div>



        </div>
        <div class="view_search layui-col-md4" style="height:550px; background-color:#fff; margin-top:17px;">
            <div class="layui-card">
                <div class="layui-card-header">帮助面板</div>
                <div class="layui-card-body">
                    菜单功能模块维护页面<br>
                    功能菜单即控制器下的方法<br>
                    点击添加/修改图标对功能菜单进行维护
                </div>
            </div>

            <div class="layui-card-header">查询</div>


            <div class="layui-form layui-form-pane" action="">

                <div class="layui-form-item">
                    <label class="layui-form-label">功能模块</label>
                    <div class="layui-input-block">
                        <input type="text" name="title" placeholder="输入要搜索的功能模块..." autocomplete="off" v-model="condition_controller" class="layui-input">
                    </div>
                </div>
                <div class="layui-form-item">
                    <button class="layui-btn" @@click="contentSearch" lay-filter="formDemoPane">&nbsp;&nbsp;&nbsp;&nbsp;查询 &nbsp;&nbsp;&nbsp;&nbsp;</button>
                </div>
            </div>
        </div>

    </div>

    <div id="ctrl_layer" style="padding:40px;display: none">
        <el-form :model="ctrlForm" :rules="ctrlRules" ref="ctrlForm" label-width="100px">
            @*<el-form-item label="区域路径">
                    <el-input v-model="ctrlForm.areaPath" placeholder="无" readonly></el-input>
                </el-form-item>
                <el-form-item label="区域别名">
                    <el-input v-model="ctrlForm.areaAlias" placeholder="无" readonly></el-input>
                </el-form-item>*@
            <el-form-item label="模块路径" prop="controllerPath">
                <el-input v-model="ctrlForm.controllerPath"></el-input>
            </el-form-item>
            <el-form-item label="模块名称">
                <el-input v-model="ctrlForm.controllerAlias"></el-input>
            </el-form-item>
            <el-form-item label="是否API">
                <el-switch v-model="ctrlForm.isApi"></el-switch>
            </el-form-item>
            <el-form-item label="排序值">
                <el-input-number v-model="ctrlForm.sortValue" :min="1"></el-input-number>
            </el-form-item>
        </el-form>
    </div>
    <div id="method_layer" style="padding:40px;display: none">
        <el-form :model="methodForm" :rules="methodRules" ref="methodForm" label-width="100px">
            @*<el-form-item label="区域路径">
                    <el-input v-model="methodForm.areaPath" placeholder="无" readonly></el-input>
                </el-form-item>
                <el-form-item label="区域别名">
                    <el-input v-model="methodForm.areaAlias" placeholder="无" readonly></el-input>
                </el-form-item>*@
            <el-form-item label="模块路径">
                <el-input v-model="methodForm.controllerPath" readonly></el-input>
            </el-form-item>
            <el-form-item label="模块名称">
                <el-input v-model="methodForm.controllerAlias" readonly></el-input>
            </el-form-item>
            <el-form-item label="方法路径" prop="methodPath">
                <el-input v-model="methodForm.methodPath"></el-input>
            </el-form-item>
            <el-form-item label="方法名称">
                <el-input v-model="methodForm.methodAlias"></el-input>
            </el-form-item>
            <el-form-item label="方法类型">
                <el-select v-model="methodForm.methodType" placeholder="请选择方法类型">
                    <el-option label="HttpGet" value="HttpGet"></el-option>
                    <el-option label="HttpPost" value="HttpPost"></el-option>
                    <el-option label="HttpPut" value="HttpPut"></el-option>
                    <el-option label="HttpDelete" value="HttpDelete"></el-option>
                    <el-option label="HttpTrace" value="HttpTrace"></el-option>
                    <el-option label="HttpHead" value="HttpHead"></el-option>
                    <el-option label="HttpOptions" value="HttpOptions"></el-option>
                    <el-option label="HttpConnect" value="HttpConnect"></el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="排序值">
                <el-input-number v-model="methodForm.sortValue" :min="1"></el-input-number>
            </el-form-item>
        </el-form>
    </div>
    <div id="condtion_layer" style="padding:10px 20px;display: none;">
        <el-container style="height:300px;border: 1px solid #eee">
            <el-header style="height:30px;padding-top:5px;border-bottom: 1px solid #eee"> <label class="el-icon-share">条件树</label></el-header>
            <el-container>
                <el-aside style="width:50%">
                    <el-tree :data="conditionData" :highlight-current="true" size="small" style="margin:0px" :expand-on-click-node="false" @@node-click="handleNodeClick"></el-tree>
                </el-aside>
                <el-main class="layui-col-xs6 layui-col-sm6 layui-col-md6" style="padding:0px">
                    <el-tabs type="border-card" style="height:180px">
                        <el-tab-pane label="信息">
                            @*<span slot="label"></span>*@
                            <el-form ref="form" size="mini" :model="conditionCurrent" label-width="80px">
                                <el-form-item label="条件名称">
                                    <el-input v-model="conditionCurrent.conditionName" :disabled="true"></el-input>
                                </el-form-item>
                                <el-form-item label="条件序号">
                                    <el-input v-model="conditionCurrent.sortValue" :disabled="true"></el-input>
                                </el-form-item>

                                <el-form-item>
                                    <el-button type="danger" :disabled="enableBtn" @@click="handleCondition(4)">删除</el-button>
                                </el-form-item>
                            </el-form>
                        </el-tab-pane>
                        <el-tab-pane label="编辑">
                            <el-form ref="form" size="mini" :model="conditionCurrent" label-width="80px">
                                <el-form-item label="条件名称">
                                    <el-input v-model="conditionCurrent.conditionName"></el-input>
                                </el-form-item>
                                <el-form-item label="条件序号">
                                    <el-input v-model="conditionCurrent.sortValue"></el-input>
                                </el-form-item>
                                <el-form-item>
                                    <el-button type="primary" :disabled="enableBtn" @@click="handleCondition(2)">修改</el-button>
                                </el-form-item>
                            </el-form>
                        </el-tab-pane>
                        <el-tab-pane label="根节点">
                            <el-form ref="form" size="mini" :model="conditionRoot" label-width="80px">
                                <el-form-item label="条件名称">
                                    <el-input v-model="conditionRoot.conditionName"></el-input>
                                </el-form-item>
                                <el-form-item label="条件序号">
                                    <el-input v-model="conditionRoot.sortValue"></el-input>
                                </el-form-item>
                                <el-form-item>
                                    <el-button type="primary" @@click="handleCondition(1)">立即创建</el-button>
                                </el-form-item>
                            </el-form>
                        </el-tab-pane>

                        <el-tab-pane label="子节点">
                            <el-form ref="form" size="mini" :model="conditionChild" label-width="80px">
                                <el-form-item label="子项名称">
                                    <el-input v-model="conditionChild.conditionName"></el-input>
                                </el-form-item>
                                <el-form-item label="子项序号">
                                    <el-input v-model="conditionChild.sortValue"></el-input>
                                </el-form-item>
                                <el-form-item>
                                    <el-button type="primary" :disabled="enableBtn" @@click="handleCondition(3)">立即创建</el-button>
                                </el-form-item>
                            </el-form>
                        </el-tab-pane>
                    </el-tabs>
                </el-main>
            </el-container>
        </el-container>
        <el-container style="height:300px;border: 1px solid #eee;margin-top:5px">
            <el-header style="height:30px;padding-top:5px;border-bottom: 1px solid #eee"> <label class="el-icon-share">条件值树</label>{{currentConditionName==""?"":" <"+currentConditionName+">"}}</el-header>
            <el-container>
                <el-aside style="width:50%">
                    <el-tree :data="propertyData" :highlight-current="true" size="small" style="margin:0px" :expand-on-click-node="false" @@node-click="PropertyNodeClick"></el-tree>
                </el-aside>
                <el-main class="layui-col-xs6 layui-col-sm6 layui-col-md6" style="padding:0px">
                    <el-tabs type="border-card" style="height:180px">
                        <el-tab-pane label="信息">
                            <el-form ref="form" size="mini" :model="propertyCurrent" label-width="80px">
                                <el-form-item label="名称">
                                    <el-input v-model="propertyCurrent.prototypeName" :disabled="true"></el-input>
                                </el-form-item>
                                <el-form-item label="序号">
                                    <el-input v-model="propertyCurrent.sortValue" :disabled="true"></el-input>
                                </el-form-item>
                                <el-form-item>
                                    <el-button type="danger" :disabled="enableBtn1" @@click="handleProperty(4)">删除</el-button>
                                </el-form-item>
                            </el-form>
                        </el-tab-pane>
                        <el-tab-pane label="编辑">
                            <el-form ref="form" size="mini" :model="propertyCurrent" label-width="80px">
                                <el-form-item label="名称">
                                    <el-input v-model="propertyCurrent.prototypeName"></el-input>
                                </el-form-item>
                                <el-form-item label="序号">
                                    <el-input v-model="propertyCurrent.sortValue"></el-input>
                                </el-form-item>
                                <el-form-item>
                                    <el-button type="primary" :disabled="enableBtn1" @@click="handleProperty(2)">修改</el-button>
                                </el-form-item>
                            </el-form>
                        </el-tab-pane>
                        <el-tab-pane label="根节点">
                            <el-form ref="form" size="mini" :model="propertyRoot" label-width="80px">
                                <el-form-item label="名称">
                                    <el-input v-model="propertyRoot.prototypeName"></el-input>
                                </el-form-item>
                                <el-form-item label="序号">
                                    <el-input v-model="propertyRoot.sortValue"></el-input>
                                </el-form-item>
                                <el-form-item>
                                    <el-button type="primary" :disabled="enableBtn" @@click="handleProperty(1)">立即创建</el-button>
                                </el-form-item>
                            </el-form>
                        </el-tab-pane>
                        <el-tab-pane label="子节点">
                            <el-form ref="form" size="mini" :model="propertyChild" label-width="80px">
                                <el-form-item label="子项名称">
                                    <el-input v-model="propertyChild.prototypeName"></el-input>
                                </el-form-item>
                                <el-form-item label="子项序号">
                                    <el-input v-model="propertyChild.sortValue"></el-input>
                                </el-form-item>
                                <el-form-item>
                                    <el-button type="primary" :disabled="enableBtn1" @@click="handleProperty(3)">立即创建</el-button>
                                </el-form-item>
                            </el-form>
                        </el-tab-pane>
                    </el-tabs>
                </el-main>
            </el-container>
        </el-container>

    </div>
    <div id="methodcondtion_layer" style="padding:10px 20px;display: none;">
        <el-container>
            <el-aside style="width:50%;border: 1px solid #eee">
                <p style="margin:10px 10px">条件树</p>
                <el-tree :data="allMethodCondition" ref='condition' node-key="id" :default-checked-keys="conditionCheckedKey" show-checkbox style="border-top:1px solid #eee;min-height:500px"></el-tree>
            </el-aside>
            <el-main class="layui-col-xs6 layui-col-sm6 layui-col-md6" style="padding:0px;border: 1px solid #eee">
                <p style="margin:10px 10px">条件值树</p>
                <el-tree :data="allMethodProperty" ref='property' node-key="id" :default-checked-keys="propertyCheckedKey" show-checkbox style="border-top: 1px solid #eee;min-height:500px"></el-tree>
            </el-main>
        </el-container>
    </div>

</div>


<script>
    Vue.component('div-methods', {
        template:
            '<div>\
                <div v-if="!m_methods||m_methods.length===0" style="padding:8px">无方法。</div>\
                <div v-for="method in m_methods" :key="method.methodId" :class="method.methodType" style="padding:8px">\
                    <el-tag class="MethoedType" style="color:white">{{method.methodType}}</el-tag>\
                    <span style="margin-left:8px">{{method.completePath}}({{method.methodAlias}})</span>\
                    <span style="margin-left:8px">\
                        <el-button type="warning" icon="el-icon-edit" circle size="mini" @@click="function(e){$emit(\'edit\',method, controller, area);e.cancelBubble = true;}"></el-button>\
                        <el-button type="danger" icon="el-icon-delete" circle size="mini" @@click="function(e){$emit(\'delete\', method);e.cancelBubble = true;}"></el-button>\
                    </span>\
                </div>\
            </div>',
        props: {
            methods: {
                type: Array,
                default: function () {
                    return []
                }
            },
            controller: {
                default: {}
            },
            area: {
                default: {}
            },
        },
        data: function () {
            return {
                m_methods: this.methods,
            }
        }
    })
</script>



<script>
    layui.use(['element', 'layer', 'form'], function () {
        var layer = layui.layer
        var element = layui.element
        var form = layui.form;
        var $ = layui.$
        var generateLayer_index = 0
        var selectedGroupID = ""
        new Vue({
            el: '#app',
            data: function () {
                return {
                    areaForm: {
                        "id": "",
                        "areaAlias": "",
                        "areaPath": ""
                    },
                    areaRules: {
                        areaPath: [{ required: true, message: '请输入区域路径', trigger: 'blur' },],
                    },
                    ctrlForm: {
                        "id": "",
                        "areaId": "",
                        "isApi": false,
                        "controllerAlias": "",
                        "controllerPath": "",
                        areaPath: '',
                        areaAlias: '',
                        sortValue: 1,
                    },
                    ctrlRules: {
                        controllerPath: [{ required: true, message: '请输入控制器路径', trigger: 'blur' },],
                    },
                    methodForm: {
                        "id": "",
                        "controllerId": "",
                        "methodAlias": "",
                        "methodPath": "",
                        "methodType": "HttpGet",
                        "controllerAlias": "",
                        "controllerPath": "",
                        areaPath: '',
                        areaAlias: '',
                        sortValue: 1,
                    },
                    methodRules: {
                        methodPath: [{ required: true, message: '请输入方法路径', trigger: 'blur' },],
                    },
                    apiRoute_areas: [],
                    apiRoute_controllers: [],
                    viewRoute_areas: [],
                    viewRoute_controllers: [],
                    conditionData: [],
                    propertyData: [],
                    currentConditionName: "",
                    conditionCurrent: {
                        id: "",
                        conditionName: "",
                        sortValue: "",
                        parentId: "0",
                    },
                    conditionRoot: {
                        id: "",
                        conditionName: "",
                        sortValue: "",
                        parentId: "0",
                    },
                    conditionChild: {
                        id: "",
                        conditionName: "",
                        sortValue: "",
                        parentId: "",
                    },
                    propertyRoot: {
                        id: "",
                        dataConditionId: "",
                        prototypeName: "",
                        prototypeValue: "",
                        parentPrototypeValue: "0",
                        sortValue: ""
                    },
                    propertyCurrent: {
                        id: "",
                        dataConditionId: "",
                        prototypeName: "",
                        prototypeValue: "",
                        parentPrototypeValue: "0",
                        sortValue: ""
                    },
                    propertyChild: {
                        id: "",
                        dataConditionId: "",
                        prototypeName: "",
                        prototypeValue: "",
                        parentPrototypeValue: "0",
                        sortValue: ""
                    },
                    enableBtn: true,
                    enableBtn1: true,
                    allMethodCondition: [],
                    allMethodProperty: [],
                    viewRoute_controllersClone: [],
                    condition_controller: "",
                    currentMethodId: "",
                    conditionCheckedKey: [],
                    propertyCheckedKey: [],
                }
            },
            methods: {
                fetchList: function () {
                    var vm = this
                    axios.get('/api/SysRouteData')
                        .then(function (response) {
                            //vm.apiRoute_areas = response.data.content.apiRoute.areas
                            //vm.apiRoute_controllers = response.data.content.apiRoute.controllers
                            //vm.viewRoute_areas = response.data.content.viewRoute.areas
                            vm.viewRoute_controllers = response.data.content.viewRoute.controllers
                            vm.viewRoute_controllersClone = response.data.content.viewRoute.controllers
                        })
                        .catch(function (error) {
                            console.log(error);
                        })
                },
                // 弹出窗
                //showAreaForm: function (area) {
                //    var vm = this
                //    var isNew = !area
                //    if (isNew) {
                //        for (var key in vm.areaForm) {
                //            vm.areaForm[key] = ''
                //        }
                //    }
                //    else {
                //        vm.areaForm = Object.assign({}, area)
                //        vm.areaForm.id = area.areaId
                //    }
                //    generateLayer_index = layer.open({
                //        type: 1
                //        , title: isNew ? "新增区域" : "编辑区域" //不显示标题栏
                //        , closeBtn: false
                //        , shade: 0.8
                //        , id: 'LAY_layuipro' //设定一个id，防止重复弹出
                //        , content: $('#area_layer') //这里content是一个DOM，注意：最好该元素要存放在body最外层，否则可能被其它的相对元素所影响
                //        , btn: ['保存', '取消']
                //        , yes: function (index, layero) {
                //            vm.$refs['areaForm'].validate((valid) => {
                //                if (!valid) return
                //                if (!vm.areaForm.areaAlias)
                //                    vm.areaForm.areaAlias = vm.areaForm.areaPath
                //                axios.post('/api/SysRouteData/AddOrUpdateArea', vm.areaForm)
                //                    .then(function (response) {
                //                        if (response.data.isSuccess) {
                //                            vm.$notify({ title: '成功', message: response.data.message, type: 'success' })
                //                            vm.closeGenerateLayer()
                //                            vm.fetchList()
                //                        }
                //                        else {
                //                            vm.$notify({ title: '失败', message: response.data.message, type: 'error' })
                //                        }
                //                    })
                //                    .catch(function (error) {
                //                        console.log(error);
                //                        vm.$notify({ title: '异常', message: error, type: 'error' })
                //                    });
                //            });
                //        }
                //        , btn2: function (index, layero) {
                //            vm.closeGenerateLayer()
                //        }
                //    });
                //},
                showControllerForm: function (ctrl, area) {
                    var vm = this
                    var isNew = !ctrl
                    if (isNew) {
                        for (var key in vm.ctrlForm) {
                            vm.ctrlForm[key] = ''
                        }
                        vm.ctrlForm.isApi = false
                        vm.ctrlForm.sortValue = 1
                        //if (!!area) {
                        //    vm.ctrlForm.areaId = area.areaId
                        //    vm.ctrlForm.areaPath = area.areaPath
                        //    vm.ctrlForm.areaAlias = area.areaAlias
                        //}
                    }
                    else {
                        vm.ctrlForm = Object.assign({}, area, ctrl)
                        vm.ctrlForm.id = ctrl.controllerId
                        vm.ctrlForm.sortValue = ctrl.sortValue
                        if (!!area)
                            vm.ctrlForm.areaId = area.areaId
                    }
                    generateLayer_index = layer.open({
                        type: 1
                        , title: isNew ? "新增控制器" : "编辑控制器" //不显示标题栏
                        , closeBtn: false
                        , shade: 0.8
                        , id: 'LAY_layuipro' //设定一个id，防止重复弹出
                        , content: $('#ctrl_layer') //这里content是一个DOM，注意：最好该元素要存放在body最外层，否则可能被其它的相对元素所影响
                        , btn: ['保存', '取消']
                        , yes: function (index, layero) {
                            vm.$refs['ctrlForm'].validate((valid) => {
                                if (!valid) return
                                if (!vm.ctrlForm.controllerAlias)
                                    vm.ctrlForm.controllerAlias = vm.ctrlForm.controllerPath
                                axios.post('/api/SysRouteData/AddOrUpdateController', vm.ctrlForm)
                                    .then(function (response) {
                                        if (response.data.isSuccess) {
                                            vm.$notify({ title: '成功', message: response.data.message, type: 'success' })
                                            vm.closeGenerateLayer()
                                            vm.fetchList()
                                        }
                                        else {
                                            vm.$notify({ title: '失败', message: response.data.message, type: 'error' })
                                        }
                                    })
                                    .catch(function (error) {
                                        console.log(error);
                                        vm.$notify({ title: '异常', message: error, type: 'error' })
                                    });
                            });
                        }
                        , btn2: function (index, layero) {
                            vm.closeGenerateLayer()
                        }
                    });
                },
                showMethodForm: function (method, ctrl, area) {
                    var vm = this
                    var isNew = !method
                    if (isNew) {
                        for (var key in vm.methodForm) {
                            vm.methodForm[key] = ''
                        }
                        vm.methodForm.methodType = "HttpGet"
                        vm.methodForm.sortValue = 1
                        vm.methodForm.controllerPath = ctrl.controllerPath
                        vm.methodForm.controllerAlias = ctrl.controllerAlias
                        if (!!area) {
                            vm.methodForm.areaPath = area.areaPath
                            vm.methodForm.areaAlias = area.areaAlias
                        }
                    }
                    else {
                        vm.methodForm = Object.assign({}, area, ctrl, method)
                        vm.methodForm.id = method.methodId
                        vm.methodForm.sortValue = method.sortValue
                    }
                    vm.methodForm.controllerId = ctrl.controllerId
                    generateLayer_index = layer.open({
                        type: 1
                        , title: isNew ? "新增方法" : "编辑方法" //不显示标题栏
                        , closeBtn: false
                        , shade: 0.8
                        , id: 'LAY_layuipro' //设定一个id，防止重复弹出
                        , content: $('#method_layer') //这里content是一个DOM，注意：最好该元素要存放在body最外层，否则可能被其它的相对元素所影响
                        , btn: ['保存', '取消']
                        , yes: function (index, layero) {
                            vm.$refs['methodForm'].validate((valid) => {
                                if (!valid) return
                                if (!vm.methodForm.methodAlias)
                                    vm.methodForm.methodAlias = vm.methodForm.methodPath
                                axios.post('/api/SysRouteData/AddOrUpdateMethod', vm.methodForm)
                                    .then(function (response) {
                                        if (response.data.isSuccess) {
                                            vm.$notify({ title: '成功', message: response.data.message, type: 'success' })
                                            vm.closeGenerateLayer()
                                            vm.fetchList()
                                        }
                                        else {
                                            vm.$notify({ title: '失败', message: response.data.message, type: 'error' })
                                        }
                                    })
                                    .catch(function (error) {
                                        console.log(error);
                                        vm.$notify({ title: '异常', message: error, type: 'error' })
                                    });
                            });
                        }
                        , btn2: function (index, layero) {
                            vm.closeGenerateLayer()
                        }
                    });
                },
                // 删除
                //delArea: function (area) {
                //    var vm = this
                //    vm.$confirm('此操作将永久删除该区域, 是否继续?', '提示', { confirmButtonText: '删除', cancelButtonText: '取消', type: 'warning' })
                //        .then(function () {
                //            axios.delete('/api/SysRouteData/DeleteAreaRoute/' + area.areaId)
                //                .then(function (response) {
                //                    if (response.data.isSuccess) {
                //                        vm.$notify({ title: '成功', message: response.data.message, type: 'success' })
                //                        vm.fetchList()
                //                    }
                //                    else {
                //                        vm.$notify({ title: '失败', message: response.data.message, type: 'error' })
                //                    }
                //                })
                //                .catch(function (error) {
                //                    console.log(error);
                //                    vm.$notify({ title: '异常', message: error, type: 'error' })
                //                });
                //        })
                //},
                delCtrl: function (ctrl) {
                    var vm = this
                    vm.$confirm('此操作将永久删除该控制器, 是否继续?', '提示', { confirmButtonText: '删除', cancelButtonText: '取消', type: 'warning' })
                        .then(function () {
                            axios.delete('/api/SysRouteData/DeleteControllerRoute/' + ctrl.controllerId)
                                .then(function (response) {
                                    if (response.data.isSuccess) {
                                        vm.$notify({ title: '成功', message: response.data.message, type: 'success' })
                                        vm.fetchList()
                                    }
                                    else {
                                        vm.$notify({ title: '失败', message: response.data.message, type: 'error' })
                                    }
                                })
                                .catch(function (error) {
                                    console.log(error);
                                    vm.$notify({ title: '异常', message: error, type: 'error' })
                                });
                        })
                },
                delMethod: function (method) {
                    var vm = this
                    vm.$confirm('此操作将永久删除该方法, 是否继续?', '提示', { confirmButtonText: '删除', cancelButtonText: '取消', type: 'warning' })
                        .then(function () {
                            axios.delete('/api/SysRouteData/DeleteMethodRoute/' + method.methodId)
                                .then(function (response) {
                                    if (response.data.isSuccess) {
                                        vm.$notify({ title: '成功', message: response.data.message, type: 'success' })
                                        vm.fetchList()
                                    }
                                    else {
                                        vm.$notify({ title: '失败', message: response.data.message, type: 'error' })
                                    }
                                })
                                .catch(function (error) {
                                    console.log(error);
                                    vm.$notify({ title: '异常', message: error, type: 'error' })
                                });
                        })
                },
                closeGenerateLayer: function () {
                    layer.close(generateLayer_index);
                },
                handleNodeClick: function (data) {
                    var vm = this;
                    vm.conditionCurrent = data;
                    vm.currentConditionName = data.conditionName
                    vm.enableBtn = false;
                    vm.refreshProperty(data.id);
                },
                PropertyNodeClick: function (data) {
                    var vm = this;
                    vm.enableBtn1 = false;
                    vm.propertyCurrent = data;
                },
                showConditionForm: function () {
                    var vm = this;
                    vm.refreshCondition();
                    //var docWidth = $(document).width();
                    //var docHeight = $(document).height();
                    //var layerWidth = docWidth > 800 ? 800 : docWidth;
                    //var layerHeight = docHeight > 800 ? 800 : docHeight;
                    generateLayer_index = layer.open({
                        type: 1
                        //, area: [layerWidth + 'px', layerHeight+'px']
                        , area: ['60%', '80%']
                        , title: "查询条件维护"//不显示标题栏
                        , closeBtn: false
                        , shade: 0.8
                        , id: 'LAY_layuipro' //设定一个id，防止重复弹出
                        , content: $('#condtion_layer') //这里content是一个DOM，注意：最好该元素要存放在body最外层，否则可能被其它的相对元素所影响
                        , btn: ['关闭']
                        , btn1: function (index, layero) {
                            vm.closeGenerateLayer()
                        }
                    });
                },
                handleCondition: function (type) {
                    var vm = this;
                    if (type == 1 || type == 3) {
                        var params = vm.conditionRoot;
                        if (type == 3) {
                            vm.conditionChild.parentId = vm.conditionCurrent.id;
                            params = vm.conditionChild;
                        }
                        axios.post('/api/DataCondition/Add', params)
                            .then(function (response) {
                                if (response.data.isSuccess) {
                                    vm.refreshCondition();
                                    vm.$notify({ title: '成功', message: response.data.message, type: 'success' })
                                }
                                else {
                                    vm.$notify({ title: '失败', message: response.data.message, type: 'error' })
                                }
                            })
                            .catch(function (error) {
                                console.log(error);
                                vm.$notify({ title: '异常', message: error, type: 'error' })
                            });
                    } else if (type == 2) {
                        axios.put('/api/DataCondition/Update', vm.conditionCurrent)
                            .then(function (response) {
                                if (response.data.isSuccess) {
                                    vm.refreshCondition();
                                    vm.$notify({ title: '成功', message: response.data.message, type: 'success' })
                                }
                                else {
                                    vm.$notify({ title: '失败', message: response.data.message, type: 'error' })
                                }
                            })
                            .catch(function (error) {
                                console.log(error);
                                vm.$notify({ title: '异常', message: error, type: 'error' })
                            });
                    } else if (type == 4) {
                        axios.delete('/api/DataCondition/Delete/' + vm.conditionCurrent.id)
                            .then(function (response) {
                                if (response.data.isSuccess) {
                                    vm.refreshCondition();
                                    vm.$notify({ title: '成功', message: response.data.message, type: 'success' })
                                }
                                else {
                                    vm.$notify({ title: '失败', message: response.data.message, type: 'error' })
                                }
                            })
                            .catch(function (error) {
                                console.log(error);
                                vm.$notify({ title: '异常', message: error, type: 'error' })
                            });
                    }
                },
                handleProperty: function (type) {
                    var vm = this;
                    vm.propertyRoot.DataConditionId = vm.conditionCurrent.id;
                    //添加
                    if (type == 1 || type == 3) {
                        var params = vm.propertyRoot;
                        //子节点
                        if (type == 3) {
                            // vm.propertyChild.parentId = vm.propertyCurrent.id;//当前节点ID
                            vm.propertyChild.parentPrototypeValue = vm.propertyCurrent.prototypeValue;
                            vm.propertyChild.dataConditionId = vm.conditionCurrent.id;//条件id
                            params = vm.propertyChild;
                        }
                        axios.post('/api/DataConditionProperty/Add', params)
                            .then(function (response) {
                                if (response.data.isSuccess) {
                                    vm.refreshProperty(vm.conditionCurrent.id);
                                    vm.$notify({ title: '成功', message: response.data.message, type: 'success' })
                                }
                                else {
                                    vm.$notify({ title: '失败', message: response.data.message, type: 'error' })
                                }
                            })
                            .catch(function (error) {
                                console.log(error);
                                vm.$notify({ title: '异常', message: error, type: 'error' })
                            });
                    }
                    //修改
                    else if (type == 2) {
                        vm.propertyCurrent.dataConditionId = vm.conditionCurrent.id;
                        axios.put('/api/DataConditionProperty/Update', vm.propertyCurrent)
                            .then(function (response) {
                                if (response.data.isSuccess) {
                                    vm.refreshProperty(vm.conditionCurrent.id);
                                    vm.$notify({ title: '成功', message: response.data.message, type: 'success' })
                                }
                                else {
                                    vm.$notify({ title: '失败', message: response.data.message, type: 'error' })
                                }
                            })
                            .catch(function (error) {
                                console.log(error);
                                vm.$notify({ title: '异常', message: error, type: 'error' })
                            });
                    } else if (type == 4) {
                        axios.delete('/api/DataConditionProperty/Delete/' + vm.propertyCurrent.id)
                            .then(function (response) {
                                if (response.data.isSuccess) {
                                    vm.refreshProperty(vm.conditionCurrent.id);
                                    vm.$notify({ title: '成功', message: response.data.message, type: 'success' })
                                }
                                else {
                                    vm.$notify({ title: '失败', message: response.data.message, type: 'error' })
                                }
                            })
                            .catch(function (error) {
                                console.log(error);
                                vm.$notify({ title: '异常', message: error, type: 'error' })
                            });
                    }
                },
                refreshCondition: function () {
                    var vm = this;
                    vm.enableBtn = true;
                    vm.conditionCurrent = {
                        id: "",
                        conditionName: "",
                        sortValue: "",
                        parentId: "0",
                    };
                    vm.conditionRoot = {
                        id: "",
                        conditionName: "",
                        sortValue: "",
                        parentId: "0",
                    };
                    vm.conditionChild = {
                        id: "",
                        conditionName: "",
                        sortValue: "",
                        parentId: "",
                    };
                    vm.propertyData = [];
                    vm.currentConditionName = "";
                    vm.refreshProperty();
                    axios.get('/api/DataCondition/Get')
                        .then(function (response) {
                            if (response.data.isSuccess) {
                                vm.conditionData = response.data.content.data;
                            }
                            else {
                                vm.conditionData = [];
                                vm.$notify({ title: '失败', message: response.data.message, type: 'error' })
                            }
                        })
                        .catch(function (error) {
                            console.log(error);
                            vm.$notify({ title: '异常', message: error, type: 'error' })
                        });
                },
                refreshProperty: function (conditionId) {
                    var vm = this;
                    vm.enableBtn1 = true;
                    vm.propertyRoot = {
                        id: "",
                        dataConditionId: "",
                        prototypeName: "",
                        prototypeValue: "",
                        parentPrototypeValue: "0",
                        sortValue: ""
                    };
                    vm.propertyCurrent = {
                        id: "",
                        dataConditionId: "",
                        prototypeName: "",
                        prototypeValue: "",
                        parentPrototypeValue: "0",
                        sortValue: ""
                    };
                    vm.propertyChild = {
                        id: "",
                        dataConditionId: "",
                        prototypeName: "",
                        prototypeValue: "",
                        parentPrototypeValue: "0",
                        sortValue: ""
                    };
                    if (conditionId) {
                        axios.get('/api/DataConditionProperty/Get/' + conditionId)
                            .then(function (response) {
                                if (response.data.isSuccess) {
                                    vm.propertyData = response.data.content.data;
                                }
                                else {
                                    vm.propertyData = [];
                                }
                            })
                            .catch(function (error) {
                                console.log(error);
                                vm.$notify({ title: '异常', message: error, type: 'error' })
                            });
                    }
                },
                showMethodConfigForm: function (methodId) {
                    //methodcondtion_layer
                    var vm = this;
                    vm.currentMethodId = methodId;
                    vm.getAllMethodCPTree();
                    generateLayer_index = layer.open({
                        type: 1
                        , area: ['800px', '800px']
                        , title: "查询条件维护"//不显示标题栏
                        , closeBtn: false
                        , shade: 0.8
                        , id: 'LAY_layuipro' //设定一个id，防止重复弹出
                        , content: $('#methodcondtion_layer') //这里content是一个DOM，注意：最好该元素要存放在body最外层，否则可能被其它的相对元素所影响
                        , btn: ['保存', '取消']
                        , yes: function (index, layero) {

                            var cdt = vm.$refs.condition.getCheckedNodes();
                            var clt = new Array();
                            for (var i = 0; i < cdt.length; i++) {
                                var item = new Object();
                                item.Id = cdt[i].id;
                                clt.push(item);
                            }
                            var prt = vm.$refs.property.getCheckedNodes();
                            var plt = new Array();
                            for (var i = 0; i < prt.length; i++) {
                                var item = new Object();
                                item.PrototypeValue = prt[i].prototypeValue;
                                if (prt[i].prototypeValue)
                                    plt.push(item);
                            }
                            var param = {
                                ConditionList: clt,
                                PropertyList: plt,
                                ModuleID: vm.currentMethodId
                            }
                            axios.post('/api/MethodConditionData/Add', param)
                                .then(function (response) {
                                    if (response.data.isSuccess) {
                                        vm.$notify({ title: '成功', message: response.data.message, type: 'success' })
                                    }
                                    else {
                                        vm.$notify({ title: '失败', message: response.data.message, type: 'error' })
                                    }
                                })
                                .catch(function (error) {
                                    vm.$notify({ title: '异常', message: error, type: 'error' })

                                });

                        }
                        , btn1: function (index, layero) {
                            vm.closeGenerateLayer()
                        }
                    });
                },
                getAllMethodCPTree: function () {
                    var vm = this;
                    axios.get('/api/DataConditionProperty/GetAll')
                        .then(function (response) {
                            if (response.data.isSuccess) {
                                vm.allMethodCondition = response.data.content.data.clist;
                                vm.allMethodProperty = response.data.content.data.plist;
                            }
                            else {
                                vm.allMethodProperty = [];
                            }
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                    vm.conditionCheckedKey = [];
                    vm.propertyCheckedKey = [];
                    axios.get('/api/MethodConditionData/Get/' + vm.currentMethodId)
                        .then(function (response) {
                            if (response.data.isSuccess) {
                                vm.conditionCheckedKey = response.data.content.condata;
                                vm.propertyCheckedKey = response.data.content.prydata;
                            }
                        })
                        .catch(function (error) {
                            console.log(error);
                        });

                },
                authConfigForm: function () { },
                contentSearch: function () {
                    var vm = this;
                    let usergroups = JSON.parse(JSON.stringify(vm.viewRoute_controllersClone));
                    let condition_controller = vm.condition_controller;
                    var result = JSLINQ(usergroups).Where(function (item) {
                        if (item.controllerAlias.indexOf(condition_controller) != -1 || condition_controller == "") {
                            //let children = JSLINQ(item.children).Where(function (user) {
                            //    if (user.name.indexOf(condition_controller) != -1 || condition_controller == "") return user
                            //})
                            //item.children = children.items;
                            return item;
                        }
                    })
                    vm.viewRoute_controllers = result.items;
                    //GetAll
                }
            },
            mounted: function () {
                element.render('collapse');
                var vm = this
                vm.fetchList();
            }
        })
    });
</script>