
@{
    ViewData["Title"] = "ElemeIndex";
}

<style>
    .v-modal {
        display: none;
    }

    #app {
        margin-top: 15px;
        padding: 15px;
        background-color: #fff;
    }
</style>
<div id="app">

    <el-form :inline="true" class="demo-form-inline">
        <el-form-item label="用户组名：">
            <el-input placeholder="用户组名：" v-model="searchName"></el-input>
        </el-form-item>
        <el-form-item label="级别：">
            <el-select v-model="searchLevel" placeholder="请选择">
                <el-option v-for="item in optLevel"
                           :key="item.value"
                           :label="item.label"
                           :value="item.value"
                           :disabled="item.disabled">
                </el-option>
            </el-select>
        </el-form-item>
    </el-form>
    <el-form :inline="true" class="demo-form-inline">
        <el-form-item>
            <el-button size="small" type="primary" @@click="fetchList">条件查询</el-button>
        </el-form-item>
        <el-form-item>
            <el-button size="small" type="primary" @@click="handleAdd">新增用户组</el-button>
        </el-form-item>
    </el-form>

    <el-table ref="multipleTable"
              :data="data"
              :border="true"
              tooltip-effect="dark"
              style="width: 100%"
            >
        <el-table-column label="用户组名称"
                         prop="name">
        </el-table-column>
        <el-table-column label="当前用户组级别"
                         prop="level">
        </el-table-column>
        <el-table-column label="所属一级用户组"
                         prop="firstName">
        </el-table-column>
        <el-table-column label="所属二级用户组"
                         prop="secondName">
        </el-table-column>
        <el-table-column label="建立时间"
                         prop="creationDate">
        </el-table-column>
        <el-table-column label="操作">
            <template slot-scope="scope">
                <el-button size="mini"
                           v-on:click="handleEdit(scope.$index, scope.row)">编辑</el-button>

                <el-button size="mini"
                           type="danger"
                           v-on:click="handleDelete(scope.$index, scope.row)">删除</el-button>
            </template>
        </el-table-column>
    </el-table>
    <el-dialog :title="dialogTitle"
               :visible.sync="centerDialogVisible"
               width="30%"
               center>
        <el-form :label-position="labelPosition" label-width="160px" :model="form" :rules="rules" ref="form">
            <el-form-item label="ID：" prop="ID" hidden>
                <el-input placeholder="id" v-model="form.id"></el-input>
            </el-form-item>
            <el-form-item label="用户组名称：" prop="name">
                <el-input placeholder="用户组名称" v-model="form.name"></el-input>
            </el-form-item>
            <el-form-item label="用户组等级" prop="level">
                <el-input placeholder="用户组等级" :disabled="true" v-model.number="form.level"></el-input>
            </el-form-item>
            <el-form-item label="一级用户组：">
                <el-select v-model="form.firstName" @@change="firstChange(form.firstName)" placeholder="请选择">
                    <el-option v-for="item in optfirstName"
                               :key="item.id"
                               :label="item.name"
                               :value="item.id"
                               :disabled="item.disabled">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="二级用户组：">
                <el-select v-model="form.secondName" @@change="secondChange(form.secondName)" placeholder="请选择">
                    <el-option v-for="item in optsecondName"
                               :key="item.id"
                               :label="item.name"
                               :value="item.id"
                               :disabled="item.disabled">
                    </el-option>
                </el-select>
            </el-form-item>
        </el-form>
        <div slot="footer" class="dialog-footer">
            <el-button v-on:click="dialogCancel()">取 消</el-button>
            <el-button type="primary" v-on:click="dialogSave('form')">确 定</el-button>
        </div>
    </el-dialog>
</div>
<script>
    layui.use(['element', 'layer'], function () {
        var layer = layui.layer
        var form = layui.form;
        var $ = layui.$
    })
</script>
<script>
    var usergroups = [];
    new Vue({
        el: "#app",
        data: function () {
            return {
                data: [],
                centerDialogVisible: false,
                currentPage: 1,
                pageSize: 10,
                searchLevel: '',
                searchName: '',
                firstName: '',
                optfirstName:[],
                secondName: '',
                optsecondName:[],
                userOwer: 0,
                optLevel: [
                    { value: '', label: '请选择' },
                    { value: '1', label: '一级用户' },
                    { value: '2', label: '二级用户' },
                    { value: '3', label: '三级用户' },
                ],
                form: {
                    id: '',
                    name: '',
                    level: '',
                    firstName: '',
                    secondName:'',
                },
                rules: {
                    name: [
                        { required: true, message: '用户组名不能为空', trigger: 'blur' },
                        
                    ],
                },
                formLabelWidth: '160px',
                dialogTitle: '',
                labelPosition: 'left',
                IsCreate: true,//是否新增
            }
        },
        methods: {
            fetchList: function () {
                let vm = this
                axios.get(`/api/sysusergroupdata/${vm.pageSize}/${vm.currentPage}?level=${vm.searchLevel}&name=${vm.searchName}`)
                    .then(function (response) {
                        vm.data = response.data.content.data;
                    })
                    .catch(function (error) {
                        console.log(error)
                    });
            },
            handleEdit: function (index, row) {
                //编辑
                let vm = this
                let rowstr = JSON.stringify(row)
                let formdata = JSON.parse(rowstr)
                vm.IsCreate = false
                vm.dialogTitle = "编辑信息"
                vm.form = formdata;
                vm.initSecondSelect(vm.form.firstId, vm.form.secondId);
                //console.log(formdata);
                //console.log(vm.form);
                vm.centerDialogVisible = true
            },
            handleAdd: function () {
                let vm = this
                vm.IsCreate = true
                vm.resetForm();
                vm.dialogTitle = "添加信息"
                vm.centerDialogVisible = true
                //添加
            },
            dialogCancel: function () {
                let vm = this;

                vm.centerDialogVisible = false
            },
            dialogSave: function (formName) {
                let vm = this;
                var parentid = vm.form.firstName;
                if (parentid != "") {
                    var secondid = vm.form.secondName;
                    if (secondid != "") {
                        parentid = secondid;
                    }
                }
                vm.$refs[formName].validate((valid) => {
                    if (valid) {
                        let model = {
                            name: vm.form.name,
                            parentid: parentid,
                            
                        };
                        console.log(parentid);
                        let url = "/api/sysusergroupdata";
                        let method = "POST";
                        if (vm.IsCreate != true) {
                            url = `/api/sysusergroupdata/${vm.form.id}`;
                            method = "PUT";
                        }
                        axios({ url: url, method: method, data: model})
                            .then(function (response) {
                                if (!response.data.isSuccess) {
                                    vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                    return;
                                }
                                vm.$message({ title: '成功', message: response.data.message, type: 'success' })
                                vm.fetchList();
                                vm.centerDialogVisible = false
                            })
                            .catch(function (error) {
                                vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                                console.log(error);
                            });

                    } else {
                        console.log('error submit!!');
                        return;
                    }
                });
            },
            getUserGroups: function () {
                let vm = this;
                axios.get('/api/sysusergroupdata/acquisitionmodule')
                    .then(function (response) {
                        usergroups = response.data;
                       
                        vm.optfirstName = usergroups;
                        vm.optfirstName.unshift({ name: '不选择', id: '' });
                        console.log(usergroups);
                        if (response.data.length == 0) return;

                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            handleDelete: function (index, row) {
                let vm = this
                let confirm_title = `确认删除${row.name}系统用户组的记录么?`;
                if (row.level != "三级用户组") {
                    confirm_title += "<Br/>" + "&nbsp;&nbsp;该用户组下的所有用户组也将被删除!"
            };
                this.$confirm(confirm_title, '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.delete('/api/sysusergroupdata/' + row.id)
                        .then(function (response) {
                            if (!response.data.isSuccess) {
                                vm.$message({ title: '失败', message: response.data.message, type: 'error' })
                                return;
                            }
                            vm.$message({ title: '成功', message: '删除成功', type: 'success' })
                            vm.fetchList();
                            vm.centerDialogVisible = false
                        })
                        .catch(function (error) {
                            vm.$message({ title: '异常', message: '发生了预料之外的错误!', type: 'error' })
                            console.log(error);
                        });

                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });

            },
            initSecondSelect: function (id, secondid) {
                let vm = this;
                let childs_module = [];
                for (let i = 0; i < usergroups.length; i++) {
                    if (usergroups[i].id == id) {
                        childs_module = usergroups[i].listChilds;
                        break;
                    }
                }
                if (childs_module.length == 0 || childs_module==null) {
                    return;
                }
                vm.optsecondName = childs_module;
                vm.optsecondName.unshift({ name: '不选择', id: '' });

            },
            firstChange: function (val) {
                let vm = this;
                vm.initSecondSelect(val, "");
                vm.optsecondName[0]=[];
                if (val == "" || val == null) {
                    vm.form.level = "一级用户组";
                    return;
                }
                vm.form.level = "二级用户组";
                vm.form.secondName = "";
            },
            secondChange: function (val) {
                let vm = this;
                if (val == "" || val == null) {
                    vm.form.level = "二级用户组";
                    return;
                }
                vm.form.level = "三级用户组";
            },
            resetForm() {
                let vm = this;
                vm.form.id = ''
                vm.form.name = ''
                vm.form.level = ''
                vm.form.firstName = ''
                vm.form.secondName = ''
              
            },
        },
        mounted: function () {
            let vm = this
            vm.fetchList();
            vm.getUserGroups();
        }

    });
</script>



